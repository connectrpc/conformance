// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: connectrpc/conformance/test.proto

#include "connectrpc/conformance/test.pb.h"
#include "connectrpc/conformance/test.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace connectrpc {
namespace conformance {

static const char* TestService_method_names[] = {
  "/connectrpc.conformance.TestService/EmptyCall",
  "/connectrpc.conformance.TestService/UnaryCall",
  "/connectrpc.conformance.TestService/FailUnaryCall",
  "/connectrpc.conformance.TestService/CacheableUnaryCall",
  "/connectrpc.conformance.TestService/StreamingOutputCall",
  "/connectrpc.conformance.TestService/FailStreamingOutputCall",
  "/connectrpc.conformance.TestService/StreamingInputCall",
  "/connectrpc.conformance.TestService/FullDuplexCall",
  "/connectrpc.conformance.TestService/HalfDuplexCall",
  "/connectrpc.conformance.TestService/UnimplementedCall",
  "/connectrpc.conformance.TestService/UnimplementedStreamingOutputCall",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel, options));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EmptyCall_(TestService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnaryCall_(TestService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FailUnaryCall_(TestService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CacheableUnaryCall_(TestService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamingOutputCall_(TestService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FailStreamingOutputCall_(TestService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamingInputCall_(TestService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_FullDuplexCall_(TestService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_HalfDuplexCall_(TestService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_UnimplementedCall_(TestService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnimplementedStreamingOutputCall_(TestService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TestService::Stub::EmptyCall(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EmptyCall_, context, request, response);
}

void TestService::Stub::async::EmptyCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EmptyCall_, context, request, response, std::move(f));
}

void TestService::Stub::async::EmptyCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EmptyCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TestService::Stub::PrepareAsyncEmptyCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EmptyCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TestService::Stub::AsyncEmptyCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEmptyCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::UnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::connectrpc::conformance::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnaryCall_, context, request, response);
}

void TestService::Stub::async::UnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnaryCall_, context, request, response, std::move(f));
}

void TestService::Stub::async::UnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnaryCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::PrepareAsyncUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::SimpleResponse, ::connectrpc::conformance::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnaryCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::AsyncUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnaryCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::FailUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::connectrpc::conformance::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FailUnaryCall_, context, request, response);
}

void TestService::Stub::async::FailUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FailUnaryCall_, context, request, response, std::move(f));
}

void TestService::Stub::async::FailUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FailUnaryCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::PrepareAsyncFailUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::SimpleResponse, ::connectrpc::conformance::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FailUnaryCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::AsyncFailUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFailUnaryCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::CacheableUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::connectrpc::conformance::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CacheableUnaryCall_, context, request, response);
}

void TestService::Stub::async::CacheableUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheableUnaryCall_, context, request, response, std::move(f));
}

void TestService::Stub::async::CacheableUnaryCall(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheableUnaryCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::PrepareAsyncCacheableUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::SimpleResponse, ::connectrpc::conformance::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CacheableUnaryCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::SimpleResponse>* TestService::Stub::AsyncCacheableUnaryCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCacheableUnaryCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::StreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), rpcmethod_StreamingOutputCall_, context, request);
}

void TestService::Stub::async::StreamingOutputCall(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest* request, ::grpc::ClientReadReactor< ::connectrpc::conformance::StreamingOutputCallResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamingOutputCall_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::AsyncStreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_StreamingOutputCall_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::PrepareAsyncStreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_StreamingOutputCall_, context, request, false, nullptr);
}

::grpc::ClientReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::FailStreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), rpcmethod_FailStreamingOutputCall_, context, request);
}

void TestService::Stub::async::FailStreamingOutputCall(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest* request, ::grpc::ClientReadReactor< ::connectrpc::conformance::StreamingOutputCallResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FailStreamingOutputCall_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::AsyncFailStreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_FailStreamingOutputCall_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::PrepareAsyncFailStreamingOutputCallRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_FailStreamingOutputCall_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::connectrpc::conformance::StreamingInputCallRequest>* TestService::Stub::StreamingInputCallRaw(::grpc::ClientContext* context, ::connectrpc::conformance::StreamingInputCallResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::connectrpc::conformance::StreamingInputCallRequest>::Create(channel_.get(), rpcmethod_StreamingInputCall_, context, response);
}

void TestService::Stub::async::StreamingInputCall(::grpc::ClientContext* context, ::connectrpc::conformance::StreamingInputCallResponse* response, ::grpc::ClientWriteReactor< ::connectrpc::conformance::StreamingInputCallRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::connectrpc::conformance::StreamingInputCallRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamingInputCall_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::connectrpc::conformance::StreamingInputCallRequest>* TestService::Stub::AsyncStreamingInputCallRaw(::grpc::ClientContext* context, ::connectrpc::conformance::StreamingInputCallResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::connectrpc::conformance::StreamingInputCallRequest>::Create(channel_.get(), cq, rpcmethod_StreamingInputCall_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::connectrpc::conformance::StreamingInputCallRequest>* TestService::Stub::PrepareAsyncStreamingInputCallRaw(::grpc::ClientContext* context, ::connectrpc::conformance::StreamingInputCallResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::connectrpc::conformance::StreamingInputCallRequest>::Create(channel_.get(), cq, rpcmethod_StreamingInputCall_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::FullDuplexCallRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), rpcmethod_FullDuplexCall_, context);
}

void TestService::Stub::async::FullDuplexCall(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::connectrpc::conformance::StreamingOutputCallRequest,::connectrpc::conformance::StreamingOutputCallResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest,::connectrpc::conformance::StreamingOutputCallResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FullDuplexCall_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::AsyncFullDuplexCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_FullDuplexCall_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::PrepareAsyncFullDuplexCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_FullDuplexCall_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::HalfDuplexCallRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), rpcmethod_HalfDuplexCall_, context);
}

void TestService::Stub::async::HalfDuplexCall(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::connectrpc::conformance::StreamingOutputCallRequest,::connectrpc::conformance::StreamingOutputCallResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest,::connectrpc::conformance::StreamingOutputCallResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_HalfDuplexCall_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::AsyncHalfDuplexCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_HalfDuplexCall_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>* TestService::Stub::PrepareAsyncHalfDuplexCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>::Create(channel_.get(), cq, rpcmethod_HalfDuplexCall_, context, false, nullptr);
}

::grpc::Status TestService::Stub::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnimplementedCall_, context, request, response);
}

void TestService::Stub::async::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnimplementedCall_, context, request, response, std::move(f));
}

void TestService::Stub::async::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnimplementedCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TestService::Stub::PrepareAsyncUnimplementedCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnimplementedCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TestService::Stub::AsyncUnimplementedCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnimplementedCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::google::protobuf::Empty>* TestService::Stub::UnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), rpcmethod_UnimplementedStreamingOutputCall_, context, request);
}

void TestService::Stub::async::UnimplementedStreamingOutputCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::google::protobuf::Empty>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::protobuf::Empty>::Create(stub_->channel_.get(), stub_->rpcmethod_UnimplementedStreamingOutputCall_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Empty>* TestService::Stub::AsyncUnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnimplementedStreamingOutputCall_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Empty>* TestService::Stub::PrepareAsyncUnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnimplementedStreamingOutputCall_, context, request, false, nullptr);
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->EmptyCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::SimpleRequest* req,
             ::connectrpc::conformance::SimpleResponse* resp) {
               return service->UnaryCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::SimpleRequest* req,
             ::connectrpc::conformance::SimpleResponse* resp) {
               return service->FailUnaryCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::connectrpc::conformance::SimpleRequest, ::connectrpc::conformance::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::SimpleRequest* req,
             ::connectrpc::conformance::SimpleResponse* resp) {
               return service->CacheableUnaryCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestService::Service, ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::StreamingOutputCallRequest* req,
             ::grpc::ServerWriter<::connectrpc::conformance::StreamingOutputCallResponse>* writer) {
               return service->StreamingOutputCall(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestService::Service, ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::StreamingOutputCallRequest* req,
             ::grpc::ServerWriter<::connectrpc::conformance::StreamingOutputCallResponse>* writer) {
               return service->FailStreamingOutputCall(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[6],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< TestService::Service, ::connectrpc::conformance::StreamingInputCallRequest, ::connectrpc::conformance::StreamingInputCallResponse>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::connectrpc::conformance::StreamingInputCallRequest>* reader,
             ::connectrpc::conformance::StreamingInputCallResponse* resp) {
               return service->StreamingInputCall(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[7],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TestService::Service, ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::connectrpc::conformance::StreamingOutputCallResponse,
             ::connectrpc::conformance::StreamingOutputCallRequest>* stream) {
               return service->FullDuplexCall(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TestService::Service, ::connectrpc::conformance::StreamingOutputCallRequest, ::connectrpc::conformance::StreamingOutputCallResponse>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::connectrpc::conformance::StreamingOutputCallResponse,
             ::connectrpc::conformance::StreamingOutputCallRequest>* stream) {
               return service->HalfDuplexCall(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->UnimplementedCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::google::protobuf::Empty>* writer) {
               return service->UnimplementedStreamingOutputCall(ctx, req, writer);
             }, this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::EmptyCall(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::UnaryCall(::grpc::ServerContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::FailUnaryCall(::grpc::ServerContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::CacheableUnaryCall(::grpc::ServerContext* context, const ::connectrpc::conformance::SimpleRequest* request, ::connectrpc::conformance::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::StreamingOutputCall(::grpc::ServerContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest* request, ::grpc::ServerWriter< ::connectrpc::conformance::StreamingOutputCallResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::FailStreamingOutputCall(::grpc::ServerContext* context, const ::connectrpc::conformance::StreamingOutputCallRequest* request, ::grpc::ServerWriter< ::connectrpc::conformance::StreamingOutputCallResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::StreamingInputCall(::grpc::ServerContext* context, ::grpc::ServerReader< ::connectrpc::conformance::StreamingInputCallRequest>* reader, ::connectrpc::conformance::StreamingInputCallResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::FullDuplexCall(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::connectrpc::conformance::StreamingOutputCallResponse, ::connectrpc::conformance::StreamingOutputCallRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::HalfDuplexCall(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::connectrpc::conformance::StreamingOutputCallResponse, ::connectrpc::conformance::StreamingOutputCallRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::UnimplementedCall(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::UnimplementedStreamingOutputCall(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::Empty>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UnimplementedService_method_names[] = {
  "/connectrpc.conformance.UnimplementedService/UnimplementedCall",
  "/connectrpc.conformance.UnimplementedService/UnimplementedStreamingOutputCall",
};

std::unique_ptr< UnimplementedService::Stub> UnimplementedService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UnimplementedService::Stub> stub(new UnimplementedService::Stub(channel, options));
  return stub;
}

UnimplementedService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UnimplementedCall_(UnimplementedService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnimplementedStreamingOutputCall_(UnimplementedService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status UnimplementedService::Stub::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnimplementedCall_, context, request, response);
}

void UnimplementedService::Stub::async::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnimplementedCall_, context, request, response, std::move(f));
}

void UnimplementedService::Stub::async::UnimplementedCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnimplementedCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnimplementedService::Stub::PrepareAsyncUnimplementedCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnimplementedCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnimplementedService::Stub::AsyncUnimplementedCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnimplementedCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::google::protobuf::Empty>* UnimplementedService::Stub::UnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), rpcmethod_UnimplementedStreamingOutputCall_, context, request);
}

void UnimplementedService::Stub::async::UnimplementedStreamingOutputCall(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::google::protobuf::Empty>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::protobuf::Empty>::Create(stub_->channel_.get(), stub_->rpcmethod_UnimplementedStreamingOutputCall_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Empty>* UnimplementedService::Stub::AsyncUnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnimplementedStreamingOutputCall_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Empty>* UnimplementedService::Stub::PrepareAsyncUnimplementedStreamingOutputCallRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnimplementedStreamingOutputCall_, context, request, false, nullptr);
}

UnimplementedService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnimplementedService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnimplementedService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnimplementedService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->UnimplementedCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnimplementedService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UnimplementedService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          [](UnimplementedService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::google::protobuf::Empty>* writer) {
               return service->UnimplementedStreamingOutputCall(ctx, req, writer);
             }, this)));
}

UnimplementedService::Service::~Service() {
}

::grpc::Status UnimplementedService::Service::UnimplementedCall(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnimplementedService::Service::UnimplementedStreamingOutputCall(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::Empty>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReconnectService_method_names[] = {
  "/connectrpc.conformance.ReconnectService/Start",
  "/connectrpc.conformance.ReconnectService/Stop",
};

std::unique_ptr< ReconnectService::Stub> ReconnectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReconnectService::Stub> stub(new ReconnectService::Stub(channel, options));
  return stub;
}

ReconnectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Start_(ReconnectService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(ReconnectService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReconnectService::Stub::Start(::grpc::ClientContext* context, const ::connectrpc::conformance::ReconnectParams& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::ReconnectParams, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void ReconnectService::Stub::async::Start(::grpc::ClientContext* context, const ::connectrpc::conformance::ReconnectParams* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::ReconnectParams, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void ReconnectService::Stub::async::Start(::grpc::ClientContext* context, const ::connectrpc::conformance::ReconnectParams* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ReconnectService::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::ReconnectParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::connectrpc::conformance::ReconnectParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ReconnectService::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::ReconnectParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReconnectService::Stub::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::connectrpc::conformance::ReconnectInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::connectrpc::conformance::ReconnectInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void ReconnectService::Stub::async::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::connectrpc::conformance::ReconnectInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::connectrpc::conformance::ReconnectInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ReconnectService::Stub::async::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::connectrpc::conformance::ReconnectInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::ReconnectInfo>* ReconnectService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::ReconnectInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::ReconnectInfo>* ReconnectService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReconnectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconnectService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconnectService::Service, ::connectrpc::conformance::ReconnectParams, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReconnectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::ReconnectParams* req,
             ::google::protobuf::Empty* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconnectService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconnectService::Service, ::google::protobuf::Empty, ::connectrpc::conformance::ReconnectInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReconnectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::connectrpc::conformance::ReconnectInfo* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
}

ReconnectService::Service::~Service() {
}

::grpc::Status ReconnectService::Service::Start(::grpc::ServerContext* context, const ::connectrpc::conformance::ReconnectParams* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconnectService::Service::Stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::connectrpc::conformance::ReconnectInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LoadBalancerStatsService_method_names[] = {
  "/connectrpc.conformance.LoadBalancerStatsService/GetClientStats",
  "/connectrpc.conformance.LoadBalancerStatsService/GetClientAccumulatedStats",
};

std::unique_ptr< LoadBalancerStatsService::Stub> LoadBalancerStatsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoadBalancerStatsService::Stub> stub(new LoadBalancerStatsService::Stub(channel, options));
  return stub;
}

LoadBalancerStatsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetClientStats_(LoadBalancerStatsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClientAccumulatedStats_(LoadBalancerStatsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoadBalancerStatsService::Stub::GetClientStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest& request, ::connectrpc::conformance::LoadBalancerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::LoadBalancerStatsRequest, ::connectrpc::conformance::LoadBalancerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClientStats_, context, request, response);
}

void LoadBalancerStatsService::Stub::async::GetClientStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest* request, ::connectrpc::conformance::LoadBalancerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::LoadBalancerStatsRequest, ::connectrpc::conformance::LoadBalancerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientStats_, context, request, response, std::move(f));
}

void LoadBalancerStatsService::Stub::async::GetClientStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest* request, ::connectrpc::conformance::LoadBalancerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::LoadBalancerStatsResponse>* LoadBalancerStatsService::Stub::PrepareAsyncGetClientStatsRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::LoadBalancerStatsResponse, ::connectrpc::conformance::LoadBalancerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClientStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::LoadBalancerStatsResponse>* LoadBalancerStatsService::Stub::AsyncGetClientStatsRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClientStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoadBalancerStatsService::Stub::GetClientAccumulatedStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest& request, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClientAccumulatedStats_, context, request, response);
}

void LoadBalancerStatsService::Stub::async::GetClientAccumulatedStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest* request, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientAccumulatedStats_, context, request, response, std::move(f));
}

void LoadBalancerStatsService::Stub::async::GetClientAccumulatedStats(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest* request, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientAccumulatedStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse>* LoadBalancerStatsService::Stub::PrepareAsyncGetClientAccumulatedStatsRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse, ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClientAccumulatedStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse>* LoadBalancerStatsService::Stub::AsyncGetClientAccumulatedStatsRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClientAccumulatedStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

LoadBalancerStatsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoadBalancerStatsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoadBalancerStatsService::Service, ::connectrpc::conformance::LoadBalancerStatsRequest, ::connectrpc::conformance::LoadBalancerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoadBalancerStatsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::LoadBalancerStatsRequest* req,
             ::connectrpc::conformance::LoadBalancerStatsResponse* resp) {
               return service->GetClientStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoadBalancerStatsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoadBalancerStatsService::Service, ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoadBalancerStatsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest* req,
             ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse* resp) {
               return service->GetClientAccumulatedStats(ctx, req, resp);
             }, this)));
}

LoadBalancerStatsService::Service::~Service() {
}

::grpc::Status LoadBalancerStatsService::Service::GetClientStats(::grpc::ServerContext* context, const ::connectrpc::conformance::LoadBalancerStatsRequest* request, ::connectrpc::conformance::LoadBalancerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoadBalancerStatsService::Service::GetClientAccumulatedStats(::grpc::ServerContext* context, const ::connectrpc::conformance::LoadBalancerAccumulatedStatsRequest* request, ::connectrpc::conformance::LoadBalancerAccumulatedStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* XdsUpdateHealthService_method_names[] = {
  "/connectrpc.conformance.XdsUpdateHealthService/SetServing",
  "/connectrpc.conformance.XdsUpdateHealthService/SetNotServing",
};

std::unique_ptr< XdsUpdateHealthService::Stub> XdsUpdateHealthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XdsUpdateHealthService::Stub> stub(new XdsUpdateHealthService::Stub(channel, options));
  return stub;
}

XdsUpdateHealthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetServing_(XdsUpdateHealthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNotServing_(XdsUpdateHealthService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status XdsUpdateHealthService::Stub::SetServing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServing_, context, request, response);
}

void XdsUpdateHealthService::Stub::async::SetServing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServing_, context, request, response, std::move(f));
}

void XdsUpdateHealthService::Stub::async::SetServing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* XdsUpdateHealthService::Stub::PrepareAsyncSetServingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* XdsUpdateHealthService::Stub::AsyncSetServingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status XdsUpdateHealthService::Stub::SetNotServing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNotServing_, context, request, response);
}

void XdsUpdateHealthService::Stub::async::SetNotServing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNotServing_, context, request, response, std::move(f));
}

void XdsUpdateHealthService::Stub::async::SetNotServing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNotServing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* XdsUpdateHealthService::Stub::PrepareAsyncSetNotServingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNotServing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* XdsUpdateHealthService::Stub::AsyncSetNotServingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNotServingRaw(context, request, cq);
  result->StartCall();
  return result;
}

XdsUpdateHealthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XdsUpdateHealthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XdsUpdateHealthService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XdsUpdateHealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SetServing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XdsUpdateHealthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XdsUpdateHealthService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XdsUpdateHealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SetNotServing(ctx, req, resp);
             }, this)));
}

XdsUpdateHealthService::Service::~Service() {
}

::grpc::Status XdsUpdateHealthService::Service::SetServing(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XdsUpdateHealthService::Service::SetNotServing(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* XdsUpdateClientConfigureService_method_names[] = {
  "/connectrpc.conformance.XdsUpdateClientConfigureService/Configure",
};

std::unique_ptr< XdsUpdateClientConfigureService::Stub> XdsUpdateClientConfigureService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XdsUpdateClientConfigureService::Stub> stub(new XdsUpdateClientConfigureService::Stub(channel, options));
  return stub;
}

XdsUpdateClientConfigureService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Configure_(XdsUpdateClientConfigureService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status XdsUpdateClientConfigureService::Stub::Configure(::grpc::ClientContext* context, const ::connectrpc::conformance::ClientConfigureRequest& request, ::connectrpc::conformance::ClientConfigureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::connectrpc::conformance::ClientConfigureRequest, ::connectrpc::conformance::ClientConfigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Configure_, context, request, response);
}

void XdsUpdateClientConfigureService::Stub::async::Configure(::grpc::ClientContext* context, const ::connectrpc::conformance::ClientConfigureRequest* request, ::connectrpc::conformance::ClientConfigureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::connectrpc::conformance::ClientConfigureRequest, ::connectrpc::conformance::ClientConfigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Configure_, context, request, response, std::move(f));
}

void XdsUpdateClientConfigureService::Stub::async::Configure(::grpc::ClientContext* context, const ::connectrpc::conformance::ClientConfigureRequest* request, ::connectrpc::conformance::ClientConfigureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Configure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::ClientConfigureResponse>* XdsUpdateClientConfigureService::Stub::PrepareAsyncConfigureRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::ClientConfigureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::connectrpc::conformance::ClientConfigureResponse, ::connectrpc::conformance::ClientConfigureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Configure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::connectrpc::conformance::ClientConfigureResponse>* XdsUpdateClientConfigureService::Stub::AsyncConfigureRaw(::grpc::ClientContext* context, const ::connectrpc::conformance::ClientConfigureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

XdsUpdateClientConfigureService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XdsUpdateClientConfigureService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XdsUpdateClientConfigureService::Service, ::connectrpc::conformance::ClientConfigureRequest, ::connectrpc::conformance::ClientConfigureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XdsUpdateClientConfigureService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::connectrpc::conformance::ClientConfigureRequest* req,
             ::connectrpc::conformance::ClientConfigureResponse* resp) {
               return service->Configure(ctx, req, resp);
             }, this)));
}

XdsUpdateClientConfigureService::Service::~Service() {
}

::grpc::Status XdsUpdateClientConfigureService::Service::Configure(::grpc::ServerContext* context, const ::connectrpc::conformance::ClientConfigureRequest* request, ::connectrpc::conformance::ClientConfigureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace connectrpc
}  // namespace conformance

