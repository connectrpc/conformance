// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectrpc/conformance/test.proto

#include "connectrpc/conformance/test.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace connectrpc {
namespace conformance {
}  // namespace conformance
}  // namespace connectrpc
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_connectrpc_2fconformance_2ftest_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_connectrpc_2fconformance_2ftest_2eproto = nullptr;
const ::uint32_t TableStruct_connectrpc_2fconformance_2ftest_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;
const char descriptor_table_protodef_connectrpc_2fconformance_2ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!connectrpc/conformance/test.proto\022\026con"
    "nectrpc.conformance\032%connectrpc/conforma"
    "nce/messages.proto\032\033google/protobuf/empt"
    "y.proto2\222\t\n\013TestService\022;\n\tEmptyCall\022\026.g"
    "oogle.protobuf.Empty\032\026.google.protobuf.E"
    "mpty\022Z\n\tUnaryCall\022%.connectrpc.conforman"
    "ce.SimpleRequest\032&.connectrpc.conformanc"
    "e.SimpleResponse\022^\n\rFailUnaryCall\022%.conn"
    "ectrpc.conformance.SimpleRequest\032&.conne"
    "ctrpc.conformance.SimpleResponse\022h\n\022Cach"
    "eableUnaryCall\022%.connectrpc.conformance."
    "SimpleRequest\032&.connectrpc.conformance.S"
    "impleResponse\"\003\220\002\001\022\200\001\n\023StreamingOutputCa"
    "ll\0222.connectrpc.conformance.StreamingOut"
    "putCallRequest\0323.connectrpc.conformance."
    "StreamingOutputCallResponse0\001\022\204\001\n\027FailSt"
    "reamingOutputCall\0222.connectrpc.conforman"
    "ce.StreamingOutputCallRequest\0323.connectr"
    "pc.conformance.StreamingOutputCallRespon"
    "se0\001\022}\n\022StreamingInputCall\0221.connectrpc."
    "conformance.StreamingInputCallRequest\0322."
    "connectrpc.conformance.StreamingInputCal"
    "lResponse(\001\022}\n\016FullDuplexCall\0222.connectr"
    "pc.conformance.StreamingOutputCallReques"
    "t\0323.connectrpc.conformance.StreamingOutp"
    "utCallResponse(\0010\001\022}\n\016HalfDuplexCall\0222.c"
    "onnectrpc.conformance.StreamingOutputCal"
    "lRequest\0323.connectrpc.conformance.Stream"
    "ingOutputCallResponse(\0010\001\022C\n\021Unimplement"
    "edCall\022\026.google.protobuf.Empty\032\026.google."
    "protobuf.Empty\022T\n UnimplementedStreaming"
    "OutputCall\022\026.google.protobuf.Empty\032\026.goo"
    "gle.protobuf.Empty0\0012\261\001\n\024UnimplementedSe"
    "rvice\022C\n\021UnimplementedCall\022\026.google.prot"
    "obuf.Empty\032\026.google.protobuf.Empty\022T\n Un"
    "implementedStreamingOutputCall\022\026.google."
    "protobuf.Empty\032\026.google.protobuf.Empty0\001"
    "2\243\001\n\020ReconnectService\022H\n\005Start\022\'.connect"
    "rpc.conformance.ReconnectParams\032\026.google"
    ".protobuf.Empty\022E\n\004Stop\022\026.google.protobu"
    "f.Empty\032%.connectrpc.conformance.Reconne"
    "ctInfo2\256\002\n\030LoadBalancerStatsService\022w\n\016G"
    "etClientStats\0220.connectrpc.conformance.L"
    "oadBalancerStatsRequest\0321.connectrpc.con"
    "formance.LoadBalancerStatsResponse\"\000\022\230\001\n"
    "\031GetClientAccumulatedStats\022;.connectrpc."
    "conformance.LoadBalancerAccumulatedStats"
    "Request\032<.connectrpc.conformance.LoadBal"
    "ancerAccumulatedStatsResponse\"\0002\227\001\n\026XdsU"
    "pdateHealthService\022<\n\nSetServing\022\026.googl"
    "e.protobuf.Empty\032\026.google.protobuf.Empty"
    "\022\?\n\rSetNotServing\022\026.google.protobuf.Empt"
    "y\032\026.google.protobuf.Empty2\217\001\n\037XdsUpdateC"
    "lientConfigureService\022l\n\tConfigure\022..con"
    "nectrpc.conformance.ClientConfigureReque"
    "st\032/.connectrpc.conformance.ClientConfig"
    "ureResponseB\364\001\n\032com.connectrpc.conforman"
    "ceB\tTestProtoP\001ZRgithub.com/bufbuild/con"
    "nect-crosstest/internal/gen/proto/go/con"
    "nectrpc/conformance\242\002\003CCX\252\002\026Connectrpc.C"
    "onformance\312\002\026Connectrpc\\Conformance\342\002\"Co"
    "nnectrpc\\Conformance\\GPBMetadata\352\002\027Conne"
    "ctrpc::Conformanceb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_connectrpc_2fconformance_2ftest_2eproto_deps[2] =
    {
        &::descriptor_table_connectrpc_2fconformance_2fmessages_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_connectrpc_2fconformance_2ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_connectrpc_2fconformance_2ftest_2eproto = {
    false,
    false,
    2506,
    descriptor_table_protodef_connectrpc_2fconformance_2ftest_2eproto,
    "connectrpc/conformance/test.proto",
    &descriptor_table_connectrpc_2fconformance_2ftest_2eproto_once,
    descriptor_table_connectrpc_2fconformance_2ftest_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_connectrpc_2fconformance_2ftest_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_connectrpc_2fconformance_2ftest_2eproto,
    file_level_service_descriptors_connectrpc_2fconformance_2ftest_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_connectrpc_2fconformance_2ftest_2eproto_getter() {
  return &descriptor_table_connectrpc_2fconformance_2ftest_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_connectrpc_2fconformance_2ftest_2eproto(&descriptor_table_connectrpc_2fconformance_2ftest_2eproto);
namespace connectrpc {
namespace conformance {
// @@protoc_insertion_point(namespace_scope)
}  // namespace conformance
}  // namespace connectrpc
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
