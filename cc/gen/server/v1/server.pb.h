// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/v1/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fv1_2fserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_server_2fv1_2fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_server_2fv1_2fserver_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fv1_2fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_server_2fv1_2fserver_2eproto;
namespace server {
namespace v1 {
class HTTPVersion;
struct HTTPVersionDefaultTypeInternal;
extern HTTPVersionDefaultTypeInternal _HTTPVersion_default_instance_;
class ProtocolSupport;
struct ProtocolSupportDefaultTypeInternal;
extern ProtocolSupportDefaultTypeInternal _ProtocolSupport_default_instance_;
class ServerMetadata;
struct ServerMetadataDefaultTypeInternal;
extern ServerMetadataDefaultTypeInternal _ServerMetadata_default_instance_;
}  // namespace v1
}  // namespace server
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace server {
namespace v1 {
enum Protocol : int {
  PROTOCOL_UNSPECIFIED = 0,
  PROTOCOL_GRPC = 1,
  PROTOCOL_GRPC_WEB = 2,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = static_cast<Protocol>(0);
constexpr Protocol Protocol_MAX = static_cast<Protocol>(2);
constexpr int Protocol_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Protocol_descriptor();
template <typename T>
const std::string& Protocol_Name(T value) {
  static_assert(std::is_same<T, Protocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Protocol_Name().");
  return Protocol_Name(static_cast<Protocol>(value));
}
template <>
inline const std::string& Protocol_Name(Protocol value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Protocol_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Protocol_Parse(absl::string_view name, Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protocol>(
      Protocol_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.v1.ServerMetadata) */ {
 public:
  inline ServerMetadata() : ServerMetadata(nullptr) {}
  ~ServerMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerMetadata(::google::protobuf::internal::ConstantInitialized);

  ServerMetadata(const ServerMetadata& from);
  ServerMetadata(ServerMetadata&& from) noexcept
    : ServerMetadata() {
    *this = ::std::move(from);
  }

  inline ServerMetadata& operator=(const ServerMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMetadata& operator=(ServerMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMetadata* internal_default_instance() {
    return reinterpret_cast<const ServerMetadata*>(
               &_ServerMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerMetadata& a, ServerMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerMetadata& from) {
    ServerMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "server.v1.ServerMetadata";
  }
  protected:
  explicit ServerMetadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolsFieldNumber = 2,
    kHostFieldNumber = 1,
  };
  // repeated .server.v1.ProtocolSupport protocols = 2 [json_name = "protocols"];
  int protocols_size() const;
  private:
  int _internal_protocols_size() const;

  public:
  void clear_protocols() ;
  ::server::v1::ProtocolSupport* mutable_protocols(int index);
  ::google::protobuf::RepeatedPtrField< ::server::v1::ProtocolSupport >*
      mutable_protocols();
  private:
  const ::google::protobuf::RepeatedPtrField<::server::v1::ProtocolSupport>& _internal_protocols() const;
  ::google::protobuf::RepeatedPtrField<::server::v1::ProtocolSupport>* _internal_mutable_protocols();
  public:
  const ::server::v1::ProtocolSupport& protocols(int index) const;
  ::server::v1::ProtocolSupport* add_protocols();
  const ::google::protobuf::RepeatedPtrField< ::server::v1::ProtocolSupport >&
      protocols() const;
  // string host = 1 [json_name = "host"];
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // @@protoc_insertion_point(class_scope:server.v1.ServerMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::server::v1::ProtocolSupport > protocols_;
    ::google::protobuf::internal::ArenaStringPtr host_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2fv1_2fserver_2eproto;
};// -------------------------------------------------------------------

class ProtocolSupport final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.v1.ProtocolSupport) */ {
 public:
  inline ProtocolSupport() : ProtocolSupport(nullptr) {}
  ~ProtocolSupport() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProtocolSupport(::google::protobuf::internal::ConstantInitialized);

  ProtocolSupport(const ProtocolSupport& from);
  ProtocolSupport(ProtocolSupport&& from) noexcept
    : ProtocolSupport() {
    *this = ::std::move(from);
  }

  inline ProtocolSupport& operator=(const ProtocolSupport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSupport& operator=(ProtocolSupport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolSupport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolSupport* internal_default_instance() {
    return reinterpret_cast<const ProtocolSupport*>(
               &_ProtocolSupport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolSupport& a, ProtocolSupport& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSupport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSupport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolSupport* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtocolSupport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtocolSupport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProtocolSupport& from) {
    ProtocolSupport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSupport* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "server.v1.ProtocolSupport";
  }
  protected:
  explicit ProtocolSupport(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpVersionsFieldNumber = 2,
    kPortFieldNumber = 3,
    kProtocolFieldNumber = 1,
  };
  // repeated .server.v1.HTTPVersion http_versions = 2 [json_name = "httpVersions"];
  int http_versions_size() const;
  private:
  int _internal_http_versions_size() const;

  public:
  void clear_http_versions() ;
  ::server::v1::HTTPVersion* mutable_http_versions(int index);
  ::google::protobuf::RepeatedPtrField< ::server::v1::HTTPVersion >*
      mutable_http_versions();
  private:
  const ::google::protobuf::RepeatedPtrField<::server::v1::HTTPVersion>& _internal_http_versions() const;
  ::google::protobuf::RepeatedPtrField<::server::v1::HTTPVersion>* _internal_mutable_http_versions();
  public:
  const ::server::v1::HTTPVersion& http_versions(int index) const;
  ::server::v1::HTTPVersion* add_http_versions();
  const ::google::protobuf::RepeatedPtrField< ::server::v1::HTTPVersion >&
      http_versions() const;
  // string port = 3 [json_name = "port"];
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* ptr);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // .server.v1.Protocol protocol = 1 [json_name = "protocol"];
  void clear_protocol() ;
  ::server::v1::Protocol protocol() const;
  void set_protocol(::server::v1::Protocol value);

  private:
  ::server::v1::Protocol _internal_protocol() const;
  void _internal_set_protocol(::server::v1::Protocol value);

  public:
  // @@protoc_insertion_point(class_scope:server.v1.ProtocolSupport)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 38, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::server::v1::HTTPVersion > http_versions_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    int protocol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2fv1_2fserver_2eproto;
};// -------------------------------------------------------------------

class HTTPVersion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.v1.HTTPVersion) */ {
 public:
  inline HTTPVersion() : HTTPVersion(nullptr) {}
  ~HTTPVersion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HTTPVersion(::google::protobuf::internal::ConstantInitialized);

  HTTPVersion(const HTTPVersion& from);
  HTTPVersion(HTTPVersion&& from) noexcept
    : HTTPVersion() {
    *this = ::std::move(from);
  }

  inline HTTPVersion& operator=(const HTTPVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPVersion& operator=(HTTPVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HTTPVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const HTTPVersion* internal_default_instance() {
    return reinterpret_cast<const HTTPVersion*>(
               &_HTTPVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HTTPVersion& a, HTTPVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPVersion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HTTPVersion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HTTPVersion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HTTPVersion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HTTPVersion& from) {
    HTTPVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPVersion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "server.v1.HTTPVersion";
  }
  protected:
  explicit HTTPVersion(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
  };
  // int32 major = 1 [json_name = "major"];
  void clear_major() ;
  ::int32_t major() const;
  void set_major(::int32_t value);

  private:
  ::int32_t _internal_major() const;
  void _internal_set_major(::int32_t value);

  public:
  // int32 minor = 2 [json_name = "minor"];
  void clear_minor() ;
  ::int32_t minor() const;
  void set_minor(::int32_t value);

  private:
  ::int32_t _internal_minor() const;
  void _internal_set_minor(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:server.v1.HTTPVersion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t major_;
    ::int32_t minor_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2fv1_2fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerMetadata

// string host = 1 [json_name = "host"];
inline void ServerMetadata::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ServerMetadata::host() const {
  // @@protoc_insertion_point(field_get:server.v1.ServerMetadata.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerMetadata::set_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:server.v1.ServerMetadata.host)
}
inline std::string* ServerMetadata::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:server.v1.ServerMetadata.host)
  return _s;
}
inline const std::string& ServerMetadata::_internal_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.host_.Get();
}
inline void ServerMetadata::_internal_set_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerMetadata::_internal_mutable_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerMetadata::release_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:server.v1.ServerMetadata.host)
  return _impl_.host_.Release();
}
inline void ServerMetadata::set_allocated_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:server.v1.ServerMetadata.host)
}

// repeated .server.v1.ProtocolSupport protocols = 2 [json_name = "protocols"];
inline int ServerMetadata::_internal_protocols_size() const {
  return _internal_protocols().size();
}
inline int ServerMetadata::protocols_size() const {
  return _internal_protocols_size();
}
inline void ServerMetadata::clear_protocols() {
  _internal_mutable_protocols()->Clear();
}
inline ::server::v1::ProtocolSupport* ServerMetadata::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:server.v1.ServerMetadata.protocols)
  return _internal_mutable_protocols()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::server::v1::ProtocolSupport >*
ServerMetadata::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:server.v1.ServerMetadata.protocols)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_protocols();
}
inline const ::server::v1::ProtocolSupport& ServerMetadata::protocols(int index) const {
  // @@protoc_insertion_point(field_get:server.v1.ServerMetadata.protocols)
    return _internal_protocols().Get(index);
}
inline ::server::v1::ProtocolSupport* ServerMetadata::add_protocols() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::server::v1::ProtocolSupport* _add = _internal_mutable_protocols()->Add();
  // @@protoc_insertion_point(field_add:server.v1.ServerMetadata.protocols)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::v1::ProtocolSupport >&
ServerMetadata::protocols() const {
  // @@protoc_insertion_point(field_list:server.v1.ServerMetadata.protocols)
  return _internal_protocols();
}
inline const ::google::protobuf::RepeatedPtrField<::server::v1::ProtocolSupport>&
ServerMetadata::_internal_protocols() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.protocols_;
}
inline ::google::protobuf::RepeatedPtrField<::server::v1::ProtocolSupport>*
ServerMetadata::_internal_mutable_protocols() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.protocols_;
}

// -------------------------------------------------------------------

// ProtocolSupport

// .server.v1.Protocol protocol = 1 [json_name = "protocol"];
inline void ProtocolSupport::clear_protocol() {
  _impl_.protocol_ = 0;
}
inline ::server::v1::Protocol ProtocolSupport::protocol() const {
  // @@protoc_insertion_point(field_get:server.v1.ProtocolSupport.protocol)
  return _internal_protocol();
}
inline void ProtocolSupport::set_protocol(::server::v1::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:server.v1.ProtocolSupport.protocol)
}
inline ::server::v1::Protocol ProtocolSupport::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::server::v1::Protocol>(_impl_.protocol_);
}
inline void ProtocolSupport::_internal_set_protocol(::server::v1::Protocol value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_ = value;
}

// repeated .server.v1.HTTPVersion http_versions = 2 [json_name = "httpVersions"];
inline int ProtocolSupport::_internal_http_versions_size() const {
  return _internal_http_versions().size();
}
inline int ProtocolSupport::http_versions_size() const {
  return _internal_http_versions_size();
}
inline void ProtocolSupport::clear_http_versions() {
  _internal_mutable_http_versions()->Clear();
}
inline ::server::v1::HTTPVersion* ProtocolSupport::mutable_http_versions(int index) {
  // @@protoc_insertion_point(field_mutable:server.v1.ProtocolSupport.http_versions)
  return _internal_mutable_http_versions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::server::v1::HTTPVersion >*
ProtocolSupport::mutable_http_versions() {
  // @@protoc_insertion_point(field_mutable_list:server.v1.ProtocolSupport.http_versions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_http_versions();
}
inline const ::server::v1::HTTPVersion& ProtocolSupport::http_versions(int index) const {
  // @@protoc_insertion_point(field_get:server.v1.ProtocolSupport.http_versions)
    return _internal_http_versions().Get(index);
}
inline ::server::v1::HTTPVersion* ProtocolSupport::add_http_versions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::server::v1::HTTPVersion* _add = _internal_mutable_http_versions()->Add();
  // @@protoc_insertion_point(field_add:server.v1.ProtocolSupport.http_versions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::v1::HTTPVersion >&
ProtocolSupport::http_versions() const {
  // @@protoc_insertion_point(field_list:server.v1.ProtocolSupport.http_versions)
  return _internal_http_versions();
}
inline const ::google::protobuf::RepeatedPtrField<::server::v1::HTTPVersion>&
ProtocolSupport::_internal_http_versions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.http_versions_;
}
inline ::google::protobuf::RepeatedPtrField<::server::v1::HTTPVersion>*
ProtocolSupport::_internal_mutable_http_versions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.http_versions_;
}

// string port = 3 [json_name = "port"];
inline void ProtocolSupport::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& ProtocolSupport::port() const {
  // @@protoc_insertion_point(field_get:server.v1.ProtocolSupport.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtocolSupport::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:server.v1.ProtocolSupport.port)
}
inline std::string* ProtocolSupport::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:server.v1.ProtocolSupport.port)
  return _s;
}
inline const std::string& ProtocolSupport::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void ProtocolSupport::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtocolSupport::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.port_.Mutable( GetArenaForAllocation());
}
inline std::string* ProtocolSupport::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:server.v1.ProtocolSupport.port)
  return _impl_.port_.Release();
}
inline void ProtocolSupport::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:server.v1.ProtocolSupport.port)
}

// -------------------------------------------------------------------

// HTTPVersion

// int32 major = 1 [json_name = "major"];
inline void HTTPVersion::clear_major() {
  _impl_.major_ = 0;
}
inline ::int32_t HTTPVersion::major() const {
  // @@protoc_insertion_point(field_get:server.v1.HTTPVersion.major)
  return _internal_major();
}
inline void HTTPVersion::set_major(::int32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:server.v1.HTTPVersion.major)
}
inline ::int32_t HTTPVersion::_internal_major() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.major_;
}
inline void HTTPVersion::_internal_set_major(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.major_ = value;
}

// int32 minor = 2 [json_name = "minor"];
inline void HTTPVersion::clear_minor() {
  _impl_.minor_ = 0;
}
inline ::int32_t HTTPVersion::minor() const {
  // @@protoc_insertion_point(field_get:server.v1.HTTPVersion.minor)
  return _internal_minor();
}
inline void HTTPVersion::set_minor(::int32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:server.v1.HTTPVersion.minor)
}
inline ::int32_t HTTPVersion::_internal_minor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minor_;
}
inline void HTTPVersion::_internal_set_minor(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minor_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace server


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::server::v1::Protocol> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::server::v1::Protocol>() {
  return ::server::v1::Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_server_2fv1_2fserver_2eproto_2epb_2eh
