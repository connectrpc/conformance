// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview gRPC-Web generated client stub for connectrpc.conformance.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: connectrpc/conformance/v1/service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as connectrpc_conformance_v1_service_pb from '../../../connectrpc/conformance/v1/service_pb'; // proto import: "connectrpc/conformance/v1/service.proto"


export class ConformanceServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorUnary = new grpcWeb.MethodDescriptor(
    '/connectrpc.conformance.v1.ConformanceService/Unary',
    grpcWeb.MethodType.UNARY,
    connectrpc_conformance_v1_service_pb.UnaryRequest,
    connectrpc_conformance_v1_service_pb.UnaryResponse,
    (request: connectrpc_conformance_v1_service_pb.UnaryRequest) => {
      return request.serializeBinary();
    },
    connectrpc_conformance_v1_service_pb.UnaryResponse.deserializeBinary
  );

  unary(
    request: connectrpc_conformance_v1_service_pb.UnaryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<connectrpc_conformance_v1_service_pb.UnaryResponse>;

  unary(
    request: connectrpc_conformance_v1_service_pb.UnaryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.UnaryResponse) => void): grpcWeb.ClientReadableStream<connectrpc_conformance_v1_service_pb.UnaryResponse>;

  unary(
    request: connectrpc_conformance_v1_service_pb.UnaryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.UnaryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/connectrpc.conformance.v1.ConformanceService/Unary',
        request,
        metadata || {},
        this.methodDescriptorUnary,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/connectrpc.conformance.v1.ConformanceService/Unary',
    request,
    metadata || {},
    this.methodDescriptorUnary);
  }

  methodDescriptorServerStream = new grpcWeb.MethodDescriptor(
    '/connectrpc.conformance.v1.ConformanceService/ServerStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    connectrpc_conformance_v1_service_pb.ServerStreamRequest,
    connectrpc_conformance_v1_service_pb.ServerStreamResponse,
    (request: connectrpc_conformance_v1_service_pb.ServerStreamRequest) => {
      return request.serializeBinary();
    },
    connectrpc_conformance_v1_service_pb.ServerStreamResponse.deserializeBinary
  );

  serverStream(
    request: connectrpc_conformance_v1_service_pb.ServerStreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<connectrpc_conformance_v1_service_pb.ServerStreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/connectrpc.conformance.v1.ConformanceService/ServerStream',
      request,
      metadata || {},
      this.methodDescriptorServerStream);
  }

  methodDescriptorUnimplemented = new grpcWeb.MethodDescriptor(
    '/connectrpc.conformance.v1.ConformanceService/Unimplemented',
    grpcWeb.MethodType.UNARY,
    connectrpc_conformance_v1_service_pb.UnimplementedRequest,
    connectrpc_conformance_v1_service_pb.UnimplementedResponse,
    (request: connectrpc_conformance_v1_service_pb.UnimplementedRequest) => {
      return request.serializeBinary();
    },
    connectrpc_conformance_v1_service_pb.UnimplementedResponse.deserializeBinary
  );

  unimplemented(
    request: connectrpc_conformance_v1_service_pb.UnimplementedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<connectrpc_conformance_v1_service_pb.UnimplementedResponse>;

  unimplemented(
    request: connectrpc_conformance_v1_service_pb.UnimplementedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.UnimplementedResponse) => void): grpcWeb.ClientReadableStream<connectrpc_conformance_v1_service_pb.UnimplementedResponse>;

  unimplemented(
    request: connectrpc_conformance_v1_service_pb.UnimplementedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.UnimplementedResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/connectrpc.conformance.v1.ConformanceService/Unimplemented',
        request,
        metadata || {},
        this.methodDescriptorUnimplemented,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/connectrpc.conformance.v1.ConformanceService/Unimplemented',
    request,
    metadata || {},
    this.methodDescriptorUnimplemented);
  }

  methodDescriptorIdempotentUnary = new grpcWeb.MethodDescriptor(
    '/connectrpc.conformance.v1.ConformanceService/IdempotentUnary',
    grpcWeb.MethodType.UNARY,
    connectrpc_conformance_v1_service_pb.IdempotentUnaryRequest,
    connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse,
    (request: connectrpc_conformance_v1_service_pb.IdempotentUnaryRequest) => {
      return request.serializeBinary();
    },
    connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse.deserializeBinary
  );

  idempotentUnary(
    request: connectrpc_conformance_v1_service_pb.IdempotentUnaryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse>;

  idempotentUnary(
    request: connectrpc_conformance_v1_service_pb.IdempotentUnaryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse) => void): grpcWeb.ClientReadableStream<connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse>;

  idempotentUnary(
    request: connectrpc_conformance_v1_service_pb.IdempotentUnaryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: connectrpc_conformance_v1_service_pb.IdempotentUnaryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/connectrpc.conformance.v1.ConformanceService/IdempotentUnary',
        request,
        metadata || {},
        this.methodDescriptorIdempotentUnary,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/connectrpc.conformance.v1.ConformanceService/IdempotentUnary',
    request,
    metadata || {},
    this.methodDescriptorIdempotentUnary);
  }

}

