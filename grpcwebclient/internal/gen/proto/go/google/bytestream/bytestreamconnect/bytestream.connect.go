// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: google/bytestream/bytestream.proto

package bytestreamconnect

import (
	bytestream "connectrpc.com/conformance/internal/gen/proto/go/google/bytestream"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ByteStreamName is the fully-qualified name of the ByteStream service.
	ByteStreamName = "google.bytestream.ByteStream"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ByteStreamReadProcedure is the fully-qualified name of the ByteStream's Read RPC.
	ByteStreamReadProcedure = "/google.bytestream.ByteStream/Read"
	// ByteStreamWriteProcedure is the fully-qualified name of the ByteStream's Write RPC.
	ByteStreamWriteProcedure = "/google.bytestream.ByteStream/Write"
	// ByteStreamQueryWriteStatusProcedure is the fully-qualified name of the ByteStream's
	// QueryWriteStatus RPC.
	ByteStreamQueryWriteStatusProcedure = "/google.bytestream.ByteStream/QueryWriteStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	byteStreamServiceDescriptor                = bytestream.File_google_bytestream_bytestream_proto.Services().ByName("ByteStream")
	byteStreamReadMethodDescriptor             = byteStreamServiceDescriptor.Methods().ByName("Read")
	byteStreamWriteMethodDescriptor            = byteStreamServiceDescriptor.Methods().ByName("Write")
	byteStreamQueryWriteStatusMethodDescriptor = byteStreamServiceDescriptor.Methods().ByName("QueryWriteStatus")
)

// ByteStreamClient is a client for the google.bytestream.ByteStream service.
type ByteStreamClient interface {
	// `Read()` is used to retrieve the contents of a resource as a sequence
	// of bytes. The bytes are returned in a sequence of responses, and the
	// responses are delivered as the results of a server-side streaming RPC.
	Read(context.Context, *connect.Request[bytestream.ReadRequest]) (*connect.ServerStreamForClient[bytestream.ReadResponse], error)
	// `Write()` is used to send the contents of a resource as a sequence of
	// bytes. The bytes are sent in a sequence of request protos of a client-side
	// streaming RPC.
	//
	// A `Write()` action is resumable. If there is an error or the connection is
	// broken during the `Write()`, the client should check the status of the
	// `Write()` by calling `QueryWriteStatus()` and continue writing from the
	// returned `committed_size`. This may be less than the amount of data the
	// client previously sent.
	//
	// Calling `Write()` on a resource name that was previously written and
	// finalized could cause an error, depending on whether the underlying service
	// allows over-writing of previously written resources.
	//
	// When the client closes the request channel, the service will respond with
	// a `WriteResponse`. The service will not view the resource as `complete`
	// until the client has sent a `WriteRequest` with `finish_write` set to
	// `true`. Sending any requests on a stream after sending a request with
	// `finish_write` set to `true` will cause an error. The client **should**
	// check the `WriteResponse` it receives to determine how much data the
	// service was able to commit and whether the service views the resource as
	// `complete` or not.
	Write(context.Context) *connect.ClientStreamForClient[bytestream.WriteRequest, bytestream.WriteResponse]
	// `QueryWriteStatus()` is used to find the `committed_size` for a resource
	// that is being written, which can then be used as the `write_offset` for
	// the next `Write()` call.
	//
	// If the resource does not exist (i.e., the resource has been deleted, or the
	// first `Write()` has not yet reached the service), this method returns the
	// error `NOT_FOUND`.
	//
	// The client **may** call `QueryWriteStatus()` at any time to determine how
	// much data has been processed for this resource. This is useful if the
	// client is buffering data and needs to know which data can be safely
	// evicted. For any sequence of `QueryWriteStatus()` calls for a given
	// resource name, the sequence of returned `committed_size` values will be
	// non-decreasing.
	QueryWriteStatus(context.Context, *connect.Request[bytestream.QueryWriteStatusRequest]) (*connect.Response[bytestream.QueryWriteStatusResponse], error)
}

// NewByteStreamClient constructs a client for the google.bytestream.ByteStream service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewByteStreamClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ByteStreamClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &byteStreamClient{
		read: connect.NewClient[bytestream.ReadRequest, bytestream.ReadResponse](
			httpClient,
			baseURL+ByteStreamReadProcedure,
			connect.WithSchema(byteStreamReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		write: connect.NewClient[bytestream.WriteRequest, bytestream.WriteResponse](
			httpClient,
			baseURL+ByteStreamWriteProcedure,
			connect.WithSchema(byteStreamWriteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryWriteStatus: connect.NewClient[bytestream.QueryWriteStatusRequest, bytestream.QueryWriteStatusResponse](
			httpClient,
			baseURL+ByteStreamQueryWriteStatusProcedure,
			connect.WithSchema(byteStreamQueryWriteStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// byteStreamClient implements ByteStreamClient.
type byteStreamClient struct {
	read             *connect.Client[bytestream.ReadRequest, bytestream.ReadResponse]
	write            *connect.Client[bytestream.WriteRequest, bytestream.WriteResponse]
	queryWriteStatus *connect.Client[bytestream.QueryWriteStatusRequest, bytestream.QueryWriteStatusResponse]
}

// Read calls google.bytestream.ByteStream.Read.
func (c *byteStreamClient) Read(ctx context.Context, req *connect.Request[bytestream.ReadRequest]) (*connect.ServerStreamForClient[bytestream.ReadResponse], error) {
	return c.read.CallServerStream(ctx, req)
}

// Write calls google.bytestream.ByteStream.Write.
func (c *byteStreamClient) Write(ctx context.Context) *connect.ClientStreamForClient[bytestream.WriteRequest, bytestream.WriteResponse] {
	return c.write.CallClientStream(ctx)
}

// QueryWriteStatus calls google.bytestream.ByteStream.QueryWriteStatus.
func (c *byteStreamClient) QueryWriteStatus(ctx context.Context, req *connect.Request[bytestream.QueryWriteStatusRequest]) (*connect.Response[bytestream.QueryWriteStatusResponse], error) {
	return c.queryWriteStatus.CallUnary(ctx, req)
}

// ByteStreamHandler is an implementation of the google.bytestream.ByteStream service.
type ByteStreamHandler interface {
	// `Read()` is used to retrieve the contents of a resource as a sequence
	// of bytes. The bytes are returned in a sequence of responses, and the
	// responses are delivered as the results of a server-side streaming RPC.
	Read(context.Context, *connect.Request[bytestream.ReadRequest], *connect.ServerStream[bytestream.ReadResponse]) error
	// `Write()` is used to send the contents of a resource as a sequence of
	// bytes. The bytes are sent in a sequence of request protos of a client-side
	// streaming RPC.
	//
	// A `Write()` action is resumable. If there is an error or the connection is
	// broken during the `Write()`, the client should check the status of the
	// `Write()` by calling `QueryWriteStatus()` and continue writing from the
	// returned `committed_size`. This may be less than the amount of data the
	// client previously sent.
	//
	// Calling `Write()` on a resource name that was previously written and
	// finalized could cause an error, depending on whether the underlying service
	// allows over-writing of previously written resources.
	//
	// When the client closes the request channel, the service will respond with
	// a `WriteResponse`. The service will not view the resource as `complete`
	// until the client has sent a `WriteRequest` with `finish_write` set to
	// `true`. Sending any requests on a stream after sending a request with
	// `finish_write` set to `true` will cause an error. The client **should**
	// check the `WriteResponse` it receives to determine how much data the
	// service was able to commit and whether the service views the resource as
	// `complete` or not.
	Write(context.Context, *connect.ClientStream[bytestream.WriteRequest]) (*connect.Response[bytestream.WriteResponse], error)
	// `QueryWriteStatus()` is used to find the `committed_size` for a resource
	// that is being written, which can then be used as the `write_offset` for
	// the next `Write()` call.
	//
	// If the resource does not exist (i.e., the resource has been deleted, or the
	// first `Write()` has not yet reached the service), this method returns the
	// error `NOT_FOUND`.
	//
	// The client **may** call `QueryWriteStatus()` at any time to determine how
	// much data has been processed for this resource. This is useful if the
	// client is buffering data and needs to know which data can be safely
	// evicted. For any sequence of `QueryWriteStatus()` calls for a given
	// resource name, the sequence of returned `committed_size` values will be
	// non-decreasing.
	QueryWriteStatus(context.Context, *connect.Request[bytestream.QueryWriteStatusRequest]) (*connect.Response[bytestream.QueryWriteStatusResponse], error)
}

// NewByteStreamHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewByteStreamHandler(svc ByteStreamHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	byteStreamReadHandler := connect.NewServerStreamHandler(
		ByteStreamReadProcedure,
		svc.Read,
		connect.WithSchema(byteStreamReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	byteStreamWriteHandler := connect.NewClientStreamHandler(
		ByteStreamWriteProcedure,
		svc.Write,
		connect.WithSchema(byteStreamWriteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	byteStreamQueryWriteStatusHandler := connect.NewUnaryHandler(
		ByteStreamQueryWriteStatusProcedure,
		svc.QueryWriteStatus,
		connect.WithSchema(byteStreamQueryWriteStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/google.bytestream.ByteStream/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ByteStreamReadProcedure:
			byteStreamReadHandler.ServeHTTP(w, r)
		case ByteStreamWriteProcedure:
			byteStreamWriteHandler.ServeHTTP(w, r)
		case ByteStreamQueryWriteStatusProcedure:
			byteStreamQueryWriteStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedByteStreamHandler returns CodeUnimplemented from all methods.
type UnimplementedByteStreamHandler struct{}

func (UnimplementedByteStreamHandler) Read(context.Context, *connect.Request[bytestream.ReadRequest], *connect.ServerStream[bytestream.ReadResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("google.bytestream.ByteStream.Read is not implemented"))
}

func (UnimplementedByteStreamHandler) Write(context.Context, *connect.ClientStream[bytestream.WriteRequest]) (*connect.Response[bytestream.WriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.bytestream.ByteStream.Write is not implemented"))
}

func (UnimplementedByteStreamHandler) QueryWriteStatus(context.Context, *connect.Request[bytestream.QueryWriteStatusRequest]) (*connect.Response[bytestream.QueryWriteStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.bytestream.ByteStream.QueryWriteStatus is not implemented"))
}
