// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: google/longrunning/operations.proto

package longrunningconnect

import (
	longrunning "connectrpc.com/conformance/internal/gen/proto/go/google/longrunning"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OperationsName is the fully-qualified name of the Operations service.
	OperationsName = "google.longrunning.Operations"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OperationsListOperationsProcedure is the fully-qualified name of the Operations's ListOperations
	// RPC.
	OperationsListOperationsProcedure = "/google.longrunning.Operations/ListOperations"
	// OperationsGetOperationProcedure is the fully-qualified name of the Operations's GetOperation RPC.
	OperationsGetOperationProcedure = "/google.longrunning.Operations/GetOperation"
	// OperationsDeleteOperationProcedure is the fully-qualified name of the Operations's
	// DeleteOperation RPC.
	OperationsDeleteOperationProcedure = "/google.longrunning.Operations/DeleteOperation"
	// OperationsCancelOperationProcedure is the fully-qualified name of the Operations's
	// CancelOperation RPC.
	OperationsCancelOperationProcedure = "/google.longrunning.Operations/CancelOperation"
	// OperationsWaitOperationProcedure is the fully-qualified name of the Operations's WaitOperation
	// RPC.
	OperationsWaitOperationProcedure = "/google.longrunning.Operations/WaitOperation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	operationsServiceDescriptor               = longrunning.File_google_longrunning_operations_proto.Services().ByName("Operations")
	operationsListOperationsMethodDescriptor  = operationsServiceDescriptor.Methods().ByName("ListOperations")
	operationsGetOperationMethodDescriptor    = operationsServiceDescriptor.Methods().ByName("GetOperation")
	operationsDeleteOperationMethodDescriptor = operationsServiceDescriptor.Methods().ByName("DeleteOperation")
	operationsCancelOperationMethodDescriptor = operationsServiceDescriptor.Methods().ByName("CancelOperation")
	operationsWaitOperationMethodDescriptor   = operationsServiceDescriptor.Methods().ByName("WaitOperation")
)

// OperationsClient is a client for the google.longrunning.Operations service.
type OperationsClient interface {
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// NOTE: the `name` binding allows API services to override the binding
	// to use different resource name schemes, such as `users/*/operations`. To
	// override the binding, API services can add a binding such as
	// `"/v1/{name=users/*}/operations"` to their service configuration.
	// For backwards compatibility, the default name includes the operations
	// collection id, however overriding users must ensure the name binding
	// is the parent resource, without the operations collection id.
	ListOperations(context.Context, *connect.Request[longrunning.ListOperationsRequest]) (*connect.Response[longrunning.ListOperationsResponse], error)
	// Gets the latest state of a long-running operation.  Clients can use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *connect.Request[longrunning.GetOperationRequest]) (*connect.Response[longrunning.Operation], error)
	// Deletes a long-running operation. This method indicates that the client is
	// no longer interested in the operation result. It does not cancel the
	// operation. If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	DeleteOperation(context.Context, *connect.Request[longrunning.DeleteOperationRequest]) (*connect.Response[emptypb.Empty], error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
	// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
	// other methods to check whether the cancellation succeeded or whether the
	// operation completed despite cancellation. On successful cancellation,
	// the operation is not deleted; instead, it becomes an operation with
	// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	CancelOperation(context.Context, *connect.Request[longrunning.CancelOperationRequest]) (*connect.Response[emptypb.Empty], error)
	// Waits until the specified long-running operation is done or reaches at most
	// a specified timeout, returning the latest state.  If the operation is
	// already done, the latest state is immediately returned.  If the timeout
	// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
	// timeout is used.  If the server does not support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	// Note that this method is on a best-effort basis.  It may return the latest
	// state before the specified timeout (including immediately), meaning even an
	// immediate response is no guarantee that the operation is done.
	WaitOperation(context.Context, *connect.Request[longrunning.WaitOperationRequest]) (*connect.Response[longrunning.Operation], error)
}

// NewOperationsClient constructs a client for the google.longrunning.Operations service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperationsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OperationsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operationsClient{
		listOperations: connect.NewClient[longrunning.ListOperationsRequest, longrunning.ListOperationsResponse](
			httpClient,
			baseURL+OperationsListOperationsProcedure,
			connect.WithSchema(operationsListOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOperation: connect.NewClient[longrunning.GetOperationRequest, longrunning.Operation](
			httpClient,
			baseURL+OperationsGetOperationProcedure,
			connect.WithSchema(operationsGetOperationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOperation: connect.NewClient[longrunning.DeleteOperationRequest, emptypb.Empty](
			httpClient,
			baseURL+OperationsDeleteOperationProcedure,
			connect.WithSchema(operationsDeleteOperationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelOperation: connect.NewClient[longrunning.CancelOperationRequest, emptypb.Empty](
			httpClient,
			baseURL+OperationsCancelOperationProcedure,
			connect.WithSchema(operationsCancelOperationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		waitOperation: connect.NewClient[longrunning.WaitOperationRequest, longrunning.Operation](
			httpClient,
			baseURL+OperationsWaitOperationProcedure,
			connect.WithSchema(operationsWaitOperationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// operationsClient implements OperationsClient.
type operationsClient struct {
	listOperations  *connect.Client[longrunning.ListOperationsRequest, longrunning.ListOperationsResponse]
	getOperation    *connect.Client[longrunning.GetOperationRequest, longrunning.Operation]
	deleteOperation *connect.Client[longrunning.DeleteOperationRequest, emptypb.Empty]
	cancelOperation *connect.Client[longrunning.CancelOperationRequest, emptypb.Empty]
	waitOperation   *connect.Client[longrunning.WaitOperationRequest, longrunning.Operation]
}

// ListOperations calls google.longrunning.Operations.ListOperations.
func (c *operationsClient) ListOperations(ctx context.Context, req *connect.Request[longrunning.ListOperationsRequest]) (*connect.Response[longrunning.ListOperationsResponse], error) {
	return c.listOperations.CallUnary(ctx, req)
}

// GetOperation calls google.longrunning.Operations.GetOperation.
func (c *operationsClient) GetOperation(ctx context.Context, req *connect.Request[longrunning.GetOperationRequest]) (*connect.Response[longrunning.Operation], error) {
	return c.getOperation.CallUnary(ctx, req)
}

// DeleteOperation calls google.longrunning.Operations.DeleteOperation.
func (c *operationsClient) DeleteOperation(ctx context.Context, req *connect.Request[longrunning.DeleteOperationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOperation.CallUnary(ctx, req)
}

// CancelOperation calls google.longrunning.Operations.CancelOperation.
func (c *operationsClient) CancelOperation(ctx context.Context, req *connect.Request[longrunning.CancelOperationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelOperation.CallUnary(ctx, req)
}

// WaitOperation calls google.longrunning.Operations.WaitOperation.
func (c *operationsClient) WaitOperation(ctx context.Context, req *connect.Request[longrunning.WaitOperationRequest]) (*connect.Response[longrunning.Operation], error) {
	return c.waitOperation.CallUnary(ctx, req)
}

// OperationsHandler is an implementation of the google.longrunning.Operations service.
type OperationsHandler interface {
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// NOTE: the `name` binding allows API services to override the binding
	// to use different resource name schemes, such as `users/*/operations`. To
	// override the binding, API services can add a binding such as
	// `"/v1/{name=users/*}/operations"` to their service configuration.
	// For backwards compatibility, the default name includes the operations
	// collection id, however overriding users must ensure the name binding
	// is the parent resource, without the operations collection id.
	ListOperations(context.Context, *connect.Request[longrunning.ListOperationsRequest]) (*connect.Response[longrunning.ListOperationsResponse], error)
	// Gets the latest state of a long-running operation.  Clients can use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *connect.Request[longrunning.GetOperationRequest]) (*connect.Response[longrunning.Operation], error)
	// Deletes a long-running operation. This method indicates that the client is
	// no longer interested in the operation result. It does not cancel the
	// operation. If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	DeleteOperation(context.Context, *connect.Request[longrunning.DeleteOperationRequest]) (*connect.Response[emptypb.Empty], error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
	// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
	// other methods to check whether the cancellation succeeded or whether the
	// operation completed despite cancellation. On successful cancellation,
	// the operation is not deleted; instead, it becomes an operation with
	// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	CancelOperation(context.Context, *connect.Request[longrunning.CancelOperationRequest]) (*connect.Response[emptypb.Empty], error)
	// Waits until the specified long-running operation is done or reaches at most
	// a specified timeout, returning the latest state.  If the operation is
	// already done, the latest state is immediately returned.  If the timeout
	// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
	// timeout is used.  If the server does not support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	// Note that this method is on a best-effort basis.  It may return the latest
	// state before the specified timeout (including immediately), meaning even an
	// immediate response is no guarantee that the operation is done.
	WaitOperation(context.Context, *connect.Request[longrunning.WaitOperationRequest]) (*connect.Response[longrunning.Operation], error)
}

// NewOperationsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperationsHandler(svc OperationsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	operationsListOperationsHandler := connect.NewUnaryHandler(
		OperationsListOperationsProcedure,
		svc.ListOperations,
		connect.WithSchema(operationsListOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	operationsGetOperationHandler := connect.NewUnaryHandler(
		OperationsGetOperationProcedure,
		svc.GetOperation,
		connect.WithSchema(operationsGetOperationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	operationsDeleteOperationHandler := connect.NewUnaryHandler(
		OperationsDeleteOperationProcedure,
		svc.DeleteOperation,
		connect.WithSchema(operationsDeleteOperationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	operationsCancelOperationHandler := connect.NewUnaryHandler(
		OperationsCancelOperationProcedure,
		svc.CancelOperation,
		connect.WithSchema(operationsCancelOperationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	operationsWaitOperationHandler := connect.NewUnaryHandler(
		OperationsWaitOperationProcedure,
		svc.WaitOperation,
		connect.WithSchema(operationsWaitOperationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/google.longrunning.Operations/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OperationsListOperationsProcedure:
			operationsListOperationsHandler.ServeHTTP(w, r)
		case OperationsGetOperationProcedure:
			operationsGetOperationHandler.ServeHTTP(w, r)
		case OperationsDeleteOperationProcedure:
			operationsDeleteOperationHandler.ServeHTTP(w, r)
		case OperationsCancelOperationProcedure:
			operationsCancelOperationHandler.ServeHTTP(w, r)
		case OperationsWaitOperationProcedure:
			operationsWaitOperationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOperationsHandler returns CodeUnimplemented from all methods.
type UnimplementedOperationsHandler struct{}

func (UnimplementedOperationsHandler) ListOperations(context.Context, *connect.Request[longrunning.ListOperationsRequest]) (*connect.Response[longrunning.ListOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.longrunning.Operations.ListOperations is not implemented"))
}

func (UnimplementedOperationsHandler) GetOperation(context.Context, *connect.Request[longrunning.GetOperationRequest]) (*connect.Response[longrunning.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.longrunning.Operations.GetOperation is not implemented"))
}

func (UnimplementedOperationsHandler) DeleteOperation(context.Context, *connect.Request[longrunning.DeleteOperationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.longrunning.Operations.DeleteOperation is not implemented"))
}

func (UnimplementedOperationsHandler) CancelOperation(context.Context, *connect.Request[longrunning.CancelOperationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.longrunning.Operations.CancelOperation is not implemented"))
}

func (UnimplementedOperationsHandler) WaitOperation(context.Context, *connect.Request[longrunning.WaitOperationRequest]) (*connect.Response[longrunning.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("google.longrunning.Operations.WaitOperation is not implemented"))
}
