name: Idempotency JSON
relevantProtocols:
  - PROTOCOL_CONNECT
relevantCompressions:
  # TODO - Clients only use compression for GET requests if the request is
  # larger than a particular size. So since we aren't sending a request here
  # that exceeds that, our requests won't use compression even if we specify
  # it. So, we're limiting this test to identity
  - COMPRESSION_IDENTITY
relevantCodecs:
  - CODEC_JSON
testCases:
- request:
    testName: idempotent unary success json
    service: connectrpc.conformance.v1.ConformanceService
    method: IdempotentUnary
    streamType: STREAM_TYPE_UNARY
    useGetHttpMethod: true
    # TODO - This exposes a gap in how we build our expectations. This codec
    # value is actually populated by the runner when the tests are expanded
    # based on suite info. But, that population is done _after_ the expectations
    # are built so when building an expectation we have no idea what codec was/will be
    # used so we can't base any expectations on it. Unfortunately, GET requests
    # use the codec to marshal the request into query params, so we need to know
    # what codec was used to properly set what we expect in the ConnectGetInfo
    # To get around this, we use this hack. We limit the test to CODEC_JSON above
    # in the relevantCodecs and then specify it here. So we know this test will
    # only ever be run with a JSON codec and that the runner will set JSON in this
    # value. But, we're setting it ahead of time manually so that the expectation can be
    # properly built. The runner will eventually set this value, but it will just
    # overwrite this with CODEC_JSON again. Gross.
    # See idempotency_proto.yaml for the exact same approach just with CODEC_PROTO
    codec: CODEC_JSON
    requestHeaders:
    - name: X-Conformance-Test
      value: ["Value1","Value2"]
    requestMessages:
    - "@type": type.googleapis.com/connectrpc.conformance.v1.IdempotentUnaryRequest
      responseDefinition:
        responseHeaders:
        - name: x-custom-header
          value: ["foo","bar","baz"]
        responseData: "dGVzdCByZXNwb25zZQ=="
        responseTrailers:
        - name: x-custom-trailer
          value: ["bing","quux"]
