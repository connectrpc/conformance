// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connectrpc/conformance/v1alpha1/service.proto

package conformancev1alpha1connect

import (
	v1alpha1 "connectrpc.com/conformance/internal/gen/proto/go/connectrpc/conformance/v1alpha1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ConformanceServiceName is the fully-qualified name of the ConformanceService service.
	ConformanceServiceName = "connectrpc.conformance.v1alpha1.ConformanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConformanceServiceUnaryProcedure is the fully-qualified name of the ConformanceService's Unary
	// RPC.
	ConformanceServiceUnaryProcedure = "/connectrpc.conformance.v1alpha1.ConformanceService/Unary"
	// ConformanceServiceServerStreamProcedure is the fully-qualified name of the ConformanceService's
	// ServerStream RPC.
	ConformanceServiceServerStreamProcedure = "/connectrpc.conformance.v1alpha1.ConformanceService/ServerStream"
	// ConformanceServiceClientStreamProcedure is the fully-qualified name of the ConformanceService's
	// ClientStream RPC.
	ConformanceServiceClientStreamProcedure = "/connectrpc.conformance.v1alpha1.ConformanceService/ClientStream"
	// ConformanceServiceBidiStreamProcedure is the fully-qualified name of the ConformanceService's
	// BidiStream RPC.
	ConformanceServiceBidiStreamProcedure = "/connectrpc.conformance.v1alpha1.ConformanceService/BidiStream"
)

// ConformanceServiceClient is a client for the connectrpc.conformance.v1alpha1.ConformanceService
// service.
type ConformanceServiceClient interface {
	// A unary operation. The request indicates the response headers and trailers
	// and also indicates either a response message or an error to send back.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties in the ConformancePayload and then include the message
	// data in the data field.
	Unary(context.Context, *connect.Request[v1alpha1.UnaryRequest]) (*connect.Response[v1alpha1.ConformancePayload], error)
	// A server-streaming operation. The request indicates the response headers,
	// response messages, trailers, and an optional error to send back. The
	// response data should be sent in the order indicated, and the server should
	// wait between sending response messages as indicated.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties in the first ConformancePayload, and then include the
	// message data in the data field. Subsequent messages after the first one
	// should contain only the data field.
	ServerStream(context.Context, *connect.Request[v1alpha1.ServerStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.ConformancePayload], error)
	// A client-streaming operation. The first request indicates the response
	// headers and trailers and also indicates either a response message or an
	// error to send back.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties, including all request messages in the order they were
	// received, in the ConformancePayload and then include the message data in
	// the data field.
	//
	// If the input stream is empty, the server's response will include no data,
	// only the request properties (headers, timeout).
	ClientStream(context.Context) *connect.ClientStreamForClient[v1alpha1.ClientStreamRequest, v1alpha1.ConformancePayload]
	// A bidirectional-streaming operation. The first request indicates the response
	// headers, response messages, trailers, and an optional error to send back.
	// The response data should be sent in the order indicated, and the server
	// should wait between sending response messages as indicated. If the
	// wait_for_each request field is true, the handler should read one request
	// and then send back one response, and then alternate, reading another
	// request and then sending back another response, etc. If the wait duration
	// is specified, the server should wait that long in between sending each
	// response message. If both are specified, the server should wait the given
	// duration after reading the request before sending the corresponding
	// response.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties, including all request messages *so far*, in the order
	// they were received, in the ConformancePayload and then include the message
	// data in the data field. The request headers and timeout only need to be
	// included in the very first response message.
	//
	// If the input stream is empty, the server should send a single response
	// message that includes no data and only the request properties (headers,
	// timeout).
	BidiStream(context.Context) *connect.BidiStreamForClient[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload]
}

// NewConformanceServiceClient constructs a client for the
// connectrpc.conformance.v1alpha1.ConformanceService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConformanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConformanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &conformanceServiceClient{
		unary: connect.NewClient[v1alpha1.UnaryRequest, v1alpha1.ConformancePayload](
			httpClient,
			baseURL+ConformanceServiceUnaryProcedure,
			opts...,
		),
		serverStream: connect.NewClient[v1alpha1.ServerStreamRequest, v1alpha1.ConformancePayload](
			httpClient,
			baseURL+ConformanceServiceServerStreamProcedure,
			opts...,
		),
		clientStream: connect.NewClient[v1alpha1.ClientStreamRequest, v1alpha1.ConformancePayload](
			httpClient,
			baseURL+ConformanceServiceClientStreamProcedure,
			opts...,
		),
		bidiStream: connect.NewClient[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload](
			httpClient,
			baseURL+ConformanceServiceBidiStreamProcedure,
			opts...,
		),
	}
}

// conformanceServiceClient implements ConformanceServiceClient.
type conformanceServiceClient struct {
	unary        *connect.Client[v1alpha1.UnaryRequest, v1alpha1.ConformancePayload]
	serverStream *connect.Client[v1alpha1.ServerStreamRequest, v1alpha1.ConformancePayload]
	clientStream *connect.Client[v1alpha1.ClientStreamRequest, v1alpha1.ConformancePayload]
	bidiStream   *connect.Client[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload]
}

// Unary calls connectrpc.conformance.v1alpha1.ConformanceService.Unary.
func (c *conformanceServiceClient) Unary(ctx context.Context, req *connect.Request[v1alpha1.UnaryRequest]) (*connect.Response[v1alpha1.ConformancePayload], error) {
	return c.unary.CallUnary(ctx, req)
}

// ServerStream calls connectrpc.conformance.v1alpha1.ConformanceService.ServerStream.
func (c *conformanceServiceClient) ServerStream(ctx context.Context, req *connect.Request[v1alpha1.ServerStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.ConformancePayload], error) {
	return c.serverStream.CallServerStream(ctx, req)
}

// ClientStream calls connectrpc.conformance.v1alpha1.ConformanceService.ClientStream.
func (c *conformanceServiceClient) ClientStream(ctx context.Context) *connect.ClientStreamForClient[v1alpha1.ClientStreamRequest, v1alpha1.ConformancePayload] {
	return c.clientStream.CallClientStream(ctx)
}

// BidiStream calls connectrpc.conformance.v1alpha1.ConformanceService.BidiStream.
func (c *conformanceServiceClient) BidiStream(ctx context.Context) *connect.BidiStreamForClient[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload] {
	return c.bidiStream.CallBidiStream(ctx)
}

// ConformanceServiceHandler is an implementation of the
// connectrpc.conformance.v1alpha1.ConformanceService service.
type ConformanceServiceHandler interface {
	// A unary operation. The request indicates the response headers and trailers
	// and also indicates either a response message or an error to send back.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties in the ConformancePayload and then include the message
	// data in the data field.
	Unary(context.Context, *connect.Request[v1alpha1.UnaryRequest]) (*connect.Response[v1alpha1.ConformancePayload], error)
	// A server-streaming operation. The request indicates the response headers,
	// response messages, trailers, and an optional error to send back. The
	// response data should be sent in the order indicated, and the server should
	// wait between sending response messages as indicated.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties in the first ConformancePayload, and then include the
	// message data in the data field. Subsequent messages after the first one
	// should contain only the data field.
	ServerStream(context.Context, *connect.Request[v1alpha1.ServerStreamRequest], *connect.ServerStream[v1alpha1.ConformancePayload]) error
	// A client-streaming operation. The first request indicates the response
	// headers and trailers and also indicates either a response message or an
	// error to send back.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties, including all request messages in the order they were
	// received, in the ConformancePayload and then include the message data in
	// the data field.
	//
	// If the input stream is empty, the server's response will include no data,
	// only the request properties (headers, timeout).
	ClientStream(context.Context, *connect.ClientStream[v1alpha1.ClientStreamRequest]) (*connect.Response[v1alpha1.ConformancePayload], error)
	// A bidirectional-streaming operation. The first request indicates the response
	// headers, response messages, trailers, and an optional error to send back.
	// The response data should be sent in the order indicated, and the server
	// should wait between sending response messages as indicated. If the
	// wait_for_each request field is true, the handler should read one request
	// and then send back one response, and then alternate, reading another
	// request and then sending back another response, etc. If the wait duration
	// is specified, the server should wait that long in between sending each
	// response message. If both are specified, the server should wait the given
	// duration after reading the request before sending the corresponding
	// response.
	//
	// Response message data is specified as bytes. The service should echo back
	// request properties, including all request messages *so far*, in the order
	// they were received, in the ConformancePayload and then include the message
	// data in the data field. The request headers and timeout only need to be
	// included in the very first response message.
	//
	// If the input stream is empty, the server should send a single response
	// message that includes no data and only the request properties (headers,
	// timeout).
	BidiStream(context.Context, *connect.BidiStream[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload]) error
}

// NewConformanceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConformanceServiceHandler(svc ConformanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	conformanceServiceUnaryHandler := connect.NewUnaryHandler(
		ConformanceServiceUnaryProcedure,
		svc.Unary,
		opts...,
	)
	conformanceServiceServerStreamHandler := connect.NewServerStreamHandler(
		ConformanceServiceServerStreamProcedure,
		svc.ServerStream,
		opts...,
	)
	conformanceServiceClientStreamHandler := connect.NewClientStreamHandler(
		ConformanceServiceClientStreamProcedure,
		svc.ClientStream,
		opts...,
	)
	conformanceServiceBidiStreamHandler := connect.NewBidiStreamHandler(
		ConformanceServiceBidiStreamProcedure,
		svc.BidiStream,
		opts...,
	)
	return "/connectrpc.conformance.v1alpha1.ConformanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConformanceServiceUnaryProcedure:
			conformanceServiceUnaryHandler.ServeHTTP(w, r)
		case ConformanceServiceServerStreamProcedure:
			conformanceServiceServerStreamHandler.ServeHTTP(w, r)
		case ConformanceServiceClientStreamProcedure:
			conformanceServiceClientStreamHandler.ServeHTTP(w, r)
		case ConformanceServiceBidiStreamProcedure:
			conformanceServiceBidiStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConformanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConformanceServiceHandler struct{}

func (UnimplementedConformanceServiceHandler) Unary(context.Context, *connect.Request[v1alpha1.UnaryRequest]) (*connect.Response[v1alpha1.ConformancePayload], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.conformance.v1alpha1.ConformanceService.Unary is not implemented"))
}

func (UnimplementedConformanceServiceHandler) ServerStream(context.Context, *connect.Request[v1alpha1.ServerStreamRequest], *connect.ServerStream[v1alpha1.ConformancePayload]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.conformance.v1alpha1.ConformanceService.ServerStream is not implemented"))
}

func (UnimplementedConformanceServiceHandler) ClientStream(context.Context, *connect.ClientStream[v1alpha1.ClientStreamRequest]) (*connect.Response[v1alpha1.ConformancePayload], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.conformance.v1alpha1.ConformanceService.ClientStream is not implemented"))
}

func (UnimplementedConformanceServiceHandler) BidiStream(context.Context, *connect.BidiStream[v1alpha1.BidiStreamRequest, v1alpha1.ConformancePayload]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.conformance.v1alpha1.ConformanceService.BidiStream is not implemented"))
}
