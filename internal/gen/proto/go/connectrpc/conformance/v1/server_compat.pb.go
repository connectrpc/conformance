// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: connectrpc/conformance/v1/server_compat.proto

package conformancev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes one configuration for an RPC server. The server is
// expected to expose the connectrpc.conformance.v1.ConformanceService
// RPC service. The configuration does not include a port. The
// process should pick an available port, which is typically
// done by using port zero (0) when creating a network listener
// so that the OS selects an available ephemeral port.
//
// These properties are read from stdin. Once the server is
// listening, details about the server, in the form of a
// ServerCompatResponse, are written to stdout.
//
// Each test process is expected to start only one RPC server.
// When testing multiple configurations, multiple test processes
// will be started, each with different properties.
type ServerCompatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signals to the server that it must support at least this protocol. Note
	// that it is fine to support others.
	// For example if `PROTOCOL_CONNECT` is specified, the server _must_ support
	// at least Connect, but _may_ also support gRPC or gRPC-web.
	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=connectrpc.conformance.v1.Protocol" json:"protocol,omitempty"`
	// Signals to the server the minimum HTTP version to support. As with
	// `protocol`, it is fine to support other versions. For example, if
	// `HTTP_VERSION_2` is specified, the server _must_ support HTTP/2, but _may_ also
	// support HTTP/1.1 or HTTP/3.
	HttpVersion HTTPVersion `protobuf:"varint,2,opt,name=http_version,json=httpVersion,proto3,enum=connectrpc.conformance.v1.HTTPVersion" json:"http_version,omitempty"`
	// If true, generate a certificate that clients will be configured to trust
	// when connecting and return it in the `pem_cert` field of the `ServerCompatResponse`.
	// The certificate can be any TLS certificate where the subject matches the
	// value sent back in the `host` field of the `ServerCompatResponse`.
	// Self-signed certificates (and `localhost` as the subject) are allowed.
	// If false, the server should not use TLS and instead use
	// a plain-text/unencrypted socket.
	UseTls bool `protobuf:"varint,4,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// If non-empty, the clients will use certificates to authenticate
	// themselves. This value is a PEM-encoded cert that should be
	// trusted by the server. When non-empty, the server should require
	// that clients provide certificates and they should validate that
	// the certificate presented is valid.
	//
	// This will always be empty if use_tls is false.
	ClientTlsCert []byte `protobuf:"bytes,5,opt,name=client_tls_cert,json=clientTlsCert,proto3" json:"client_tls_cert,omitempty"`
	// If non-zero, indicates the maximum size in bytes for a message.
	// If the client sends anything larger, the server should reject it.
	MessageReceiveLimit uint32 `protobuf:"varint,6,opt,name=message_receive_limit,json=messageReceiveLimit,proto3" json:"message_receive_limit,omitempty"`
}

func (x *ServerCompatRequest) Reset() {
	*x = ServerCompatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_server_compat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCompatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCompatRequest) ProtoMessage() {}

func (x *ServerCompatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_server_compat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCompatRequest.ProtoReflect.Descriptor instead.
func (*ServerCompatRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_server_compat_proto_rawDescGZIP(), []int{0}
}

func (x *ServerCompatRequest) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_PROTOCOL_UNSPECIFIED
}

func (x *ServerCompatRequest) GetHttpVersion() HTTPVersion {
	if x != nil {
		return x.HttpVersion
	}
	return HTTPVersion_HTTP_VERSION_UNSPECIFIED
}

func (x *ServerCompatRequest) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServerCompatRequest) GetClientTlsCert() []byte {
	if x != nil {
		return x.ClientTlsCert
	}
	return nil
}

func (x *ServerCompatRequest) GetMessageReceiveLimit() uint32 {
	if x != nil {
		return x.MessageReceiveLimit
	}
	return 0
}

// The outcome of one ServerCompatRequest.
type ServerCompatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host where the server is running. This should usually be `127.0.0.1`,
	// unless your program actually starts a remote server to which the client
	// should connect.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The port where the server is listening.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The TLS certificate, in PEM format, if `use_tls` was set
	// to `true`. Clients will verify this certificate when connecting via TLS.
	// If `use_tls` was set to `false`, this should always be empty.
	PemCert []byte `protobuf:"bytes,3,opt,name=pem_cert,json=pemCert,proto3" json:"pem_cert,omitempty"`
}

func (x *ServerCompatResponse) Reset() {
	*x = ServerCompatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_server_compat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCompatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCompatResponse) ProtoMessage() {}

func (x *ServerCompatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_server_compat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCompatResponse.ProtoReflect.Descriptor instead.
func (*ServerCompatResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_server_compat_proto_rawDescGZIP(), []int{1}
}

func (x *ServerCompatResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ServerCompatResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerCompatResponse) GetPemCert() []byte {
	if x != nil {
		return x.PemCert
	}
	return nil
}

var File_connectrpc_conformance_v1_server_compat_proto protoreflect.FileDescriptor

var file_connectrpc_conformance_v1_server_compat_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x42, 0x92, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x19,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x25, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72,
	0x70, 0x63, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_connectrpc_conformance_v1_server_compat_proto_rawDescOnce sync.Once
	file_connectrpc_conformance_v1_server_compat_proto_rawDescData = file_connectrpc_conformance_v1_server_compat_proto_rawDesc
)

func file_connectrpc_conformance_v1_server_compat_proto_rawDescGZIP() []byte {
	file_connectrpc_conformance_v1_server_compat_proto_rawDescOnce.Do(func() {
		file_connectrpc_conformance_v1_server_compat_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectrpc_conformance_v1_server_compat_proto_rawDescData)
	})
	return file_connectrpc_conformance_v1_server_compat_proto_rawDescData
}

var file_connectrpc_conformance_v1_server_compat_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_connectrpc_conformance_v1_server_compat_proto_goTypes = []interface{}{
	(*ServerCompatRequest)(nil),  // 0: connectrpc.conformance.v1.ServerCompatRequest
	(*ServerCompatResponse)(nil), // 1: connectrpc.conformance.v1.ServerCompatResponse
	(Protocol)(0),                // 2: connectrpc.conformance.v1.Protocol
	(HTTPVersion)(0),             // 3: connectrpc.conformance.v1.HTTPVersion
}
var file_connectrpc_conformance_v1_server_compat_proto_depIdxs = []int32{
	2, // 0: connectrpc.conformance.v1.ServerCompatRequest.protocol:type_name -> connectrpc.conformance.v1.Protocol
	3, // 1: connectrpc.conformance.v1.ServerCompatRequest.http_version:type_name -> connectrpc.conformance.v1.HTTPVersion
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_connectrpc_conformance_v1_server_compat_proto_init() }
func file_connectrpc_conformance_v1_server_compat_proto_init() {
	if File_connectrpc_conformance_v1_server_compat_proto != nil {
		return
	}
	file_connectrpc_conformance_v1_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_connectrpc_conformance_v1_server_compat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCompatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_server_compat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCompatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectrpc_conformance_v1_server_compat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectrpc_conformance_v1_server_compat_proto_goTypes,
		DependencyIndexes: file_connectrpc_conformance_v1_server_compat_proto_depIdxs,
		MessageInfos:      file_connectrpc_conformance_v1_server_compat_proto_msgTypes,
	}.Build()
	File_connectrpc_conformance_v1_server_compat_proto = out.File
	file_connectrpc_conformance_v1_server_compat_proto_rawDesc = nil
	file_connectrpc_conformance_v1_server_compat_proto_goTypes = nil
	file_connectrpc_conformance_v1_server_compat_proto_depIdxs = nil
}
