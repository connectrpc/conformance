// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: connectrpc/conformance/v1/service.proto

package conformancev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A definition of a response to be sent from a single-response endpoint.
// Can be used to define a response for unary or client-streaming calls.
type UnaryResponseDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response headers to send
	ResponseHeaders []*Header `protobuf:"bytes,1,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	// Types that are assignable to Response:
	//
	//	*UnaryResponseDefinition_ResponseData
	//	*UnaryResponseDefinition_Error
	Response isUnaryResponseDefinition_Response `protobuf_oneof:"response"`
	// Response trailers to send - together with the error if present
	ResponseTrailers []*Header `protobuf:"bytes,4,rep,name=response_trailers,json=responseTrailers,proto3" json:"response_trailers,omitempty"`
	// This field is only used by the reference server. If you are implementing a
	// server under test, you can ignore this field or respond with an error if the
	// server receives a request where it is set.
	//
	// For test definitions, this field should be used instead of the above fields.
	RawResponse *RawHTTPResponse `protobuf:"bytes,5,opt,name=raw_response,json=rawResponse,proto3" json:"raw_response,omitempty"`
}

func (x *UnaryResponseDefinition) Reset() {
	*x = UnaryResponseDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryResponseDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryResponseDefinition) ProtoMessage() {}

func (x *UnaryResponseDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryResponseDefinition.ProtoReflect.Descriptor instead.
func (*UnaryResponseDefinition) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *UnaryResponseDefinition) GetResponseHeaders() []*Header {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (m *UnaryResponseDefinition) GetResponse() isUnaryResponseDefinition_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UnaryResponseDefinition) GetResponseData() []byte {
	if x, ok := x.GetResponse().(*UnaryResponseDefinition_ResponseData); ok {
		return x.ResponseData
	}
	return nil
}

func (x *UnaryResponseDefinition) GetError() *Error {
	if x, ok := x.GetResponse().(*UnaryResponseDefinition_Error); ok {
		return x.Error
	}
	return nil
}

func (x *UnaryResponseDefinition) GetResponseTrailers() []*Header {
	if x != nil {
		return x.ResponseTrailers
	}
	return nil
}

func (x *UnaryResponseDefinition) GetRawResponse() *RawHTTPResponse {
	if x != nil {
		return x.RawResponse
	}
	return nil
}

type isUnaryResponseDefinition_Response interface {
	isUnaryResponseDefinition_Response()
}

type UnaryResponseDefinition_ResponseData struct {
	// Response data to send
	ResponseData []byte `protobuf:"bytes,2,opt,name=response_data,json=responseData,proto3,oneof"`
}

type UnaryResponseDefinition_Error struct {
	// Error to raise instead of response message
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*UnaryResponseDefinition_ResponseData) isUnaryResponseDefinition_Response() {}

func (*UnaryResponseDefinition_Error) isUnaryResponseDefinition_Response() {}

// A definition of responses to be sent from a streaming endpoint.
// Can be used to define responses for server-streaming or bidi-streaming calls.
type StreamResponseDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response headers to send
	ResponseHeaders []*Header `protobuf:"bytes,1,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	// Response data to send
	ResponseData [][]byte `protobuf:"bytes,2,rep,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	// Wait this many milliseconds before sending each response message
	ResponseDelayMs uint32 `protobuf:"varint,3,opt,name=response_delay_ms,json=responseDelayMs,proto3" json:"response_delay_ms,omitempty"`
	// Optional error to raise, but only after sending the response messages
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Response trailers to send - together with the error if present
	ResponseTrailers []*Header `protobuf:"bytes,5,rep,name=response_trailers,json=responseTrailers,proto3" json:"response_trailers,omitempty"`
	// This field is only used by the reference server. If you are implementing a
	// server under test, you can ignore this field or respond with an error if the
	// server receives a request where it is set.
	//
	// For test definitions, this field should be used instead of the above fields.
	RawResponse *RawHTTPResponse `protobuf:"bytes,6,opt,name=raw_response,json=rawResponse,proto3" json:"raw_response,omitempty"`
}

func (x *StreamResponseDefinition) Reset() {
	*x = StreamResponseDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponseDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponseDefinition) ProtoMessage() {}

func (x *StreamResponseDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponseDefinition.ProtoReflect.Descriptor instead.
func (*StreamResponseDefinition) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *StreamResponseDefinition) GetResponseHeaders() []*Header {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *StreamResponseDefinition) GetResponseData() [][]byte {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *StreamResponseDefinition) GetResponseDelayMs() uint32 {
	if x != nil {
		return x.ResponseDelayMs
	}
	return 0
}

func (x *StreamResponseDefinition) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StreamResponseDefinition) GetResponseTrailers() []*Header {
	if x != nil {
		return x.ResponseTrailers
	}
	return nil
}

func (x *StreamResponseDefinition) GetRawResponse() *RawHTTPResponse {
	if x != nil {
		return x.RawResponse
	}
	return nil
}

type UnaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response definition which should be returned in the conformance payload
	ResponseDefinition *UnaryResponseDefinition `protobuf:"bytes,1,opt,name=response_definition,json=responseDefinition,proto3" json:"response_definition,omitempty"`
	// Additional data. Only used to pad the request size to test large request messages.
	RequestData []byte `protobuf:"bytes,2,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (x *UnaryRequest) Reset() {
	*x = UnaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryRequest) ProtoMessage() {}

func (x *UnaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryRequest.ProtoReflect.Descriptor instead.
func (*UnaryRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *UnaryRequest) GetResponseDefinition() *UnaryResponseDefinition {
	if x != nil {
		return x.ResponseDefinition
	}
	return nil
}

func (x *UnaryRequest) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

type UnaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The conformance payload to respond with.
	Payload *ConformancePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UnaryResponse) Reset() {
	*x = UnaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryResponse) ProtoMessage() {}

func (x *UnaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryResponse.ProtoReflect.Descriptor instead.
func (*UnaryResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *UnaryResponse) GetPayload() *ConformancePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ServerStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response definition which should be returned in the conformance payload.
	ResponseDefinition *StreamResponseDefinition `protobuf:"bytes,1,opt,name=response_definition,json=responseDefinition,proto3" json:"response_definition,omitempty"`
	// Additional data. Only used to pad the request size to test large request messages.
	RequestData []byte `protobuf:"bytes,2,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (x *ServerStreamRequest) Reset() {
	*x = ServerStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStreamRequest) ProtoMessage() {}

func (x *ServerStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStreamRequest.ProtoReflect.Descriptor instead.
func (*ServerStreamRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ServerStreamRequest) GetResponseDefinition() *StreamResponseDefinition {
	if x != nil {
		return x.ResponseDefinition
	}
	return nil
}

func (x *ServerStreamRequest) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

type ServerStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The conformance payload to respond with
	Payload *ConformancePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ServerStreamResponse) Reset() {
	*x = ServerStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStreamResponse) ProtoMessage() {}

func (x *ServerStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStreamResponse.ProtoReflect.Descriptor instead.
func (*ServerStreamResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ServerStreamResponse) GetPayload() *ConformancePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ClientStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tells the server how to reply once all client messages are
	// complete. Required in the first message in the stream, but
	// should be ignored in subsequent messages.
	ResponseDefinition *UnaryResponseDefinition `protobuf:"bytes,1,opt,name=response_definition,json=responseDefinition,proto3" json:"response_definition,omitempty"`
	// Additional data for subsequent messages in the stream. Also
	// used to pad the request size to test large request messages.
	RequestData []byte `protobuf:"bytes,2,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (x *ClientStreamRequest) Reset() {
	*x = ClientStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStreamRequest) ProtoMessage() {}

func (x *ClientStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStreamRequest.ProtoReflect.Descriptor instead.
func (*ClientStreamRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ClientStreamRequest) GetResponseDefinition() *UnaryResponseDefinition {
	if x != nil {
		return x.ResponseDefinition
	}
	return nil
}

func (x *ClientStreamRequest) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

type ClientStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The conformance payload to respond with
	Payload *ConformancePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ClientStreamResponse) Reset() {
	*x = ClientStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStreamResponse) ProtoMessage() {}

func (x *ClientStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStreamResponse.ProtoReflect.Descriptor instead.
func (*ClientStreamResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ClientStreamResponse) GetPayload() *ConformancePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type BidiStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tells the server how to reply; required in the first message
	// in the stream. Should be ignored in subsequent messages.
	ResponseDefinition *StreamResponseDefinition `protobuf:"bytes,1,opt,name=response_definition,json=responseDefinition,proto3" json:"response_definition,omitempty"`
	// Tells the server whether it should wait for each request
	// before sending a response.
	//
	// If true, it indicates the server should effectively interleave the
	// stream so messages are sent in request->response pairs.
	//
	// If false, then the response stream will be sent once all request messages
	// are finished sending with the only delays between messages
	// being the optional fixed milliseconds defined in the response
	// definition.
	//
	// This field is only relevant in the first message in the stream
	// and should be ignored in subsequent messages.
	FullDuplex bool `protobuf:"varint,2,opt,name=full_duplex,json=fullDuplex,proto3" json:"full_duplex,omitempty"`
	// Additional data for subsequent messages in the stream. Also
	// used to pad the request size to test large request messages.
	RequestData []byte `protobuf:"bytes,3,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (x *BidiStreamRequest) Reset() {
	*x = BidiStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidiStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidiStreamRequest) ProtoMessage() {}

func (x *BidiStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidiStreamRequest.ProtoReflect.Descriptor instead.
func (*BidiStreamRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *BidiStreamRequest) GetResponseDefinition() *StreamResponseDefinition {
	if x != nil {
		return x.ResponseDefinition
	}
	return nil
}

func (x *BidiStreamRequest) GetFullDuplex() bool {
	if x != nil {
		return x.FullDuplex
	}
	return false
}

func (x *BidiStreamRequest) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

type BidiStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The conformance payload to respond with
	Payload *ConformancePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *BidiStreamResponse) Reset() {
	*x = BidiStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidiStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidiStreamResponse) ProtoMessage() {}

func (x *BidiStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidiStreamResponse.ProtoReflect.Descriptor instead.
func (*BidiStreamResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *BidiStreamResponse) GetPayload() *ConformancePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UnimplementedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnimplementedRequest) Reset() {
	*x = UnimplementedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnimplementedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnimplementedRequest) ProtoMessage() {}

func (x *UnimplementedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnimplementedRequest.ProtoReflect.Descriptor instead.
func (*UnimplementedRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{10}
}

type UnimplementedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnimplementedResponse) Reset() {
	*x = UnimplementedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnimplementedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnimplementedResponse) ProtoMessage() {}

func (x *UnimplementedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnimplementedResponse.ProtoReflect.Descriptor instead.
func (*UnimplementedResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{11}
}

type ConformancePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Echoes back information about the request stream observed so far.
	RequestInfo *ConformancePayload_RequestInfo `protobuf:"bytes,2,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
}

func (x *ConformancePayload) Reset() {
	*x = ConformancePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformancePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformancePayload) ProtoMessage() {}

func (x *ConformancePayload) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformancePayload.ProtoReflect.Descriptor instead.
func (*ConformancePayload) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ConformancePayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConformancePayload) GetRequestInfo() *ConformancePayload_RequestInfo {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

// An error definition used for specifying a desired error response
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// If this value is absent in a test case response definition, the contents of the
	// actual error message will not be checked. This is useful for certain kinds of
	// error conditions where the exact message to be used is not specified, only the
	// code.
	Message *string      `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Details []*anypb.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Error) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

// A tuple of name and values (ASCII) for a header or trailer entry.
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// RawHTTPRequest models a raw HTTP request. This can be used to craft
// custom requests with odd properties (including certain kinds of
// malformed requests) to test edge cases in servers.
type RawHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verb    string    `protobuf:"bytes,1,opt,name=verb,proto3" json:"verb,omitempty"`
	Uri     string    `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Headers []*Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	// These query params will be encoded and added to the uri before
	// the request is sent.
	RawQueryParams     []*Header                           `protobuf:"bytes,4,rep,name=raw_query_params,json=rawQueryParams,proto3" json:"raw_query_params,omitempty"`
	EncodedQueryParams []*RawHTTPRequest_EncodedQueryParam `protobuf:"bytes,5,rep,name=encoded_query_params,json=encodedQueryParams,proto3" json:"encoded_query_params,omitempty"`
	// Types that are assignable to Body:
	//
	//	*RawHTTPRequest_Unary
	//	*RawHTTPRequest_Stream
	Body isRawHTTPRequest_Body `protobuf_oneof:"body"`
}

func (x *RawHTTPRequest) Reset() {
	*x = RawHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawHTTPRequest) ProtoMessage() {}

func (x *RawHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawHTTPRequest.ProtoReflect.Descriptor instead.
func (*RawHTTPRequest) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *RawHTTPRequest) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *RawHTTPRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RawHTTPRequest) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RawHTTPRequest) GetRawQueryParams() []*Header {
	if x != nil {
		return x.RawQueryParams
	}
	return nil
}

func (x *RawHTTPRequest) GetEncodedQueryParams() []*RawHTTPRequest_EncodedQueryParam {
	if x != nil {
		return x.EncodedQueryParams
	}
	return nil
}

func (m *RawHTTPRequest) GetBody() isRawHTTPRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *RawHTTPRequest) GetUnary() *MessageContents {
	if x, ok := x.GetBody().(*RawHTTPRequest_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *RawHTTPRequest) GetStream() *StreamContents {
	if x, ok := x.GetBody().(*RawHTTPRequest_Stream); ok {
		return x.Stream
	}
	return nil
}

type isRawHTTPRequest_Body interface {
	isRawHTTPRequest_Body()
}

type RawHTTPRequest_Unary struct {
	// The body is a single message.
	Unary *MessageContents `protobuf:"bytes,6,opt,name=unary,proto3,oneof"`
}

type RawHTTPRequest_Stream struct {
	// The body is a stream, encoded using a five-byte
	// prefix before each item in the stream.
	Stream *StreamContents `protobuf:"bytes,7,opt,name=stream,proto3,oneof"`
}

func (*RawHTTPRequest_Unary) isRawHTTPRequest_Body() {}

func (*RawHTTPRequest_Stream) isRawHTTPRequest_Body() {}

// MessageContents represents a message in a request body.
type MessageContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message data can be defined in one of three ways.
	//
	// Types that are assignable to Data:
	//
	//	*MessageContents_Binary
	//	*MessageContents_Text
	//	*MessageContents_BinaryMessage
	Data isMessageContents_Data `protobuf_oneof:"data"`
	// If specified and not identity, the above data will be
	// compressed using the given algorithm.
	Compression Compression `protobuf:"varint,4,opt,name=compression,proto3,enum=connectrpc.conformance.v1.Compression" json:"compression,omitempty"`
}

func (x *MessageContents) Reset() {
	*x = MessageContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContents) ProtoMessage() {}

func (x *MessageContents) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContents.ProtoReflect.Descriptor instead.
func (*MessageContents) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{16}
}

func (m *MessageContents) GetData() isMessageContents_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MessageContents) GetBinary() []byte {
	if x, ok := x.GetData().(*MessageContents_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *MessageContents) GetText() string {
	if x, ok := x.GetData().(*MessageContents_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MessageContents) GetBinaryMessage() *anypb.Any {
	if x, ok := x.GetData().(*MessageContents_BinaryMessage); ok {
		return x.BinaryMessage
	}
	return nil
}

func (x *MessageContents) GetCompression() Compression {
	if x != nil {
		return x.Compression
	}
	return Compression_COMPRESSION_UNSPECIFIED
}

type isMessageContents_Data interface {
	isMessageContents_Data()
}

type MessageContents_Binary struct {
	// Arbitrary bytes.
	Binary []byte `protobuf:"bytes,1,opt,name=binary,proto3,oneof"`
}

type MessageContents_Text struct {
	// Arbitrary text.
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type MessageContents_BinaryMessage struct {
	// An actual message. The message inside the Any will be
	// serialized to the protobuf binary formats, and the
	// resulting bytes will be the contents.
	BinaryMessage *anypb.Any `protobuf:"bytes,3,opt,name=binary_message,json=binaryMessage,proto3,oneof"`
}

func (*MessageContents_Binary) isMessageContents_Data() {}

func (*MessageContents_Text) isMessageContents_Data() {}

func (*MessageContents_BinaryMessage) isMessageContents_Data() {}

// StreamContents represents a sequence of messages in a request body.
type StreamContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*StreamContents_StreamItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StreamContents) Reset() {
	*x = StreamContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamContents) ProtoMessage() {}

func (x *StreamContents) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamContents.ProtoReflect.Descriptor instead.
func (*StreamContents) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *StreamContents) GetItems() []*StreamContents_StreamItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// RawHTTPResponse models a raw HTTP response. This can be used to craft
// custom responses with odd properties (including certain kinds of
// malformed responses) to test edge cases in clients.
type RawHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode uint32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers    []*Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// Types that are assignable to Body:
	//
	//	*RawHTTPResponse_Unary
	//	*RawHTTPResponse_Stream
	Body     isRawHTTPResponse_Body `protobuf_oneof:"body"`
	Trailers []*Header              `protobuf:"bytes,5,rep,name=trailers,proto3" json:"trailers,omitempty"`
}

func (x *RawHTTPResponse) Reset() {
	*x = RawHTTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawHTTPResponse) ProtoMessage() {}

func (x *RawHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawHTTPResponse.ProtoReflect.Descriptor instead.
func (*RawHTTPResponse) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *RawHTTPResponse) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *RawHTTPResponse) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *RawHTTPResponse) GetBody() isRawHTTPResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *RawHTTPResponse) GetUnary() *MessageContents {
	if x, ok := x.GetBody().(*RawHTTPResponse_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *RawHTTPResponse) GetStream() *StreamContents {
	if x, ok := x.GetBody().(*RawHTTPResponse_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *RawHTTPResponse) GetTrailers() []*Header {
	if x != nil {
		return x.Trailers
	}
	return nil
}

type isRawHTTPResponse_Body interface {
	isRawHTTPResponse_Body()
}

type RawHTTPResponse_Unary struct {
	// The body is a single message.
	Unary *MessageContents `protobuf:"bytes,3,opt,name=unary,proto3,oneof"`
}

type RawHTTPResponse_Stream struct {
	// The body is a stream, encoded using a five-byte
	// prefix before each item in the stream.
	Stream *StreamContents `protobuf:"bytes,4,opt,name=stream,proto3,oneof"`
}

func (*RawHTTPResponse_Unary) isRawHTTPResponse_Body() {}

func (*RawHTTPResponse_Stream) isRawHTTPResponse_Body() {}

type ConformancePayload_RequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server echos back the request headers it observed here.
	RequestHeaders []*Header `protobuf:"bytes,1,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	// The timeout observed that was included in the request. Other timeouts use a
	// type of uint32, but we want to be lenient here to allow whatever value the RPC
	// server observes, even if it's outside the range of uint32.
	TimeoutMs *int64 `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
	// The server should echo back all requests received.
	// For unary and server-streaming requests, this should always contain a single request
	// For client-streaming and half-duplex bidi-streaming, this should contain
	// all client requests in the order received and be present in each response.
	// For full-duplex bidirectional-streaming, this should contain all requests in the order
	// they were received since the last sent response.
	Requests []*anypb.Any `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
	// If present, the request used the Connect protocol and a GET method. This
	// captures other relevant information about the request. If a server implementation
	// is unable to populate this (due to the server framework not exposing all of these
	// details to application code), it may be an empty message. This implies that the
	// server framework, at a minimum, at least expose to application code whether the
	// request used GET vs. POST.
	ConnectGetInfo *ConformancePayload_ConnectGetInfo `protobuf:"bytes,4,opt,name=connect_get_info,json=connectGetInfo,proto3" json:"connect_get_info,omitempty"`
}

func (x *ConformancePayload_RequestInfo) Reset() {
	*x = ConformancePayload_RequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformancePayload_RequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformancePayload_RequestInfo) ProtoMessage() {}

func (x *ConformancePayload_RequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformancePayload_RequestInfo.ProtoReflect.Descriptor instead.
func (*ConformancePayload_RequestInfo) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ConformancePayload_RequestInfo) GetRequestHeaders() []*Header {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ConformancePayload_RequestInfo) GetTimeoutMs() int64 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

func (x *ConformancePayload_RequestInfo) GetRequests() []*anypb.Any {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ConformancePayload_RequestInfo) GetConnectGetInfo() *ConformancePayload_ConnectGetInfo {
	if x != nil {
		return x.ConnectGetInfo
	}
	return nil
}

type ConformancePayload_ConnectGetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryParams []*Header `protobuf:"bytes,1,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
}

func (x *ConformancePayload_ConnectGetInfo) Reset() {
	*x = ConformancePayload_ConnectGetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformancePayload_ConnectGetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformancePayload_ConnectGetInfo) ProtoMessage() {}

func (x *ConformancePayload_ConnectGetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformancePayload_ConnectGetInfo.ProtoReflect.Descriptor instead.
func (*ConformancePayload_ConnectGetInfo) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ConformancePayload_ConnectGetInfo) GetQueryParams() []*Header {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

// This provides an easier way to define a complex binary query param
// than having to write literal base64-encoded bytes in raw_query_params.
type RawHTTPRequest_EncodedQueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *MessageContents `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// If true, the message contents will be base64-encoded and the
	// resulting string used as the query parameter value.
	Base64Encode bool `protobuf:"varint,3,opt,name=base64_encode,json=base64Encode,proto3" json:"base64_encode,omitempty"`
}

func (x *RawHTTPRequest_EncodedQueryParam) Reset() {
	*x = RawHTTPRequest_EncodedQueryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawHTTPRequest_EncodedQueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawHTTPRequest_EncodedQueryParam) ProtoMessage() {}

func (x *RawHTTPRequest_EncodedQueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawHTTPRequest_EncodedQueryParam.ProtoReflect.Descriptor instead.
func (*RawHTTPRequest_EncodedQueryParam) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *RawHTTPRequest_EncodedQueryParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RawHTTPRequest_EncodedQueryParam) GetValue() *MessageContents {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RawHTTPRequest_EncodedQueryParam) GetBase64Encode() bool {
	if x != nil {
		return x.Base64Encode
	}
	return false
}

type StreamContents_StreamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   uint32           `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`         // must be in the range 0 to 255.
	Length  *uint32          `protobuf:"varint,2,opt,name=length,proto3,oneof" json:"length,omitempty"` // if absent use actual length of payload
	Payload *MessageContents `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StreamContents_StreamItem) Reset() {
	*x = StreamContents_StreamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamContents_StreamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamContents_StreamItem) ProtoMessage() {}

func (x *StreamContents_StreamItem) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamContents_StreamItem.ProtoReflect.Descriptor instead.
func (*StreamContents_StreamItem) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *StreamContents_StreamItem) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *StreamContents_StreamItem) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *StreamContents_StreamItem) GetPayload() *MessageContents {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_connectrpc_conformance_v1_service_proto protoreflect.FileDescriptor

var file_connectrpc_conformance_v1_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x03,
	0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0d, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x42, 0x69, 0x64, 0x69, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x12, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x5c, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0xa6, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x66, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x1a, 0x56, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x76, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x04, 0x0a,
	0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x65, 0x72, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0e, 0x72, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x6d, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42,
	0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x8e, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xbf, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x77, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0xb9, 0x04, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x71, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x12, 0x6d, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x64,
	0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x64, 0x69, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x72, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x8d, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63,
	0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x25, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x5c, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectrpc_conformance_v1_service_proto_rawDescOnce sync.Once
	file_connectrpc_conformance_v1_service_proto_rawDescData = file_connectrpc_conformance_v1_service_proto_rawDesc
)

func file_connectrpc_conformance_v1_service_proto_rawDescGZIP() []byte {
	file_connectrpc_conformance_v1_service_proto_rawDescOnce.Do(func() {
		file_connectrpc_conformance_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectrpc_conformance_v1_service_proto_rawDescData)
	})
	return file_connectrpc_conformance_v1_service_proto_rawDescData
}

var file_connectrpc_conformance_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_connectrpc_conformance_v1_service_proto_goTypes = []interface{}{
	(*UnaryResponseDefinition)(nil),           // 0: connectrpc.conformance.v1.UnaryResponseDefinition
	(*StreamResponseDefinition)(nil),          // 1: connectrpc.conformance.v1.StreamResponseDefinition
	(*UnaryRequest)(nil),                      // 2: connectrpc.conformance.v1.UnaryRequest
	(*UnaryResponse)(nil),                     // 3: connectrpc.conformance.v1.UnaryResponse
	(*ServerStreamRequest)(nil),               // 4: connectrpc.conformance.v1.ServerStreamRequest
	(*ServerStreamResponse)(nil),              // 5: connectrpc.conformance.v1.ServerStreamResponse
	(*ClientStreamRequest)(nil),               // 6: connectrpc.conformance.v1.ClientStreamRequest
	(*ClientStreamResponse)(nil),              // 7: connectrpc.conformance.v1.ClientStreamResponse
	(*BidiStreamRequest)(nil),                 // 8: connectrpc.conformance.v1.BidiStreamRequest
	(*BidiStreamResponse)(nil),                // 9: connectrpc.conformance.v1.BidiStreamResponse
	(*UnimplementedRequest)(nil),              // 10: connectrpc.conformance.v1.UnimplementedRequest
	(*UnimplementedResponse)(nil),             // 11: connectrpc.conformance.v1.UnimplementedResponse
	(*ConformancePayload)(nil),                // 12: connectrpc.conformance.v1.ConformancePayload
	(*Error)(nil),                             // 13: connectrpc.conformance.v1.Error
	(*Header)(nil),                            // 14: connectrpc.conformance.v1.Header
	(*RawHTTPRequest)(nil),                    // 15: connectrpc.conformance.v1.RawHTTPRequest
	(*MessageContents)(nil),                   // 16: connectrpc.conformance.v1.MessageContents
	(*StreamContents)(nil),                    // 17: connectrpc.conformance.v1.StreamContents
	(*RawHTTPResponse)(nil),                   // 18: connectrpc.conformance.v1.RawHTTPResponse
	(*ConformancePayload_RequestInfo)(nil),    // 19: connectrpc.conformance.v1.ConformancePayload.RequestInfo
	(*ConformancePayload_ConnectGetInfo)(nil), // 20: connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo
	(*RawHTTPRequest_EncodedQueryParam)(nil),  // 21: connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam
	(*StreamContents_StreamItem)(nil),         // 22: connectrpc.conformance.v1.StreamContents.StreamItem
	(*anypb.Any)(nil),                         // 23: google.protobuf.Any
	(Compression)(0),                          // 24: connectrpc.conformance.v1.Compression
}
var file_connectrpc_conformance_v1_service_proto_depIdxs = []int32{
	14, // 0: connectrpc.conformance.v1.UnaryResponseDefinition.response_headers:type_name -> connectrpc.conformance.v1.Header
	13, // 1: connectrpc.conformance.v1.UnaryResponseDefinition.error:type_name -> connectrpc.conformance.v1.Error
	14, // 2: connectrpc.conformance.v1.UnaryResponseDefinition.response_trailers:type_name -> connectrpc.conformance.v1.Header
	18, // 3: connectrpc.conformance.v1.UnaryResponseDefinition.raw_response:type_name -> connectrpc.conformance.v1.RawHTTPResponse
	14, // 4: connectrpc.conformance.v1.StreamResponseDefinition.response_headers:type_name -> connectrpc.conformance.v1.Header
	13, // 5: connectrpc.conformance.v1.StreamResponseDefinition.error:type_name -> connectrpc.conformance.v1.Error
	14, // 6: connectrpc.conformance.v1.StreamResponseDefinition.response_trailers:type_name -> connectrpc.conformance.v1.Header
	18, // 7: connectrpc.conformance.v1.StreamResponseDefinition.raw_response:type_name -> connectrpc.conformance.v1.RawHTTPResponse
	0,  // 8: connectrpc.conformance.v1.UnaryRequest.response_definition:type_name -> connectrpc.conformance.v1.UnaryResponseDefinition
	12, // 9: connectrpc.conformance.v1.UnaryResponse.payload:type_name -> connectrpc.conformance.v1.ConformancePayload
	1,  // 10: connectrpc.conformance.v1.ServerStreamRequest.response_definition:type_name -> connectrpc.conformance.v1.StreamResponseDefinition
	12, // 11: connectrpc.conformance.v1.ServerStreamResponse.payload:type_name -> connectrpc.conformance.v1.ConformancePayload
	0,  // 12: connectrpc.conformance.v1.ClientStreamRequest.response_definition:type_name -> connectrpc.conformance.v1.UnaryResponseDefinition
	12, // 13: connectrpc.conformance.v1.ClientStreamResponse.payload:type_name -> connectrpc.conformance.v1.ConformancePayload
	1,  // 14: connectrpc.conformance.v1.BidiStreamRequest.response_definition:type_name -> connectrpc.conformance.v1.StreamResponseDefinition
	12, // 15: connectrpc.conformance.v1.BidiStreamResponse.payload:type_name -> connectrpc.conformance.v1.ConformancePayload
	19, // 16: connectrpc.conformance.v1.ConformancePayload.request_info:type_name -> connectrpc.conformance.v1.ConformancePayload.RequestInfo
	23, // 17: connectrpc.conformance.v1.Error.details:type_name -> google.protobuf.Any
	14, // 18: connectrpc.conformance.v1.RawHTTPRequest.headers:type_name -> connectrpc.conformance.v1.Header
	14, // 19: connectrpc.conformance.v1.RawHTTPRequest.raw_query_params:type_name -> connectrpc.conformance.v1.Header
	21, // 20: connectrpc.conformance.v1.RawHTTPRequest.encoded_query_params:type_name -> connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam
	16, // 21: connectrpc.conformance.v1.RawHTTPRequest.unary:type_name -> connectrpc.conformance.v1.MessageContents
	17, // 22: connectrpc.conformance.v1.RawHTTPRequest.stream:type_name -> connectrpc.conformance.v1.StreamContents
	23, // 23: connectrpc.conformance.v1.MessageContents.binary_message:type_name -> google.protobuf.Any
	24, // 24: connectrpc.conformance.v1.MessageContents.compression:type_name -> connectrpc.conformance.v1.Compression
	22, // 25: connectrpc.conformance.v1.StreamContents.items:type_name -> connectrpc.conformance.v1.StreamContents.StreamItem
	14, // 26: connectrpc.conformance.v1.RawHTTPResponse.headers:type_name -> connectrpc.conformance.v1.Header
	16, // 27: connectrpc.conformance.v1.RawHTTPResponse.unary:type_name -> connectrpc.conformance.v1.MessageContents
	17, // 28: connectrpc.conformance.v1.RawHTTPResponse.stream:type_name -> connectrpc.conformance.v1.StreamContents
	14, // 29: connectrpc.conformance.v1.RawHTTPResponse.trailers:type_name -> connectrpc.conformance.v1.Header
	14, // 30: connectrpc.conformance.v1.ConformancePayload.RequestInfo.request_headers:type_name -> connectrpc.conformance.v1.Header
	23, // 31: connectrpc.conformance.v1.ConformancePayload.RequestInfo.requests:type_name -> google.protobuf.Any
	20, // 32: connectrpc.conformance.v1.ConformancePayload.RequestInfo.connect_get_info:type_name -> connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo
	14, // 33: connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.query_params:type_name -> connectrpc.conformance.v1.Header
	16, // 34: connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.value:type_name -> connectrpc.conformance.v1.MessageContents
	16, // 35: connectrpc.conformance.v1.StreamContents.StreamItem.payload:type_name -> connectrpc.conformance.v1.MessageContents
	2,  // 36: connectrpc.conformance.v1.ConformanceService.Unary:input_type -> connectrpc.conformance.v1.UnaryRequest
	4,  // 37: connectrpc.conformance.v1.ConformanceService.ServerStream:input_type -> connectrpc.conformance.v1.ServerStreamRequest
	6,  // 38: connectrpc.conformance.v1.ConformanceService.ClientStream:input_type -> connectrpc.conformance.v1.ClientStreamRequest
	8,  // 39: connectrpc.conformance.v1.ConformanceService.BidiStream:input_type -> connectrpc.conformance.v1.BidiStreamRequest
	10, // 40: connectrpc.conformance.v1.ConformanceService.Unimplemented:input_type -> connectrpc.conformance.v1.UnimplementedRequest
	3,  // 41: connectrpc.conformance.v1.ConformanceService.Unary:output_type -> connectrpc.conformance.v1.UnaryResponse
	5,  // 42: connectrpc.conformance.v1.ConformanceService.ServerStream:output_type -> connectrpc.conformance.v1.ServerStreamResponse
	7,  // 43: connectrpc.conformance.v1.ConformanceService.ClientStream:output_type -> connectrpc.conformance.v1.ClientStreamResponse
	9,  // 44: connectrpc.conformance.v1.ConformanceService.BidiStream:output_type -> connectrpc.conformance.v1.BidiStreamResponse
	11, // 45: connectrpc.conformance.v1.ConformanceService.Unimplemented:output_type -> connectrpc.conformance.v1.UnimplementedResponse
	41, // [41:46] is the sub-list for method output_type
	36, // [36:41] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_connectrpc_conformance_v1_service_proto_init() }
func file_connectrpc_conformance_v1_service_proto_init() {
	if File_connectrpc_conformance_v1_service_proto != nil {
		return
	}
	file_connectrpc_conformance_v1_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_connectrpc_conformance_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryResponseDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponseDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidiStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidiStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnimplementedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnimplementedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformancePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawHTTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformancePayload_RequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformancePayload_ConnectGetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawHTTPRequest_EncodedQueryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamContents_StreamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connectrpc_conformance_v1_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UnaryResponseDefinition_ResponseData)(nil),
		(*UnaryResponseDefinition_Error)(nil),
	}
	file_connectrpc_conformance_v1_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_connectrpc_conformance_v1_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*RawHTTPRequest_Unary)(nil),
		(*RawHTTPRequest_Stream)(nil),
	}
	file_connectrpc_conformance_v1_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MessageContents_Binary)(nil),
		(*MessageContents_Text)(nil),
		(*MessageContents_BinaryMessage)(nil),
	}
	file_connectrpc_conformance_v1_service_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*RawHTTPResponse_Unary)(nil),
		(*RawHTTPResponse_Stream)(nil),
	}
	file_connectrpc_conformance_v1_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_connectrpc_conformance_v1_service_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectrpc_conformance_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connectrpc_conformance_v1_service_proto_goTypes,
		DependencyIndexes: file_connectrpc_conformance_v1_service_proto_depIdxs,
		MessageInfos:      file_connectrpc_conformance_v1_service_proto_msgTypes,
	}.Build()
	File_connectrpc_conformance_v1_service_proto = out.File
	file_connectrpc_conformance_v1_service_proto_rawDesc = nil
	file_connectrpc_conformance_v1_service_proto_goTypes = nil
	file_connectrpc_conformance_v1_service_proto_depIdxs = nil
}
