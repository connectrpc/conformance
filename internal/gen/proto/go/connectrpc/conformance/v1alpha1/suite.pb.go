// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: connectrpc/conformance/v1alpha1/suite.proto

package conformancev1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSuite_TestMode int32

const (
	// Used when the test suite does not apply to a particular mode. Such tests
	// are run, regardless of the current test mode, to verify both clients and
	// servers under test.
	TestSuite_TEST_MODE_UNSPECIFIED TestSuite_TestMode = 0
	// Indicates tests that are intended to be used only for a client-under-test.
	// These cases can induce very particular and/or aberrant responses from the
	// reference server, to verify how the client reacts to such responses.
	TestSuite_TEST_MODE_CLIENT TestSuite_TestMode = 1
	// Indicates tests that are intended to be used only for a server-under-test.
	// These cases can induce very particular and/or aberrant requests from the
	// reference client, to verify how the server reacts to such requests.
	TestSuite_TEST_MODE_SERVER TestSuite_TestMode = 2
)

// Enum value maps for TestSuite_TestMode.
var (
	TestSuite_TestMode_name = map[int32]string{
		0: "TEST_MODE_UNSPECIFIED",
		1: "TEST_MODE_CLIENT",
		2: "TEST_MODE_SERVER",
	}
	TestSuite_TestMode_value = map[string]int32{
		"TEST_MODE_UNSPECIFIED": 0,
		"TEST_MODE_CLIENT":      1,
		"TEST_MODE_SERVER":      2,
	}
)

func (x TestSuite_TestMode) Enum() *TestSuite_TestMode {
	p := new(TestSuite_TestMode)
	*p = x
	return p
}

func (x TestSuite_TestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSuite_TestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes[0].Descriptor()
}

func (TestSuite_TestMode) Type() protoreflect.EnumType {
	return &file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes[0]
}

func (x TestSuite_TestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSuite_TestMode.Descriptor instead.
func (TestSuite_TestMode) EnumDescriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP(), []int{0, 0}
}

type TestSuite_ConnectVersionMode int32

const (
	// Used when the suite is agnostic to the server's validation
	// behavior.
	TestSuite_CONNECT_VERSION_MODE_UNSPECIFIED TestSuite_ConnectVersionMode = 0
	// Used when the suite relies on the server validating the presence
	// and correctness of the Connect version header or query param.
	TestSuite_CONNECT_VERSION_MODE_REQUIRE TestSuite_ConnectVersionMode = 1
	// Used when the suite relies on the server ignore any Connect
	// header or query param.
	TestSuite_CONNECT_VERSION_MODE_IGNORE TestSuite_ConnectVersionMode = 2
)

// Enum value maps for TestSuite_ConnectVersionMode.
var (
	TestSuite_ConnectVersionMode_name = map[int32]string{
		0: "CONNECT_VERSION_MODE_UNSPECIFIED",
		1: "CONNECT_VERSION_MODE_REQUIRE",
		2: "CONNECT_VERSION_MODE_IGNORE",
	}
	TestSuite_ConnectVersionMode_value = map[string]int32{
		"CONNECT_VERSION_MODE_UNSPECIFIED": 0,
		"CONNECT_VERSION_MODE_REQUIRE":     1,
		"CONNECT_VERSION_MODE_IGNORE":      2,
	}
)

func (x TestSuite_ConnectVersionMode) Enum() *TestSuite_ConnectVersionMode {
	p := new(TestSuite_ConnectVersionMode)
	*p = x
	return p
}

func (x TestSuite_ConnectVersionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSuite_ConnectVersionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes[1].Descriptor()
}

func (TestSuite_ConnectVersionMode) Type() protoreflect.EnumType {
	return &file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes[1]
}

func (x TestSuite_ConnectVersionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSuite_ConnectVersionMode.Descriptor instead.
func (TestSuite_ConnectVersionMode) EnumDescriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP(), []int{0, 1}
}

// TestSuite represents a set of conformance test cases. This is also the schema
// used for the structure of a YAML test file. Each YAML file represents a test
// suite, which can contain numerous cases. Each test suite has various properties
// that indicate the kinds of features that are tested. Test suites may be skipped
// based on whether the client or server under test implements these features.
type TestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mode      TestSuite_TestMode `protobuf:"varint,2,opt,name=mode,proto3,enum=connectrpc.conformance.v1alpha1.TestSuite_TestMode" json:"mode,omitempty"`
	TestCases []*TestCase        `protobuf:"bytes,3,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
	// If non-empty, the protocols to which this suite applies. If empty,
	// this suite applies to all protocols.
	RelevantProtocols []Protocol `protobuf:"varint,4,rep,packed,name=relevant_protocols,json=relevantProtocols,proto3,enum=connectrpc.conformance.v1alpha1.Protocol" json:"relevant_protocols,omitempty"`
	// If non-empty, the HTTP versions to which this suite applies. If empty,
	// this suite applies to all HTTP versions.
	RelevantHttpVersions []HTTPVersion `protobuf:"varint,5,rep,packed,name=relevant_http_versions,json=relevantHttpVersions,proto3,enum=connectrpc.conformance.v1alpha1.HTTPVersion" json:"relevant_http_versions,omitempty"`
	// If non-empty, the codecs to which this suite applies. If empty, this
	// suite applies to all codecs.
	RelevantCodecs []Codec `protobuf:"varint,6,rep,packed,name=relevant_codecs,json=relevantCodecs,proto3,enum=connectrpc.conformance.v1alpha1.Codec" json:"relevant_codecs,omitempty"`
	// If non-empty, the compression encodings to which this suite applies.
	// If empty, this suite applies to all encodings.
	RelevantCompressions []Compression `protobuf:"varint,7,rep,packed,name=relevant_compressions,json=relevantCompressions,proto3,enum=connectrpc.conformance.v1alpha1.Compression" json:"relevant_compressions,omitempty"`
	// Indicates the Connect version validation behavior that this suite
	// relies on.
	ConnectVersionMode TestSuite_ConnectVersionMode `protobuf:"varint,8,opt,name=connect_version_mode,json=connectVersionMode,proto3,enum=connectrpc.conformance.v1alpha1.TestSuite_ConnectVersionMode" json:"connect_version_mode,omitempty"`
	// If true, the cases in this suite rely on TLS.
	ReliesOnTls bool `protobuf:"varint,9,opt,name=relies_on_tls,json=reliesOnTls,proto3" json:"relies_on_tls,omitempty"`
	// If true, the cases in this suite rely on the client using TLS
	// certificates to authenticate with the server. (Should only be
	// true if relies_on_tls is also true.)
	ReliesOnTlsClientCerts bool `protobuf:"varint,10,opt,name=relies_on_tls_client_certs,json=reliesOnTlsClientCerts,proto3" json:"relies_on_tls_client_certs,omitempty"`
	// If true, the cases in this suite rely on the Connect GET protocol.
	ReliesOnConnectGet bool `protobuf:"varint,11,opt,name=relies_on_connect_get,json=reliesOnConnectGet,proto3" json:"relies_on_connect_get,omitempty"`
	// If true, the cases in this suite rely on support for limiting the
	// size of received messages. When true, mode should be set to indicate
	// whether it is the client or the server that must support the limit.
	ReliesOnMessageReceiveLimit bool `protobuf:"varint,12,opt,name=relies_on_message_receive_limit,json=reliesOnMessageReceiveLimit,proto3" json:"relies_on_message_receive_limit,omitempty"`
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP(), []int{0}
}

func (x *TestSuite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSuite) GetMode() TestSuite_TestMode {
	if x != nil {
		return x.Mode
	}
	return TestSuite_TEST_MODE_UNSPECIFIED
}

func (x *TestSuite) GetTestCases() []*TestCase {
	if x != nil {
		return x.TestCases
	}
	return nil
}

func (x *TestSuite) GetRelevantProtocols() []Protocol {
	if x != nil {
		return x.RelevantProtocols
	}
	return nil
}

func (x *TestSuite) GetRelevantHttpVersions() []HTTPVersion {
	if x != nil {
		return x.RelevantHttpVersions
	}
	return nil
}

func (x *TestSuite) GetRelevantCodecs() []Codec {
	if x != nil {
		return x.RelevantCodecs
	}
	return nil
}

func (x *TestSuite) GetRelevantCompressions() []Compression {
	if x != nil {
		return x.RelevantCompressions
	}
	return nil
}

func (x *TestSuite) GetConnectVersionMode() TestSuite_ConnectVersionMode {
	if x != nil {
		return x.ConnectVersionMode
	}
	return TestSuite_CONNECT_VERSION_MODE_UNSPECIFIED
}

func (x *TestSuite) GetReliesOnTls() bool {
	if x != nil {
		return x.ReliesOnTls
	}
	return false
}

func (x *TestSuite) GetReliesOnTlsClientCerts() bool {
	if x != nil {
		return x.ReliesOnTlsClientCerts
	}
	return false
}

func (x *TestSuite) GetReliesOnConnectGet() bool {
	if x != nil {
		return x.ReliesOnConnectGet
	}
	return false
}

func (x *TestSuite) GetReliesOnMessageReceiveLimit() bool {
	if x != nil {
		return x.ReliesOnMessageReceiveLimit
	}
	return false
}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the RPC that the client should invoke. The first eight fields
	// are not fully specified. Instead the first field, test_name, must be
	// present but is a prefix -- other characteristics that identify one
	// permutation of the test case will be appended to this name. The next
	// seven fields (http_version, protocol, codec, compression, host, port,
	// and server_tls_cert) must not be present. They are all populated by
	// the test harness based on the test environment (e.g. actual server and
	//
	//	port to use) and characteristics of a single permutation.
	Request *ClientCompatRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// To support extremely large messages, as well as very precisely-sized
	// messages, without having to encode them fully or perfectly in YAML
	// test cases, this value can be specified. When non-empty, this value
	// should have no more entries than there are messages in the request
	// stream. The first value is applied to the first request message, and
	// so on. For each entry, if the size is present, it is used to expand
	// the data field in the request (which is actually part of the response
	// definition). The specified size is added to the current limit on
	// message size that the server will accept. That sum is the size of the
	// the serialized message that will be sent, and the data field will be
	// padded as needed to reach that size.
	ExpandRequests []*TestCase_ExpandedSize `protobuf:"bytes,2,rep,name=expand_requests,json=expandRequests,proto3" json:"expand_requests,omitempty"`
	// Defines the expected response to the above RPC. Many
	ExpectedResponse *ClientResponseResult `protobuf:"bytes,3,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP(), []int{1}
}

func (x *TestCase) GetRequest() *ClientCompatRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *TestCase) GetExpandRequests() []*TestCase_ExpandedSize {
	if x != nil {
		return x.ExpandRequests
	}
	return nil
}

func (x *TestCase) GetExpectedResponse() *ClientResponseResult {
	if x != nil {
		return x.ExpectedResponse
	}
	return nil
}

type TestCase_ExpandedSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeRelativeToLimit *int32 `protobuf:"varint,1,opt,name=size_relative_to_limit,json=sizeRelativeToLimit,proto3,oneof" json:"size_relative_to_limit,omitempty"`
}

func (x *TestCase_ExpandedSize) Reset() {
	*x = TestCase_ExpandedSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase_ExpandedSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase_ExpandedSize) ProtoMessage() {}

func (x *TestCase_ExpandedSize) ProtoReflect() protoreflect.Message {
	mi := &file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase_ExpandedSize.ProtoReflect.Descriptor instead.
func (*TestCase_ExpandedSize) Descriptor() ([]byte, []int) {
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TestCase_ExpandedSize) GetSizeRelativeToLimit() int32 {
	if x != nil && x.SizeRelativeToLimit != nil {
		return *x.SizeRelativeToLimit
	}
	return 0
}

var File_connectrpc_conformance_v1alpha1_suite_proto protoreflect.FileDescriptor

var file_connectrpc_conformance_v1alpha1_suite_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x33,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc0, 0x08, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x11, 0x72,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x62, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x69, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x6e, 0x54, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x1a, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x6e, 0x54, 0x6c, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6c,
	0x69, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x73,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x1f,
	0x72, 0x65, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x51, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x22, 0x7d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x10, 0x02, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x63, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0xb5, 0x02, 0x0a, 0x23,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x0a, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x64, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x1f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca,
	0x02, 0x1f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x5c, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x2b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x5c, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x21, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectrpc_conformance_v1alpha1_suite_proto_rawDescOnce sync.Once
	file_connectrpc_conformance_v1alpha1_suite_proto_rawDescData = file_connectrpc_conformance_v1alpha1_suite_proto_rawDesc
)

func file_connectrpc_conformance_v1alpha1_suite_proto_rawDescGZIP() []byte {
	file_connectrpc_conformance_v1alpha1_suite_proto_rawDescOnce.Do(func() {
		file_connectrpc_conformance_v1alpha1_suite_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectrpc_conformance_v1alpha1_suite_proto_rawDescData)
	})
	return file_connectrpc_conformance_v1alpha1_suite_proto_rawDescData
}

var file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_connectrpc_conformance_v1alpha1_suite_proto_goTypes = []interface{}{
	(TestSuite_TestMode)(0),           // 0: connectrpc.conformance.v1alpha1.TestSuite.TestMode
	(TestSuite_ConnectVersionMode)(0), // 1: connectrpc.conformance.v1alpha1.TestSuite.ConnectVersionMode
	(*TestSuite)(nil),                 // 2: connectrpc.conformance.v1alpha1.TestSuite
	(*TestCase)(nil),                  // 3: connectrpc.conformance.v1alpha1.TestCase
	(*TestCase_ExpandedSize)(nil),     // 4: connectrpc.conformance.v1alpha1.TestCase.ExpandedSize
	(Protocol)(0),                     // 5: connectrpc.conformance.v1alpha1.Protocol
	(HTTPVersion)(0),                  // 6: connectrpc.conformance.v1alpha1.HTTPVersion
	(Codec)(0),                        // 7: connectrpc.conformance.v1alpha1.Codec
	(Compression)(0),                  // 8: connectrpc.conformance.v1alpha1.Compression
	(*ClientCompatRequest)(nil),       // 9: connectrpc.conformance.v1alpha1.ClientCompatRequest
	(*ClientResponseResult)(nil),      // 10: connectrpc.conformance.v1alpha1.ClientResponseResult
}
var file_connectrpc_conformance_v1alpha1_suite_proto_depIdxs = []int32{
	0,  // 0: connectrpc.conformance.v1alpha1.TestSuite.mode:type_name -> connectrpc.conformance.v1alpha1.TestSuite.TestMode
	3,  // 1: connectrpc.conformance.v1alpha1.TestSuite.test_cases:type_name -> connectrpc.conformance.v1alpha1.TestCase
	5,  // 2: connectrpc.conformance.v1alpha1.TestSuite.relevant_protocols:type_name -> connectrpc.conformance.v1alpha1.Protocol
	6,  // 3: connectrpc.conformance.v1alpha1.TestSuite.relevant_http_versions:type_name -> connectrpc.conformance.v1alpha1.HTTPVersion
	7,  // 4: connectrpc.conformance.v1alpha1.TestSuite.relevant_codecs:type_name -> connectrpc.conformance.v1alpha1.Codec
	8,  // 5: connectrpc.conformance.v1alpha1.TestSuite.relevant_compressions:type_name -> connectrpc.conformance.v1alpha1.Compression
	1,  // 6: connectrpc.conformance.v1alpha1.TestSuite.connect_version_mode:type_name -> connectrpc.conformance.v1alpha1.TestSuite.ConnectVersionMode
	9,  // 7: connectrpc.conformance.v1alpha1.TestCase.request:type_name -> connectrpc.conformance.v1alpha1.ClientCompatRequest
	4,  // 8: connectrpc.conformance.v1alpha1.TestCase.expand_requests:type_name -> connectrpc.conformance.v1alpha1.TestCase.ExpandedSize
	10, // 9: connectrpc.conformance.v1alpha1.TestCase.expected_response:type_name -> connectrpc.conformance.v1alpha1.ClientResponseResult
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_connectrpc_conformance_v1alpha1_suite_proto_init() }
func file_connectrpc_conformance_v1alpha1_suite_proto_init() {
	if File_connectrpc_conformance_v1alpha1_suite_proto != nil {
		return
	}
	file_connectrpc_conformance_v1alpha1_client_compat_proto_init()
	file_connectrpc_conformance_v1alpha1_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase_ExpandedSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectrpc_conformance_v1alpha1_suite_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectrpc_conformance_v1alpha1_suite_proto_goTypes,
		DependencyIndexes: file_connectrpc_conformance_v1alpha1_suite_proto_depIdxs,
		EnumInfos:         file_connectrpc_conformance_v1alpha1_suite_proto_enumTypes,
		MessageInfos:      file_connectrpc_conformance_v1alpha1_suite_proto_msgTypes,
	}.Build()
	File_connectrpc_conformance_v1alpha1_suite_proto = out.File
	file_connectrpc_conformance_v1alpha1_suite_proto_rawDesc = nil
	file_connectrpc_conformance_v1alpha1_suite_proto_goTypes = nil
	file_connectrpc_conformance_v1alpha1_suite_proto_depIdxs = nil
}
