// source: server/v1/server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.server.v1.HTTPVersion', null, global);
goog.exportSymbol('proto.server.v1.Protocol', null, global);
goog.exportSymbol('proto.server.v1.ProtocolSupport', null, global);
goog.exportSymbol('proto.server.v1.ServerMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.v1.ServerMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.server.v1.ServerMetadata.repeatedFields_, null);
};
goog.inherits(proto.server.v1.ServerMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.v1.ServerMetadata.displayName = 'proto.server.v1.ServerMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.v1.ProtocolSupport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.server.v1.ProtocolSupport.repeatedFields_, null);
};
goog.inherits(proto.server.v1.ProtocolSupport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.v1.ProtocolSupport.displayName = 'proto.server.v1.ProtocolSupport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.v1.HTTPVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.v1.HTTPVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.v1.HTTPVersion.displayName = 'proto.server.v1.HTTPVersion';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.server.v1.ServerMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.v1.ServerMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.server.v1.ServerMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.v1.ServerMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.ServerMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    protocolsList: jspb.Message.toObjectList(msg.getProtocolsList(),
    proto.server.v1.ProtocolSupport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.v1.ServerMetadata}
 */
proto.server.v1.ServerMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.v1.ServerMetadata;
  return proto.server.v1.ServerMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.v1.ServerMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.v1.ServerMetadata}
 */
proto.server.v1.ServerMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = new proto.server.v1.ProtocolSupport;
      reader.readMessage(value,proto.server.v1.ProtocolSupport.deserializeBinaryFromReader);
      msg.addProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.v1.ServerMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.v1.ServerMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.v1.ServerMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.ServerMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.server.v1.ProtocolSupport.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.server.v1.ServerMetadata.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.v1.ServerMetadata} returns this
 */
proto.server.v1.ServerMetadata.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ProtocolSupport protocols = 2;
 * @return {!Array<!proto.server.v1.ProtocolSupport>}
 */
proto.server.v1.ServerMetadata.prototype.getProtocolsList = function() {
  return /** @type{!Array<!proto.server.v1.ProtocolSupport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.server.v1.ProtocolSupport, 2));
};


/**
 * @param {!Array<!proto.server.v1.ProtocolSupport>} value
 * @return {!proto.server.v1.ServerMetadata} returns this
*/
proto.server.v1.ServerMetadata.prototype.setProtocolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.server.v1.ProtocolSupport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.server.v1.ProtocolSupport}
 */
proto.server.v1.ServerMetadata.prototype.addProtocols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.server.v1.ProtocolSupport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.server.v1.ServerMetadata} returns this
 */
proto.server.v1.ServerMetadata.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.server.v1.ProtocolSupport.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.v1.ProtocolSupport.prototype.toObject = function(opt_includeInstance) {
  return proto.server.v1.ProtocolSupport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.v1.ProtocolSupport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.ProtocolSupport.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    httpVersionsList: jspb.Message.toObjectList(msg.getHttpVersionsList(),
    proto.server.v1.HTTPVersion.toObject, includeInstance),
    port: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.v1.ProtocolSupport}
 */
proto.server.v1.ProtocolSupport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.v1.ProtocolSupport;
  return proto.server.v1.ProtocolSupport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.v1.ProtocolSupport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.v1.ProtocolSupport}
 */
proto.server.v1.ProtocolSupport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = new proto.server.v1.HTTPVersion;
      reader.readMessage(value,proto.server.v1.HTTPVersion.deserializeBinaryFromReader);
      msg.addHttpVersions(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.v1.ProtocolSupport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.v1.ProtocolSupport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.v1.ProtocolSupport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.ProtocolSupport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHttpVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.server.v1.HTTPVersion.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Protocol protocol = 1;
 * @return {!proto.server.v1.Protocol}
 */
proto.server.v1.ProtocolSupport.prototype.getProtocol = function() {
  return /** @type {!proto.server.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.v1.Protocol} value
 * @return {!proto.server.v1.ProtocolSupport} returns this
 */
proto.server.v1.ProtocolSupport.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated HTTPVersion http_versions = 2;
 * @return {!Array<!proto.server.v1.HTTPVersion>}
 */
proto.server.v1.ProtocolSupport.prototype.getHttpVersionsList = function() {
  return /** @type{!Array<!proto.server.v1.HTTPVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.server.v1.HTTPVersion, 2));
};


/**
 * @param {!Array<!proto.server.v1.HTTPVersion>} value
 * @return {!proto.server.v1.ProtocolSupport} returns this
*/
proto.server.v1.ProtocolSupport.prototype.setHttpVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.server.v1.HTTPVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.server.v1.HTTPVersion}
 */
proto.server.v1.ProtocolSupport.prototype.addHttpVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.server.v1.HTTPVersion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.server.v1.ProtocolSupport} returns this
 */
proto.server.v1.ProtocolSupport.prototype.clearHttpVersionsList = function() {
  return this.setHttpVersionsList([]);
};


/**
 * optional string port = 3;
 * @return {string}
 */
proto.server.v1.ProtocolSupport.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.v1.ProtocolSupport} returns this
 */
proto.server.v1.ProtocolSupport.prototype.setPort = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.v1.HTTPVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.server.v1.HTTPVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.v1.HTTPVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.HTTPVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.v1.HTTPVersion}
 */
proto.server.v1.HTTPVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.v1.HTTPVersion;
  return proto.server.v1.HTTPVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.v1.HTTPVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.v1.HTTPVersion}
 */
proto.server.v1.HTTPVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.v1.HTTPVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.v1.HTTPVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.v1.HTTPVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.v1.HTTPVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 major = 1;
 * @return {number}
 */
proto.server.v1.HTTPVersion.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.server.v1.HTTPVersion} returns this
 */
proto.server.v1.HTTPVersion.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 minor = 2;
 * @return {number}
 */
proto.server.v1.HTTPVersion.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.server.v1.HTTPVersion} returns this
 */
proto.server.v1.HTTPVersion.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.server.v1.Protocol = {
  PROTOCOL_UNSPECIFIED: 0,
  PROTOCOL_GRPC: 1,
  PROTOCOL_GRPC_WEB: 2
};

goog.object.extend(exports, proto.server.v1);
