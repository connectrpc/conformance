// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package connectrpc.conformance.v1;

import "connectrpc/conformance/v1/config.proto";
import "connectrpc/conformance/v1/service.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Describes one call the client should make. The client reads
// these from stdin and, for each one, invokes an RPC as directed
// and writes the results (in the form of a ClientCompatResponse
// message) to stdout.
message ClientCompatRequest {
  string test_name = 1;

  // Test suite YAML definitions should NOT set values for these first
  // eight fields. They are automatically populated by the test runner.
  // If a test is specific to one of these values, it should instead be
  // indicated in the test suite itself (where it defines the required
  // features and relevant values for these fields).

  HTTPVersion http_version = 2;
  Protocol protocol = 3;
  Codec codec = 4;
  Compression compression = 5;
  string host = 6;
  uint32 port = 7;
  // If non-empty, the server is using TLS. The bytes are the
  // server's PEM-encoded certificate, which the client should
  // verify and trust.
  bytes server_tls_cert = 8;
  // If present, the client certificate credentials to use to
  // authenticate with the server. This will only be present
  // when server_tls_cert is non-empty.
  TLSCreds client_tls_creds = 9;
  message TLSCreds {
    bytes cert = 1;
    bytes key = 2;
  }
  // If non-zero, indicates the maximum size in bytes for a message.
  // If the server sends anything larger, the client should reject it.
  uint32 message_receive_limit = 10;

  string service = 11;
  string method = 12;
  StreamType stream_type = 13;
  // If protocol indicates Connect and stream type indicates
  // Unary, this instructs the client to use a GET HTTP method
  // when making the request.
  bool use_get_http_method = 14;
  repeated Header request_headers = 15;
  // There will be exactly one for unary and server-stream methods.
  // For client- and bidi-stream methods, all entries will have the
  // same type URL (which matches the request type of the method).
  repeated google.protobuf.Any request_messages = 16;
  optional uint32 timeout_ms = 17;
  // Wait this many milliseconds before sending a request message.
  // For client- or bidi-streaming requests, this delay should be
  // applied before each request sent.
  uint32 request_delay_ms = 18;
  // If present, the client should cancel the RPC instead of
  // allowing to complete normally.
  Cancel cancel = 19;
  message Cancel {
    // These fields determine the timing of cancellation.
    // If none are present, the client should cancel immediately
    // after all request messages are sent and the send side is
    // closed (as if the after_close_send_ms field were present
    // and zero).
    oneof cancel_timing {
      // When present, the client should cancel *instead of*
      // closing the send side of the stream, after all requests
      // have been sent. This applies only to client and bidi
      // stream RPCs.
      google.protobuf.Empty before_close_send = 1;
      // When present, the client should delay for this many
      // milliseconds after closing the send side of the stream
      // and then cancel.
      uint32 after_close_send_ms = 2;
      // When present, the client should cancel right after
      // reading this number of response messages from the stream.
      // This applies only to server and bidi stream RPCs.
      uint32 after_num_responses = 3;
    }
  }

  // The following field is only used by the reference client. If
  // you are implementing a client under test, you may ignore it
  // or respond with an error if the client receives a request where
  // it is set.
  //
  // When this field is present, it defines the actual HTTP request
  // that will be sent. The above group of fields must still be
  // provided and valid so that the reference client knows how it
  // should try to interpret the server's response.
  RawHTTPRequest raw_request = 20;
}

// The outcome of one ClientCompatRequest.
message ClientCompatResponse {
  string test_name = 1;
  oneof result {
    ClientResponseResult response = 2;
    ClientErrorResult error = 3;
  }

  // This field is used only by the reference client, and it can be used
  // to provide additional feedback about problems observed in the server
  // response. If non-empty, the test case is considered failed even if
  // the result above matches all expectations.
  repeated string feedback = 4;
}

// The result of a ClientCompatRequest, which may or may not be successful.
message ClientResponseResult {
  repeated Header response_headers = 1;
  repeated ConformancePayload payloads = 2;
  // The error received from the actual RPC invocation. Note this is not representative
  // of a runtime error and should always be the proto equivalent of a Connect error.
  Error error = 3;
  repeated Header response_trailers = 4;

  // The number of messages that were present in the request but that could not be
  // sent because an error occurred before finishing the upload.
  int32 num_unsent_requests = 5;

  // The following fields are only used by the reference client. If
  // you are implementing a client under test, you may ignore these
  // fields and do not need to populate them. If your client does
  // populate them, the conformance test runner will ignore them.

  // The HTTP status code of the response.
  int32 actual_status_code = 6;
  // When processing an error from a Connect server, this should contain
  // the actual JSON received on the wire.
  google.protobuf.Struct connect_error_raw = 7;
  // Any HTTP trailers observed after the response body. These do NOT
  // include trailers that conveyed via the body, as done in the gRPC-Web
  // and Connect streaming protocols.
  repeated Header actual_http_trailers = 8;
}

// The client is not able to fulfill the ClientCompatRequest. This may be due
// to a runtime error or an unexpected internal error such as the requested protocol
// not being supported. This is completely independent of the actual RPC invocation.
message ClientErrorResult {
  string message = 1;
}
