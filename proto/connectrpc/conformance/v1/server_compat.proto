// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package connectrpc.conformance.v1;

import "connectrpc/conformance/v1/config.proto";

// Describes one configuration for an RPC server. The server is
// expected to expose the connectrpc.conformance.v1.ConformanceService
// RPC service. The configuration does not include a port. The
// process should pick an available port, which is typically
// done by using port zero (0) when creating a network listener
// so that the OS selects an available ephemeral port.
//
// These properties are read from stdin. Once the server is
// listening, details about the server, in the form of a
// ServerCompatResponse, are written to stdout.
//
// Each test process is expected to start only one RPC server.
// When testing multiple configurations, multiple test processes
// will be started, each with different properties.
message ServerCompatRequest {
  // Signals to the server that it must support at least this protocol. Note
  // that it is fine to support others.
  // For example if `PROTOCOL_CONNECT` is specified, the server _must_ support
  // at least Connect, but _may_ also support gRPC or gRPC-web.
  Protocol protocol = 1;
  // Signals to the server the minimum HTTP version to support. As with
  // `protocol`, it is fine to support other versions. For example, if
  // `HTTP_VERSION_2` is specified, the server _must_ support HTTP/2, but _may_ also
  // support HTTP/1.1 or HTTP/3.
  HTTPVersion http_version = 2;
  // If true, generate a certificate that clients will be configured to trust
  // when connecting and return it in the `pem_cert` field of the `ServerCompatResponse`.
  // The certificate can be any TLS certificate where the subject matches the
  // value sent back in the `host` field of the `ServerCompatResponse`.
  // Self-signed certificates (and `localhost` as the subject) are allowed.
  // If false, the server should not use TLS and instead use
  // a plain-text/unencrypted socket.
  bool use_tls = 4;
  // If non-empty, the clients will use certificates to authenticate
  // themselves. This value is a PEM-encoded cert that should be
  // trusted by the server. When non-empty, the server should require
  // that clients provide certificates and they should validate that
  // the certificate presented is valid.
  //
  // This will always be empty if use_tls is false.
  bytes client_tls_cert = 5;
  // If non-zero, indicates the maximum size in bytes for a message.
  // If the client sends anything larger, the server should reject it.
  uint32 message_receive_limit = 6;

  // If use_tls is true, this provides details for a self-signed TLS
  // cert that the server may use.
  //
  // The provided certificate is only good for loopback communication:
  // it uses "localhost" and "127.0.0.1" as the IP and DNS names in
  // the certificate's subject. If the server needs a different subject
  // or the client is in an environment where configuring trust of a
  // self-signed certificate is difficult or infeasible.
  //
  // If the server implementation chooses to use these credentials,
  // it must echo back the certificate in the ServerCompatResponse and
  // should also leave the host field empty or explicitly set to
  // "127.0.0.1".
  //
  // If it chooses to use a different certificate and key, it must send
  // back the corresponding certificate in the ServerCompatResponse.
  TLSCreds server_creds = 7;
}

// The outcome of one ServerCompatRequest.
message ServerCompatResponse {
  // The host where the server is running. This should usually be `127.0.0.1`,
  // unless your program actually starts a remote server to which the client
  // should connect.
  string host = 1;
  // The port where the server is listening.
  uint32 port = 2;
  // The TLS certificate, in PEM format, if `use_tls` was set
  // to `true`. Clients will verify this certificate when connecting via TLS.
  // If `use_tls` was set to `false`, this should always be empty.
  bytes pem_cert = 3;
}
