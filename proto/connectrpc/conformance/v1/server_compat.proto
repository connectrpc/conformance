// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package connectrpc.conformance.v1;

import "connectrpc/conformance/v1/config.proto";

// Describes one configuration for an RPC server. The server is
// expected to expose the connectrpc.conformance.v1.ConformanceService
// RPC service. The configuration does not include a port. The
// process should pick an available port, which is typically
// done by using port zero (0) when creating a network listener
// so that the OS selects an available ephemeral port.
//
// These properties are read from stdin. Once the server is
// listening, details about the server, in the form of a
// ServerCompatResponse, are written to stdout.
//
// Each test process is expected to start only one RPC server.
// When testing multiple configurations, multiple test processes
// will be started, each with different properties.
message ServerCompatRequest {
  Protocol protocol = 1;
  HTTPVersion http_version = 2;
  // if true, generate a self-signed cert and include it in the
  // ServerCompatResponse along with the actual port
  bool use_tls = 4;
  // If non-empty, the clients will use certificates to authenticate
  // themselves. This value is a PEM-encoded cert that should be
  // trusted by the server. When non-empty, the server should require
  // that clients provide certificates and they should validate that
  // the certificate presented is valid.
  //
  // This will always be empty if use_tls is false.
  bytes client_tls_cert = 5;
  // If non-zero, indicates the maximum size in bytes for a message.
  // If the client sends anything larger, the server should reject it.
  uint32 message_receive_limit = 6;
}

// The outcome of one ServerCompatRequest.
message ServerCompatResponse {
  string host = 1;
  uint32 port = 2;
  // The server's PEM-encoded certificate, so the
  // client can verify it when connecting via TLS.
  bytes pem_cert = 3;
}

// The server doesn't support the requested protocol, or had a runtime error
// while starting up.
message ServerErrorResult {
  string message = 1;
}
