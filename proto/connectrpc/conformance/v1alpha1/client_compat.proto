// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package connectrpc.conformance.v1alpha1;

import "connectrpc/conformance/v1alpha1/config.proto";
import "connectrpc/conformance/v1alpha1/service.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Describes one call the client should make. The client reads
// these from stdin and, for each one, invokes an RPC as directed
// and writes the results (in the form of a ClientCompatResponse
// message) to stdout.
message ClientCompatRequest {
  string test_name = 1;
  HTTPVersion http_version = 2;
  Protocol protocol = 3;
  Codec codec = 4;
  Compression compression = 5;
  string host = 6;
  uint32 port = 7;
  // If non-empty, the server is using TLS. The bytes are the
  // server's PEM-encoded certificate, which the client should
  // verify and trust.
  bytes server_tls_cert = 8;
  string service = 9;
  string method = 10;
  StreamType stream_type = 11;
  repeated Header request_headers = 12;
  // There will be exactly one for unary and server-stream methods.
  // For client- and bidi-stream methods, all entries will have the
  // same type URL (which matches the request type of the method).
  repeated google.protobuf.Any request_messages = 13;
  optional uint32 timeout_ms = 14;
  // wait this many milliseconds before sending a request message
  // TODO - This could potentially be removed bc this is in the relevant requests
  // in the request_messages field
  uint32 response_delay_ms = 15;
  // Tells the server whether it should wait for each request
  // before sending a response.
  // If true, it indicates the server should effectively interleave the
  // stream so messages are sent in request->response pairs.
  // If false, then the response stream will be sent once all request messages
  // are finished sending with the only delays between messages
  // being the optional fixed milliseconds defined in the response
  // definition.
  // This field is only relevant in the first message in the stream
  // and should be ignored in subsequent messages.
  // Note, this is only applicable to bidi endpoints.
  // TODO - This could potentially be removed bc this is in the BidiStreamRequest
  // which would be in the request_messages field
  bool full_duplex = 16;
}

// The outcome of one ClientCompatRequest.
message ClientCompatResponse {
  string test_name = 1;
  oneof result {
    ClientResponseResult response = 2;
    ClientErrorResult error = 3;
  }
}

// The result of a ClientCompatRequest, which may or may bot be successful.
message ClientResponseResult {
  repeated Header response_headers = 1;
  repeated ConformancePayload payloads = 2;
  // The error received from the actual RPC invocation. Note this is not representative
  // of a runtime error and should always be the proto equivalent of a Connect error
  Error error = 3;
  // In case the client cannot decode Any from JSON, it should instead return the received JSON
  repeated google.protobuf.Struct error_details_raw = 7;
  repeated Header response_trailers = 4;
}

// The client is not able to fulfill the ClientCompatRequest. This may be due
// to a runtime error or an unexpected internal error such as the requested protocol
// not being supported. This is completely independent of the actual RPC invocation
message ClientErrorResult {
  string message = 1;
}
