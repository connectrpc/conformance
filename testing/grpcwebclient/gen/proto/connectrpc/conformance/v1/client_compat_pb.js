// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// source: connectrpc/conformance/v1/client_compat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var connectrpc_conformance_v1_config_pb = require('../../../connectrpc/conformance/v1/config_pb.js');
goog.object.extend(proto, connectrpc_conformance_v1_config_pb);
var connectrpc_conformance_v1_service_pb = require('../../../connectrpc/conformance/v1/service_pb.js');
goog.object.extend(proto, connectrpc_conformance_v1_service_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.CancelTimingCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientCompatResponse.ResultCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientErrorResult', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientResponseResult', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.WireDetails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientCompatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.ClientCompatRequest.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientCompatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientCompatRequest.displayName = 'proto.connectrpc.conformance.v1.ClientCompatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.displayName = 'proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.displayName = 'proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientCompatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.connectrpc.conformance.v1.ClientCompatResponse.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientCompatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientCompatResponse.displayName = 'proto.connectrpc.conformance.v1.ClientCompatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientResponseResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.ClientResponseResult.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientResponseResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientResponseResult.displayName = 'proto.connectrpc.conformance.v1.ClientResponseResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientErrorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientErrorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientErrorResult.displayName = 'proto.connectrpc.conformance.v1.ClientErrorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.WireDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.WireDetails.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.WireDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.WireDetails.displayName = 'proto.connectrpc.conformance.v1.WireDetails';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.repeatedFields_ = [15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientCompatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    testName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    httpVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    protocol: jspb.Message.getFieldWithDefault(msg, 3, 0),
    codec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    compression: jspb.Message.getFieldWithDefault(msg, 5, 0),
    host: jspb.Message.getFieldWithDefault(msg, 6, ""),
    port: jspb.Message.getFieldWithDefault(msg, 7, 0),
    serverTlsCert: msg.getServerTlsCert_asB64(),
    clientTlsCreds: (f = msg.getClientTlsCreds()) && proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.toObject(includeInstance, f),
    messageReceiveLimit: jspb.Message.getFieldWithDefault(msg, 10, 0),
    service: jspb.Message.getFieldWithDefault(msg, 11, ""),
    method: jspb.Message.getFieldWithDefault(msg, 12, ""),
    streamType: jspb.Message.getFieldWithDefault(msg, 13, 0),
    useGetHttpMethod: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    requestHeadersList: jspb.Message.toObjectList(msg.getRequestHeadersList(),
    connectrpc_conformance_v1_service_pb.Header.toObject, includeInstance),
    requestMessagesList: jspb.Message.toObjectList(msg.getRequestMessagesList(),
    google_protobuf_any_pb.Any.toObject, includeInstance),
    timeoutMs: jspb.Message.getFieldWithDefault(msg, 17, 0),
    requestDelayMs: jspb.Message.getFieldWithDefault(msg, 18, 0),
    cancel: (f = msg.getCancel()) && proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.toObject(includeInstance, f),
    rawRequest: (f = msg.getRawRequest()) && connectrpc_conformance_v1_service_pb.RawHTTPRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientCompatRequest;
  return proto.connectrpc.conformance.v1.ClientCompatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestName(value);
      break;
    case 2:
      var value = /** @type {!proto.connectrpc.conformance.v1.HTTPVersion} */ (reader.readEnum());
      msg.setHttpVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.connectrpc.conformance.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 4:
      var value = /** @type {!proto.connectrpc.conformance.v1.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 5:
      var value = /** @type {!proto.connectrpc.conformance.v1.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerTlsCert(value);
      break;
    case 9:
      var value = new proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.deserializeBinaryFromReader);
      msg.setClientTlsCreds(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageReceiveLimit(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 13:
      var value = /** @type {!proto.connectrpc.conformance.v1.StreamType} */ (reader.readEnum());
      msg.setStreamType(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseGetHttpMethod(value);
      break;
    case 15:
      var value = new connectrpc_conformance_v1_service_pb.Header;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.Header.deserializeBinaryFromReader);
      msg.addRequestHeaders(value);
      break;
    case 16:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addRequestMessages(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutMs(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestDelayMs(value);
      break;
    case 19:
      var value = new proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.deserializeBinaryFromReader);
      msg.setCancel(value);
      break;
    case 20:
      var value = new connectrpc_conformance_v1_service_pb.RawHTTPRequest;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.RawHTTPRequest.deserializeBinaryFromReader);
      msg.setRawRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientCompatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHttpVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getServerTlsCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getClientTlsCreds();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.serializeBinaryToWriter
    );
  }
  f = message.getMessageReceiveLimit();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStreamType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getUseGetHttpMethod();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getRequestHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      connectrpc_conformance_v1_service_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getRequestMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getRequestDelayMs();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getCancel();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.serializeBinaryToWriter
    );
  }
  f = message.getRawRequest();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      connectrpc_conformance_v1_service_pb.RawHTTPRequest.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.toObject = function(includeInstance, msg) {
  var f, obj = {
    cert: msg.getCert_asB64(),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds;
  return proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCert(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes cert = 1;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cert = 1;
 * This is a type-conversion wrapper around `getCert()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCert()));
};


/**
 * optional bytes cert = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCert()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.setCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.CancelTimingCase = {
  CANCEL_TIMING_NOT_SET: 0,
  BEFORE_CLOSE_SEND: 1,
  AFTER_CLOSE_SEND_MS: 2,
  AFTER_NUM_RESPONSES: 3
};

/**
 * @return {proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.CancelTimingCase}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.getCancelTimingCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.CancelTimingCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    beforeCloseSend: (f = msg.getBeforeCloseSend()) && google_protobuf_empty_pb.Empty.toObject(includeInstance, f),
    afterCloseSendMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    afterNumResponses: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel;
  return proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_empty_pb.Empty;
      reader.readMessage(value,google_protobuf_empty_pb.Empty.deserializeBinaryFromReader);
      msg.setBeforeCloseSend(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfterCloseSendMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfterNumResponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeforeCloseSend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_empty_pb.Empty.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Empty before_close_send = 1;
 * @return {?proto.google.protobuf.Empty}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.getBeforeCloseSend = function() {
  return /** @type{?proto.google.protobuf.Empty} */ (
    jspb.Message.getWrapperField(this, google_protobuf_empty_pb.Empty, 1));
};


/**
 * @param {?proto.google.protobuf.Empty|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.setBeforeCloseSend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.clearBeforeCloseSend = function() {
  return this.setBeforeCloseSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.hasBeforeCloseSend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 after_close_send_ms = 2;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.getAfterCloseSendMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.setAfterCloseSendMs = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.clearAfterCloseSendMs = function() {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.hasAfterCloseSendMs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 after_num_responses = 3;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.getAfterNumResponses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.setAfterNumResponses = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.clearAfterNumResponses = function() {
  return jspb.Message.setOneofField(this, 3, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel.prototype.hasAfterNumResponses = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string test_name = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getTestName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setTestName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional HTTPVersion http_version = 2;
 * @return {!proto.connectrpc.conformance.v1.HTTPVersion}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getHttpVersion = function() {
  return /** @type {!proto.connectrpc.conformance.v1.HTTPVersion} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.HTTPVersion} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setHttpVersion = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Protocol protocol = 3;
 * @return {!proto.connectrpc.conformance.v1.Protocol}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getProtocol = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Protocol} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Codec codec = 4;
 * @return {!proto.connectrpc.conformance.v1.Codec}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getCodec = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Codec} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Codec} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Compression compression = 5;
 * @return {!proto.connectrpc.conformance.v1.Compression}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getCompression = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Compression} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Compression} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setCompression = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string host = 6;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 port = 7;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes server_tls_cert = 8;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getServerTlsCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes server_tls_cert = 8;
 * This is a type-conversion wrapper around `getServerTlsCert()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getServerTlsCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerTlsCert()));
};


/**
 * optional bytes server_tls_cert = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerTlsCert()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getServerTlsCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerTlsCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setServerTlsCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional TLSCreds client_tls_creds = 9;
 * @return {?proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getClientTlsCreds = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds, 9));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ClientCompatRequest.TLSCreds|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setClientTlsCreds = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearClientTlsCreds = function() {
  return this.setClientTlsCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasClientTlsCreds = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 message_receive_limit = 10;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getMessageReceiveLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setMessageReceiveLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string service = 11;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setService = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearService = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string method = 12;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setMethod = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearMethod = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StreamType stream_type = 13;
 * @return {!proto.connectrpc.conformance.v1.StreamType}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getStreamType = function() {
  return /** @type {!proto.connectrpc.conformance.v1.StreamType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.StreamType} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setStreamType = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional bool use_get_http_method = 14;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getUseGetHttpMethod = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setUseGetHttpMethod = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * repeated Header request_headers = 15;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getRequestHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, connectrpc_conformance_v1_service_pb.Header, 15));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setRequestHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.addRequestHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearRequestHeadersList = function() {
  return this.setRequestHeadersList([]);
};


/**
 * repeated google.protobuf.Any request_messages = 16;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getRequestMessagesList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 16));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setRequestMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.addRequestMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearRequestMessagesList = function() {
  return this.setRequestMessagesList([]);
};


/**
 * optional uint32 timeout_ms = 17;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setTimeoutMs = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearTimeoutMs = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasTimeoutMs = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint32 request_delay_ms = 18;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getRequestDelayMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setRequestDelayMs = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional Cancel cancel = 19;
 * @return {?proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getCancel = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel, 19));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ClientCompatRequest.Cancel|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setCancel = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearCancel = function() {
  return this.setCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RawHTTPRequest raw_request = 20;
 * @return {?proto.connectrpc.conformance.v1.RawHTTPRequest}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.getRawRequest = function() {
  return /** @type{?proto.connectrpc.conformance.v1.RawHTTPRequest} */ (
    jspb.Message.getWrapperField(this, connectrpc_conformance_v1_service_pb.RawHTTPRequest, 20));
};


/**
 * @param {?proto.connectrpc.conformance.v1.RawHTTPRequest|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.setRawRequest = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.clearRawRequest = function() {
  return this.setRawRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatRequest.prototype.hasRawRequest = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  RESPONSE: 2,
  ERROR: 3
};

/**
 * @return {proto.connectrpc.conformance.v1.ClientCompatResponse.ResultCase}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.getResultCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.ClientCompatResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.ClientCompatResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientCompatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientCompatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    testName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    response: (f = msg.getResponse()) && proto.connectrpc.conformance.v1.ClientResponseResult.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.connectrpc.conformance.v1.ClientErrorResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientCompatResponse;
  return proto.connectrpc.conformance.v1.ClientCompatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestName(value);
      break;
    case 2:
      var value = new proto.connectrpc.conformance.v1.ClientResponseResult;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ClientResponseResult.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.ClientErrorResult;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ClientErrorResult.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientCompatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientCompatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.connectrpc.conformance.v1.ClientResponseResult.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.ClientErrorResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string test_name = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.getTestName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.setTestName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ClientResponseResult response = 2;
 * @return {?proto.connectrpc.conformance.v1.ClientResponseResult}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.getResponse = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ClientResponseResult} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ClientResponseResult, 2));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ClientResponseResult|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.setResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.connectrpc.conformance.v1.ClientCompatResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClientErrorResult error = 3;
 * @return {?proto.connectrpc.conformance.v1.ClientErrorResult}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.getError = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ClientErrorResult} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ClientErrorResult, 3));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ClientErrorResult|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse} returns this
*/
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.connectrpc.conformance.v1.ClientCompatResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientCompatResponse} returns this
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientCompatResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.ClientResponseResult.repeatedFields_ = [1,2,4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientResponseResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientResponseResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientResponseResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeadersList: jspb.Message.toObjectList(msg.getResponseHeadersList(),
    connectrpc_conformance_v1_service_pb.Header.toObject, includeInstance),
    payloadsList: jspb.Message.toObjectList(msg.getPayloadsList(),
    connectrpc_conformance_v1_service_pb.ConformancePayload.toObject, includeInstance),
    error: (f = msg.getError()) && connectrpc_conformance_v1_service_pb.Error.toObject(includeInstance, f),
    responseTrailersList: jspb.Message.toObjectList(msg.getResponseTrailersList(),
    connectrpc_conformance_v1_service_pb.Header.toObject, includeInstance),
    numUnsentRequests: jspb.Message.getFieldWithDefault(msg, 5, 0),
    httpStatusCode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    feedbackList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientResponseResult;
  return proto.connectrpc.conformance.v1.ClientResponseResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientResponseResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new connectrpc_conformance_v1_service_pb.Header;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.Header.deserializeBinaryFromReader);
      msg.addResponseHeaders(value);
      break;
    case 2:
      var value = new connectrpc_conformance_v1_service_pb.ConformancePayload;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.ConformancePayload.deserializeBinaryFromReader);
      msg.addPayloads(value);
      break;
    case 3:
      var value = new connectrpc_conformance_v1_service_pb.Error;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new connectrpc_conformance_v1_service_pb.Header;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.Header.deserializeBinaryFromReader);
      msg.addResponseTrailers(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumUnsentRequests(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHttpStatusCode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeedback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientResponseResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientResponseResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientResponseResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      connectrpc_conformance_v1_service_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getPayloadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      connectrpc_conformance_v1_service_pb.ConformancePayload.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      connectrpc_conformance_v1_service_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getResponseTrailersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      connectrpc_conformance_v1_service_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getNumUnsentRequests();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFeedbackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * repeated Header response_headers = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getResponseHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, connectrpc_conformance_v1_service_pb.Header, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
*/
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setResponseHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.addResponseHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearResponseHeadersList = function() {
  return this.setResponseHeadersList([]);
};


/**
 * repeated ConformancePayload payloads = 2;
 * @return {!Array<!proto.connectrpc.conformance.v1.ConformancePayload>}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getPayloadsList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.ConformancePayload>} */ (
    jspb.Message.getRepeatedWrapperField(this, connectrpc_conformance_v1_service_pb.ConformancePayload, 2));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.ConformancePayload>} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
*/
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setPayloadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.addPayloads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.connectrpc.conformance.v1.ConformancePayload, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearPayloadsList = function() {
  return this.setPayloadsList([]);
};


/**
 * optional Error error = 3;
 * @return {?proto.connectrpc.conformance.v1.Error}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getError = function() {
  return /** @type{?proto.connectrpc.conformance.v1.Error} */ (
    jspb.Message.getWrapperField(this, connectrpc_conformance_v1_service_pb.Error, 3));
};


/**
 * @param {?proto.connectrpc.conformance.v1.Error|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
*/
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Header response_trailers = 4;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getResponseTrailersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, connectrpc_conformance_v1_service_pb.Header, 4));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
*/
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setResponseTrailersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.addResponseTrailers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearResponseTrailersList = function() {
  return this.setResponseTrailersList([]);
};


/**
 * optional int32 num_unsent_requests = 5;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getNumUnsentRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setNumUnsentRequests = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 http_status_code = 6;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getHttpStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setHttpStatusCode = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearHttpStatusCode = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.hasHttpStatusCode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string feedback = 7;
 * @return {!Array<string>}
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.getFeedbackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.setFeedbackList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.addFeedback = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ClientResponseResult} returns this
 */
proto.connectrpc.conformance.v1.ClientResponseResult.prototype.clearFeedbackList = function() {
  return this.setFeedbackList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientErrorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientErrorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientErrorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientErrorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientErrorResult}
 */
proto.connectrpc.conformance.v1.ClientErrorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientErrorResult;
  return proto.connectrpc.conformance.v1.ClientErrorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientErrorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientErrorResult}
 */
proto.connectrpc.conformance.v1.ClientErrorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientErrorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientErrorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientErrorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientErrorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientErrorResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.ClientErrorResult} returns this
 */
proto.connectrpc.conformance.v1.ClientErrorResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.WireDetails.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.WireDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.WireDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.WireDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualStatusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectErrorRaw: (f = msg.getConnectErrorRaw()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    actualHttpTrailersList: jspb.Message.toObjectList(msg.getActualHttpTrailersList(),
    connectrpc_conformance_v1_service_pb.Header.toObject, includeInstance),
    actualGrpcwebTrailers: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.WireDetails}
 */
proto.connectrpc.conformance.v1.WireDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.WireDetails;
  return proto.connectrpc.conformance.v1.WireDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.WireDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.WireDetails}
 */
proto.connectrpc.conformance.v1.WireDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActualStatusCode(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setConnectErrorRaw(value);
      break;
    case 3:
      var value = new connectrpc_conformance_v1_service_pb.Header;
      reader.readMessage(value,connectrpc_conformance_v1_service_pb.Header.deserializeBinaryFromReader);
      msg.addActualHttpTrailers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActualGrpcwebTrailers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.WireDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.WireDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.WireDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualStatusCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConnectErrorRaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getActualHttpTrailersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      connectrpc_conformance_v1_service_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 actual_status_code = 1;
 * @return {number}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.getActualStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.setActualStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Struct connect_error_raw = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.getConnectErrorRaw = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
*/
proto.connectrpc.conformance.v1.WireDetails.prototype.setConnectErrorRaw = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.clearConnectErrorRaw = function() {
  return this.setConnectErrorRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.hasConnectErrorRaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Header actual_http_trailers = 3;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.getActualHttpTrailersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, connectrpc_conformance_v1_service_pb.Header, 3));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
*/
proto.connectrpc.conformance.v1.WireDetails.prototype.setActualHttpTrailersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.addActualHttpTrailers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.clearActualHttpTrailersList = function() {
  return this.setActualHttpTrailersList([]);
};


/**
 * optional string actual_grpcweb_trailers = 4;
 * @return {string}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.getActualGrpcwebTrailers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.setActualGrpcwebTrailers = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.WireDetails} returns this
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.clearActualGrpcwebTrailers = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.WireDetails.prototype.hasActualGrpcwebTrailers = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.connectrpc.conformance.v1);
