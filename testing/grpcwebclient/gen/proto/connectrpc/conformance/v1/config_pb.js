// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// source: connectrpc/conformance/v1/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.connectrpc.conformance.v1.Code', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Codec', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Compression', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Config', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ConfigCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Features', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.HTTPVersion', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Protocol', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.StreamType', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.TLSCreds', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.Config.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.Config.displayName = 'proto.connectrpc.conformance.v1.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.Features = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.Features.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.Features, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.Features.displayName = 'proto.connectrpc.conformance.v1.Features';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ConfigCase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ConfigCase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ConfigCase.displayName = 'proto.connectrpc.conformance.v1.ConfigCase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.TLSCreds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.TLSCreds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.TLSCreds.displayName = 'proto.connectrpc.conformance.v1.TLSCreds';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.Config.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    features: (f = msg.getFeatures()) && proto.connectrpc.conformance.v1.Features.toObject(includeInstance, f),
    includeCasesList: jspb.Message.toObjectList(msg.getIncludeCasesList(),
    proto.connectrpc.conformance.v1.ConfigCase.toObject, includeInstance),
    excludeCasesList: jspb.Message.toObjectList(msg.getExcludeCasesList(),
    proto.connectrpc.conformance.v1.ConfigCase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.Config}
 */
proto.connectrpc.conformance.v1.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.Config;
  return proto.connectrpc.conformance.v1.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.Config}
 */
proto.connectrpc.conformance.v1.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.Features;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Features.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    case 2:
      var value = new proto.connectrpc.conformance.v1.ConfigCase;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConfigCase.deserializeBinaryFromReader);
      msg.addIncludeCases(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.ConfigCase;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConfigCase.deserializeBinaryFromReader);
      msg.addExcludeCases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.Features.serializeBinaryToWriter
    );
  }
  f = message.getIncludeCasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.connectrpc.conformance.v1.ConfigCase.serializeBinaryToWriter
    );
  }
  f = message.getExcludeCasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.ConfigCase.serializeBinaryToWriter
    );
  }
};


/**
 * optional Features features = 1;
 * @return {?proto.connectrpc.conformance.v1.Features}
 */
proto.connectrpc.conformance.v1.Config.prototype.getFeatures = function() {
  return /** @type{?proto.connectrpc.conformance.v1.Features} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.Features, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.Features|undefined} value
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
*/
proto.connectrpc.conformance.v1.Config.prototype.setFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
 */
proto.connectrpc.conformance.v1.Config.prototype.clearFeatures = function() {
  return this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Config.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ConfigCase include_cases = 2;
 * @return {!Array<!proto.connectrpc.conformance.v1.ConfigCase>}
 */
proto.connectrpc.conformance.v1.Config.prototype.getIncludeCasesList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.ConfigCase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.ConfigCase, 2));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.ConfigCase>} value
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
*/
proto.connectrpc.conformance.v1.Config.prototype.setIncludeCasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.ConfigCase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.ConfigCase}
 */
proto.connectrpc.conformance.v1.Config.prototype.addIncludeCases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.connectrpc.conformance.v1.ConfigCase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
 */
proto.connectrpc.conformance.v1.Config.prototype.clearIncludeCasesList = function() {
  return this.setIncludeCasesList([]);
};


/**
 * repeated ConfigCase exclude_cases = 3;
 * @return {!Array<!proto.connectrpc.conformance.v1.ConfigCase>}
 */
proto.connectrpc.conformance.v1.Config.prototype.getExcludeCasesList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.ConfigCase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.ConfigCase, 3));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.ConfigCase>} value
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
*/
proto.connectrpc.conformance.v1.Config.prototype.setExcludeCasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.ConfigCase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.ConfigCase}
 */
proto.connectrpc.conformance.v1.Config.prototype.addExcludeCases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.connectrpc.conformance.v1.ConfigCase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Config} returns this
 */
proto.connectrpc.conformance.v1.Config.prototype.clearExcludeCasesList = function() {
  return this.setExcludeCasesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.Features.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.Features.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.Features.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.Features} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Features.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    protocolsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    codecsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    compressionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    streamTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    supportsH2c: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    supportsTls: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    supportsTlsClientCerts: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    supportsTrailers: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    supportsHalfDuplexBidiOverHttp1: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    supportsConnectGet: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    supportsMessageReceiveLimit: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.Features}
 */
proto.connectrpc.conformance.v1.Features.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.Features;
  return proto.connectrpc.conformance.v1.Features.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.Features} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.Features}
 */
proto.connectrpc.conformance.v1.Features.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.connectrpc.conformance.v1.HTTPVersion>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVersions(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<!proto.connectrpc.conformance.v1.Protocol>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProtocols(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<!proto.connectrpc.conformance.v1.Codec>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCodecs(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<!proto.connectrpc.conformance.v1.Compression>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCompressions(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<!proto.connectrpc.conformance.v1.StreamType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStreamTypes(values[i]);
      }
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsH2c(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsTls(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsTlsClientCerts(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsTrailers(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsHalfDuplexBidiOverHttp1(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsConnectGet(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsMessageReceiveLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.Features.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.Features.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.Features} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Features.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getCodecsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getCompressionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getStreamTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * repeated HTTPVersion versions = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.HTTPVersion>}
 */
proto.connectrpc.conformance.v1.Features.prototype.getVersionsList = function() {
  return /** @type {!Array<!proto.connectrpc.conformance.v1.HTTPVersion>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.HTTPVersion>} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setVersionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.connectrpc.conformance.v1.HTTPVersion} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.addVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * repeated Protocol protocols = 2;
 * @return {!Array<!proto.connectrpc.conformance.v1.Protocol>}
 */
proto.connectrpc.conformance.v1.Features.prototype.getProtocolsList = function() {
  return /** @type {!Array<!proto.connectrpc.conformance.v1.Protocol>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Protocol>} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setProtocolsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Protocol} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.addProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * repeated Codec codecs = 3;
 * @return {!Array<!proto.connectrpc.conformance.v1.Codec>}
 */
proto.connectrpc.conformance.v1.Features.prototype.getCodecsList = function() {
  return /** @type {!Array<!proto.connectrpc.conformance.v1.Codec>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Codec>} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setCodecsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Codec} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.addCodecs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearCodecsList = function() {
  return this.setCodecsList([]);
};


/**
 * repeated Compression compressions = 4;
 * @return {!Array<!proto.connectrpc.conformance.v1.Compression>}
 */
proto.connectrpc.conformance.v1.Features.prototype.getCompressionsList = function() {
  return /** @type {!Array<!proto.connectrpc.conformance.v1.Compression>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Compression>} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setCompressionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Compression} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.addCompressions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearCompressionsList = function() {
  return this.setCompressionsList([]);
};


/**
 * repeated StreamType stream_types = 5;
 * @return {!Array<!proto.connectrpc.conformance.v1.StreamType>}
 */
proto.connectrpc.conformance.v1.Features.prototype.getStreamTypesList = function() {
  return /** @type {!Array<!proto.connectrpc.conformance.v1.StreamType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.StreamType>} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setStreamTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.connectrpc.conformance.v1.StreamType} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.addStreamTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearStreamTypesList = function() {
  return this.setStreamTypesList([]);
};


/**
 * optional bool supports_h2c = 6;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsH2c = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsH2c = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsH2c = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsH2c = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool supports_tls = 7;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsTls = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsTls = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsTls = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool supports_tls_client_certs = 8;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsTlsClientCerts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsTlsClientCerts = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsTlsClientCerts = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsTlsClientCerts = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool supports_trailers = 9;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsTrailers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsTrailers = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsTrailers = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsTrailers = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool supports_half_duplex_bidi_over_http1 = 10;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsHalfDuplexBidiOverHttp1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsHalfDuplexBidiOverHttp1 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsHalfDuplexBidiOverHttp1 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsHalfDuplexBidiOverHttp1 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool supports_connect_get = 11;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsConnectGet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsConnectGet = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsConnectGet = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsConnectGet = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool supports_message_receive_limit = 12;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.getSupportsMessageReceiveLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.setSupportsMessageReceiveLimit = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Features} returns this
 */
proto.connectrpc.conformance.v1.Features.prototype.clearSupportsMessageReceiveLimit = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Features.prototype.hasSupportsMessageReceiveLimit = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ConfigCase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ConfigCase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConfigCase.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, 0),
    codec: jspb.Message.getFieldWithDefault(msg, 3, 0),
    compression: jspb.Message.getFieldWithDefault(msg, 4, 0),
    streamType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    useTls: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    useTlsClientCerts: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    useMessageReceiveLimit: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ConfigCase}
 */
proto.connectrpc.conformance.v1.ConfigCase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ConfigCase;
  return proto.connectrpc.conformance.v1.ConfigCase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ConfigCase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ConfigCase}
 */
proto.connectrpc.conformance.v1.ConfigCase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connectrpc.conformance.v1.HTTPVersion} */ (reader.readEnum());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.connectrpc.conformance.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 3:
      var value = /** @type {!proto.connectrpc.conformance.v1.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 4:
      var value = /** @type {!proto.connectrpc.conformance.v1.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 5:
      var value = /** @type {!proto.connectrpc.conformance.v1.StreamType} */ (reader.readEnum());
      msg.setStreamType(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTls(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTlsClientCerts(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseMessageReceiveLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ConfigCase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ConfigCase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConfigCase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStreamType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional HTTPVersion version = 1;
 * @return {!proto.connectrpc.conformance.v1.HTTPVersion}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getVersion = function() {
  return /** @type {!proto.connectrpc.conformance.v1.HTTPVersion} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.HTTPVersion} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setVersion = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Protocol protocol = 2;
 * @return {!proto.connectrpc.conformance.v1.Protocol}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getProtocol = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Protocol} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Codec codec = 3;
 * @return {!proto.connectrpc.conformance.v1.Codec}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getCodec = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Codec} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Codec} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Compression compression = 4;
 * @return {!proto.connectrpc.conformance.v1.Compression}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getCompression = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Compression} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Compression} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setCompression = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional StreamType stream_type = 5;
 * @return {!proto.connectrpc.conformance.v1.StreamType}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getStreamType = function() {
  return /** @type {!proto.connectrpc.conformance.v1.StreamType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.StreamType} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setStreamType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool use_tls = 6;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getUseTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setUseTls = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.clearUseTls = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.hasUseTls = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool use_tls_client_certs = 7;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getUseTlsClientCerts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setUseTlsClientCerts = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.clearUseTlsClientCerts = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.hasUseTlsClientCerts = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool use_message_receive_limit = 8;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.getUseMessageReceiveLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.setUseMessageReceiveLimit = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConfigCase} returns this
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.clearUseMessageReceiveLimit = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConfigCase.prototype.hasUseMessageReceiveLimit = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.TLSCreds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.TLSCreds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.TLSCreds.toObject = function(includeInstance, msg) {
  var f, obj = {
    cert: msg.getCert_asB64(),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.TLSCreds}
 */
proto.connectrpc.conformance.v1.TLSCreds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.TLSCreds;
  return proto.connectrpc.conformance.v1.TLSCreds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.TLSCreds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.TLSCreds}
 */
proto.connectrpc.conformance.v1.TLSCreds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCert(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.TLSCreds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.TLSCreds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.TLSCreds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes cert = 1;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cert = 1;
 * This is a type-conversion wrapper around `getCert()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCert()));
};


/**
 * optional bytes cert = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCert()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.TLSCreds} returns this
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.setCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.TLSCreds} returns this
 */
proto.connectrpc.conformance.v1.TLSCreds.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.HTTPVersion = {
  HTTP_VERSION_UNSPECIFIED: 0,
  HTTP_VERSION_1: 1,
  HTTP_VERSION_2: 2,
  HTTP_VERSION_3: 3
};

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.Protocol = {
  PROTOCOL_UNSPECIFIED: 0,
  PROTOCOL_CONNECT: 1,
  PROTOCOL_GRPC: 2,
  PROTOCOL_GRPC_WEB: 3
};

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.Codec = {
  CODEC_UNSPECIFIED: 0,
  CODEC_PROTO: 1,
  CODEC_JSON: 2,
  CODEC_TEXT: 3
};

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.Compression = {
  COMPRESSION_UNSPECIFIED: 0,
  COMPRESSION_IDENTITY: 1,
  COMPRESSION_GZIP: 2,
  COMPRESSION_BR: 3,
  COMPRESSION_ZSTD: 4,
  COMPRESSION_DEFLATE: 5,
  COMPRESSION_SNAPPY: 6
};

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.StreamType = {
  STREAM_TYPE_UNSPECIFIED: 0,
  STREAM_TYPE_UNARY: 1,
  STREAM_TYPE_CLIENT_STREAM: 2,
  STREAM_TYPE_SERVER_STREAM: 3,
  STREAM_TYPE_HALF_DUPLEX_BIDI_STREAM: 4,
  STREAM_TYPE_FULL_DUPLEX_BIDI_STREAM: 5
};

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.Code = {
  CODE_UNSPECIFIED: 0,
  CODE_CANCELED: 1,
  CODE_UNKNOWN: 2,
  CODE_INVALID_ARGUMENT: 3,
  CODE_DEADLINE_EXCEEDED: 4,
  CODE_NOT_FOUND: 5,
  CODE_ALREADY_EXISTS: 6,
  CODE_PERMISSION_DENIED: 7,
  CODE_RESOURCE_EXHAUSTED: 8,
  CODE_FAILED_PRECONDITION: 9,
  CODE_ABORTED: 10,
  CODE_OUT_OF_RANGE: 11,
  CODE_UNIMPLEMENTED: 12,
  CODE_INTERNAL: 13,
  CODE_UNAVAILABLE: 14,
  CODE_DATA_LOSS: 15,
  CODE_UNAUTHENTICATED: 16
};

goog.object.extend(exports, proto.connectrpc.conformance.v1);
