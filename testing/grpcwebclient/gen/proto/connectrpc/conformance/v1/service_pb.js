// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// source: connectrpc/conformance/v1/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var connectrpc_conformance_v1_config_pb = require('../../../connectrpc/conformance/v1/config_pb.js');
goog.object.extend(proto, connectrpc_conformance_v1_config_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.connectrpc.conformance.v1.BidiStreamRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.BidiStreamResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientStreamRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ClientStreamResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ConformancePayload', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Error', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.Header', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.IdempotentUnaryRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.IdempotentUnaryResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.MessageContents', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.MessageContents.DataCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.RawHTTPRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.RawHTTPRequest.BodyCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.RawHTTPResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.RawHTTPResponse.BodyCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ServerStreamRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.ServerStreamResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.StreamContents', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.StreamContents.StreamItem', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.StreamResponseDefinition', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnaryRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnaryResponse', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnaryResponseDefinition', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnaryResponseDefinition.ResponseCase', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnimplementedRequest', null, global);
goog.exportSymbol('proto.connectrpc.conformance.v1.UnimplementedResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.UnaryResponseDefinition.repeatedFields_, proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.UnaryResponseDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.UnaryResponseDefinition.displayName = 'proto.connectrpc.conformance.v1.UnaryResponseDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.StreamResponseDefinition.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.StreamResponseDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.StreamResponseDefinition.displayName = 'proto.connectrpc.conformance.v1.StreamResponseDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.UnaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.UnaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.UnaryRequest.displayName = 'proto.connectrpc.conformance.v1.UnaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.UnaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.UnaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.UnaryResponse.displayName = 'proto.connectrpc.conformance.v1.UnaryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.IdempotentUnaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.IdempotentUnaryRequest.displayName = 'proto.connectrpc.conformance.v1.IdempotentUnaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.IdempotentUnaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.IdempotentUnaryResponse.displayName = 'proto.connectrpc.conformance.v1.IdempotentUnaryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ServerStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ServerStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ServerStreamRequest.displayName = 'proto.connectrpc.conformance.v1.ServerStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ServerStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ServerStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ServerStreamResponse.displayName = 'proto.connectrpc.conformance.v1.ServerStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientStreamRequest.displayName = 'proto.connectrpc.conformance.v1.ClientStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ClientStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ClientStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ClientStreamResponse.displayName = 'proto.connectrpc.conformance.v1.ClientStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.BidiStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.BidiStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.BidiStreamRequest.displayName = 'proto.connectrpc.conformance.v1.BidiStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.BidiStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.BidiStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.BidiStreamResponse.displayName = 'proto.connectrpc.conformance.v1.BidiStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.UnimplementedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.UnimplementedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.UnimplementedRequest.displayName = 'proto.connectrpc.conformance.v1.UnimplementedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.UnimplementedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.UnimplementedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.UnimplementedResponse.displayName = 'proto.connectrpc.conformance.v1.UnimplementedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ConformancePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ConformancePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ConformancePayload.displayName = 'proto.connectrpc.conformance.v1.ConformancePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.displayName = 'proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.displayName = 'proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.Error.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.Error.displayName = 'proto.connectrpc.conformance.v1.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.Header.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.Header.displayName = 'proto.connectrpc.conformance.v1.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.RawHTTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.RawHTTPRequest.repeatedFields_, proto.connectrpc.conformance.v1.RawHTTPRequest.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.RawHTTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.RawHTTPRequest.displayName = 'proto.connectrpc.conformance.v1.RawHTTPRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.displayName = 'proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.MessageContents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.MessageContents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.MessageContents.displayName = 'proto.connectrpc.conformance.v1.MessageContents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.StreamContents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.StreamContents.repeatedFields_, null);
};
goog.inherits(proto.connectrpc.conformance.v1.StreamContents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.StreamContents.displayName = 'proto.connectrpc.conformance.v1.StreamContents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connectrpc.conformance.v1.StreamContents.StreamItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.StreamContents.StreamItem.displayName = 'proto.connectrpc.conformance.v1.StreamContents.StreamItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connectrpc.conformance.v1.RawHTTPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connectrpc.conformance.v1.RawHTTPResponse.repeatedFields_, proto.connectrpc.conformance.v1.RawHTTPResponse.oneofGroups_);
};
goog.inherits(proto.connectrpc.conformance.v1.RawHTTPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connectrpc.conformance.v1.RawHTTPResponse.displayName = 'proto.connectrpc.conformance.v1.RawHTTPResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.repeatedFields_ = [1,4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RESPONSE_DATA: 2,
  ERROR: 3
};

/**
 * @return {proto.connectrpc.conformance.v1.UnaryResponseDefinition.ResponseCase}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.UnaryResponseDefinition.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.UnaryResponseDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeadersList: jspb.Message.toObjectList(msg.getResponseHeadersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    responseData: msg.getResponseData_asB64(),
    error: (f = msg.getError()) && proto.connectrpc.conformance.v1.Error.toObject(includeInstance, f),
    responseTrailersList: jspb.Message.toObjectList(msg.getResponseTrailersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    responseDelayMs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rawResponse: (f = msg.getRawResponse()) && proto.connectrpc.conformance.v1.RawHTTPResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.UnaryResponseDefinition;
  return proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addResponseHeaders(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponseData(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.Error;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addResponseTrailers(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResponseDelayMs(value);
      break;
    case 5:
      var value = new proto.connectrpc.conformance.v1.RawHTTPResponse;
      reader.readMessage(value,proto.connectrpc.conformance.v1.RawHTTPResponse.deserializeBinaryFromReader);
      msg.setRawResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.UnaryResponseDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.Error.serializeBinaryToWriter
    );
  }
  f = message.getResponseTrailersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getResponseDelayMs();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRawResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.connectrpc.conformance.v1.RawHTTPResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Header response_headers = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setResponseHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.addResponseHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.clearResponseHeadersList = function() {
  return this.setResponseHeadersList([]);
};


/**
 * optional bytes response_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes response_data = 2;
 * This is a type-conversion wrapper around `getResponseData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponseData()));
};


/**
 * optional bytes response_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponseData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponseData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setResponseData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.clearResponseData = function() {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.hasResponseData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.connectrpc.conformance.v1.Error}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getError = function() {
  return /** @type{?proto.connectrpc.conformance.v1.Error} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.Error, 3));
};


/**
 * @param {?proto.connectrpc.conformance.v1.Error|undefined} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.connectrpc.conformance.v1.UnaryResponseDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Header response_trailers = 4;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseTrailersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 4));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setResponseTrailersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.addResponseTrailers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.clearResponseTrailersList = function() {
  return this.setResponseTrailersList([]);
};


/**
 * optional uint32 response_delay_ms = 6;
 * @return {number}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getResponseDelayMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setResponseDelayMs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional RawHTTPResponse raw_response = 5;
 * @return {?proto.connectrpc.conformance.v1.RawHTTPResponse}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.getRawResponse = function() {
  return /** @type{?proto.connectrpc.conformance.v1.RawHTTPResponse} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.RawHTTPResponse, 5));
};


/**
 * @param {?proto.connectrpc.conformance.v1.RawHTTPResponse|undefined} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.setRawResponse = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.clearRawResponse = function() {
  return this.setRawResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.UnaryResponseDefinition.prototype.hasRawResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.StreamResponseDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.StreamResponseDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseHeadersList: jspb.Message.toObjectList(msg.getResponseHeadersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    responseDataList: msg.getResponseDataList_asB64(),
    responseDelayMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    error: (f = msg.getError()) && proto.connectrpc.conformance.v1.Error.toObject(includeInstance, f),
    responseTrailersList: jspb.Message.toObjectList(msg.getResponseTrailersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    rawResponse: (f = msg.getRawResponse()) && proto.connectrpc.conformance.v1.RawHTTPResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.StreamResponseDefinition;
  return proto.connectrpc.conformance.v1.StreamResponseDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.StreamResponseDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addResponseHeaders(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addResponseData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResponseDelayMs(value);
      break;
    case 4:
      var value = new proto.connectrpc.conformance.v1.Error;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addResponseTrailers(value);
      break;
    case 6:
      var value = new proto.connectrpc.conformance.v1.RawHTTPResponse;
      reader.readMessage(value,proto.connectrpc.conformance.v1.RawHTTPResponse.deserializeBinaryFromReader);
      msg.setRawResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.StreamResponseDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.StreamResponseDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getResponseDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getResponseDelayMs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.connectrpc.conformance.v1.Error.serializeBinaryToWriter
    );
  }
  f = message.getResponseTrailersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getRawResponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.connectrpc.conformance.v1.RawHTTPResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Header response_headers = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setResponseHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.addResponseHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.clearResponseHeadersList = function() {
  return this.setResponseHeadersList([]);
};


/**
 * repeated bytes response_data = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes response_data = 2;
 * This is a type-conversion wrapper around `getResponseDataList()`
 * @return {!Array<string>}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getResponseDataList()));
};


/**
 * repeated bytes response_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponseDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getResponseDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setResponseDataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.addResponseData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.clearResponseDataList = function() {
  return this.setResponseDataList([]);
};


/**
 * optional uint32 response_delay_ms = 3;
 * @return {number}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseDelayMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setResponseDelayMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Error error = 4;
 * @return {?proto.connectrpc.conformance.v1.Error}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getError = function() {
  return /** @type{?proto.connectrpc.conformance.v1.Error} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.Error, 4));
};


/**
 * @param {?proto.connectrpc.conformance.v1.Error|undefined} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Header response_trailers = 5;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getResponseTrailersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 5));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setResponseTrailersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.addResponseTrailers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.clearResponseTrailersList = function() {
  return this.setResponseTrailersList([]);
};


/**
 * optional RawHTTPResponse raw_response = 6;
 * @return {?proto.connectrpc.conformance.v1.RawHTTPResponse}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.getRawResponse = function() {
  return /** @type{?proto.connectrpc.conformance.v1.RawHTTPResponse} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.RawHTTPResponse, 6));
};


/**
 * @param {?proto.connectrpc.conformance.v1.RawHTTPResponse|undefined} value
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
*/
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.setRawResponse = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.StreamResponseDefinition} returns this
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.clearRawResponse = function() {
  return this.setRawResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.StreamResponseDefinition.prototype.hasRawResponse = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.UnaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.UnaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseDefinition: (f = msg.getResponseDefinition()) && proto.connectrpc.conformance.v1.UnaryResponseDefinition.toObject(includeInstance, f),
    requestData: msg.getRequestData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.UnaryRequest}
 */
proto.connectrpc.conformance.v1.UnaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.UnaryRequest;
  return proto.connectrpc.conformance.v1.UnaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.UnaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.UnaryRequest}
 */
proto.connectrpc.conformance.v1.UnaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.UnaryResponseDefinition;
      reader.readMessage(value,proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinaryFromReader);
      msg.setResponseDefinition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.UnaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.UnaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.UnaryResponseDefinition.serializeBinaryToWriter
    );
  }
  f = message.getRequestData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional UnaryResponseDefinition response_definition = 1;
 * @return {?proto.connectrpc.conformance.v1.UnaryResponseDefinition}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.getResponseDefinition = function() {
  return /** @type{?proto.connectrpc.conformance.v1.UnaryResponseDefinition} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.UnaryResponseDefinition, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.UnaryResponseDefinition|undefined} value
 * @return {!proto.connectrpc.conformance.v1.UnaryRequest} returns this
*/
proto.connectrpc.conformance.v1.UnaryRequest.prototype.setResponseDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.UnaryRequest} returns this
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.clearResponseDefinition = function() {
  return this.setResponseDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.hasResponseDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes request_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.getRequestData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes request_data = 2;
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.getRequestData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestData()));
};


/**
 * optional bytes request_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.getRequestData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.UnaryRequest} returns this
 */
proto.connectrpc.conformance.v1.UnaryRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.UnaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.UnaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.UnaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.ConformancePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponse}
 */
proto.connectrpc.conformance.v1.UnaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.UnaryResponse;
  return proto.connectrpc.conformance.v1.UnaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.UnaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponse}
 */
proto.connectrpc.conformance.v1.UnaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.UnaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.UnaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConformancePayload payload = 1;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.UnaryResponse.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload|undefined} value
 * @return {!proto.connectrpc.conformance.v1.UnaryResponse} returns this
*/
proto.connectrpc.conformance.v1.UnaryResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.UnaryResponse} returns this
 */
proto.connectrpc.conformance.v1.UnaryResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.UnaryResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.IdempotentUnaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseDefinition: (f = msg.getResponseDefinition()) && proto.connectrpc.conformance.v1.UnaryResponseDefinition.toObject(includeInstance, f),
    requestData: msg.getRequestData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.IdempotentUnaryRequest;
  return proto.connectrpc.conformance.v1.IdempotentUnaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.UnaryResponseDefinition;
      reader.readMessage(value,proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinaryFromReader);
      msg.setResponseDefinition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.IdempotentUnaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.UnaryResponseDefinition.serializeBinaryToWriter
    );
  }
  f = message.getRequestData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional UnaryResponseDefinition response_definition = 1;
 * @return {?proto.connectrpc.conformance.v1.UnaryResponseDefinition}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.getResponseDefinition = function() {
  return /** @type{?proto.connectrpc.conformance.v1.UnaryResponseDefinition} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.UnaryResponseDefinition, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.UnaryResponseDefinition|undefined} value
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} returns this
*/
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.setResponseDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} returns this
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.clearResponseDefinition = function() {
  return this.setResponseDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.hasResponseDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes request_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.getRequestData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes request_data = 2;
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.getRequestData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestData()));
};


/**
 * optional bytes request_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.getRequestData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryRequest} returns this
 */
proto.connectrpc.conformance.v1.IdempotentUnaryRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.IdempotentUnaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.ConformancePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.IdempotentUnaryResponse;
  return proto.connectrpc.conformance.v1.IdempotentUnaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.IdempotentUnaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConformancePayload payload = 1;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload|undefined} value
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse} returns this
*/
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.IdempotentUnaryResponse} returns this
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.IdempotentUnaryResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ServerStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ServerStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseDefinition: (f = msg.getResponseDefinition()) && proto.connectrpc.conformance.v1.StreamResponseDefinition.toObject(includeInstance, f),
    requestData: msg.getRequestData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamRequest}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ServerStreamRequest;
  return proto.connectrpc.conformance.v1.ServerStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ServerStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamRequest}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.StreamResponseDefinition;
      reader.readMessage(value,proto.connectrpc.conformance.v1.StreamResponseDefinition.deserializeBinaryFromReader);
      msg.setResponseDefinition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ServerStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ServerStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.StreamResponseDefinition.serializeBinaryToWriter
    );
  }
  f = message.getRequestData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StreamResponseDefinition response_definition = 1;
 * @return {?proto.connectrpc.conformance.v1.StreamResponseDefinition}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.getResponseDefinition = function() {
  return /** @type{?proto.connectrpc.conformance.v1.StreamResponseDefinition} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.StreamResponseDefinition, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.StreamResponseDefinition|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ServerStreamRequest} returns this
*/
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.setResponseDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.clearResponseDefinition = function() {
  return this.setResponseDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.hasResponseDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes request_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.getRequestData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes request_data = 2;
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.getRequestData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestData()));
};


/**
 * optional bytes request_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.getRequestData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ServerStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.ServerStreamRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ServerStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ServerStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.ConformancePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamResponse}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ServerStreamResponse;
  return proto.connectrpc.conformance.v1.ServerStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ServerStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamResponse}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ServerStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ServerStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConformancePayload payload = 1;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ServerStreamResponse} returns this
*/
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ServerStreamResponse} returns this
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ServerStreamResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseDefinition: (f = msg.getResponseDefinition()) && proto.connectrpc.conformance.v1.UnaryResponseDefinition.toObject(includeInstance, f),
    requestData: msg.getRequestData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamRequest}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientStreamRequest;
  return proto.connectrpc.conformance.v1.ClientStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamRequest}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.UnaryResponseDefinition;
      reader.readMessage(value,proto.connectrpc.conformance.v1.UnaryResponseDefinition.deserializeBinaryFromReader);
      msg.setResponseDefinition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.UnaryResponseDefinition.serializeBinaryToWriter
    );
  }
  f = message.getRequestData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional UnaryResponseDefinition response_definition = 1;
 * @return {?proto.connectrpc.conformance.v1.UnaryResponseDefinition}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.getResponseDefinition = function() {
  return /** @type{?proto.connectrpc.conformance.v1.UnaryResponseDefinition} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.UnaryResponseDefinition, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.UnaryResponseDefinition|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientStreamRequest} returns this
*/
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.setResponseDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.clearResponseDefinition = function() {
  return this.setResponseDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.hasResponseDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes request_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.getRequestData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes request_data = 2;
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.getRequestData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestData()));
};


/**
 * optional bytes request_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.getRequestData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ClientStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.ClientStreamRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ClientStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ClientStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.ConformancePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamResponse}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ClientStreamResponse;
  return proto.connectrpc.conformance.v1.ClientStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ClientStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamResponse}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ClientStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ClientStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConformancePayload payload = 1;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ClientStreamResponse} returns this
*/
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ClientStreamResponse} returns this
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ClientStreamResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.BidiStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.BidiStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseDefinition: (f = msg.getResponseDefinition()) && proto.connectrpc.conformance.v1.StreamResponseDefinition.toObject(includeInstance, f),
    fullDuplex: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    requestData: msg.getRequestData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.BidiStreamRequest;
  return proto.connectrpc.conformance.v1.BidiStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.BidiStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.StreamResponseDefinition;
      reader.readMessage(value,proto.connectrpc.conformance.v1.StreamResponseDefinition.deserializeBinaryFromReader);
      msg.setResponseDefinition(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullDuplex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.BidiStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.BidiStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.StreamResponseDefinition.serializeBinaryToWriter
    );
  }
  f = message.getFullDuplex();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRequestData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional StreamResponseDefinition response_definition = 1;
 * @return {?proto.connectrpc.conformance.v1.StreamResponseDefinition}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.getResponseDefinition = function() {
  return /** @type{?proto.connectrpc.conformance.v1.StreamResponseDefinition} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.StreamResponseDefinition, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.StreamResponseDefinition|undefined} value
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest} returns this
*/
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.setResponseDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.clearResponseDefinition = function() {
  return this.setResponseDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.hasResponseDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool full_duplex = 2;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.getFullDuplex = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.setFullDuplex = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes request_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.getRequestData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes request_data = 3;
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.getRequestData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestData()));
};


/**
 * optional bytes request_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.getRequestData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.BidiStreamRequest} returns this
 */
proto.connectrpc.conformance.v1.BidiStreamRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.BidiStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.BidiStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.ConformancePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamResponse}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.BidiStreamResponse;
  return proto.connectrpc.conformance.v1.BidiStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.BidiStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamResponse}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.BidiStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.BidiStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConformancePayload payload = 1;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload, 1));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload|undefined} value
 * @return {!proto.connectrpc.conformance.v1.BidiStreamResponse} returns this
*/
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.BidiStreamResponse} returns this
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.BidiStreamResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.UnimplementedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.UnimplementedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.UnimplementedRequest}
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.UnimplementedRequest;
  return proto.connectrpc.conformance.v1.UnimplementedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.UnimplementedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.UnimplementedRequest}
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.UnimplementedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.UnimplementedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnimplementedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.UnimplementedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.UnimplementedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.UnimplementedResponse}
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.UnimplementedResponse;
  return proto.connectrpc.conformance.v1.UnimplementedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.UnimplementedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.UnimplementedResponse}
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.UnimplementedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.UnimplementedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.UnimplementedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ConformancePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    requestInfo: (f = msg.getRequestInfo()) && proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ConformancePayload;
  return proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload}
 */
proto.connectrpc.conformance.v1.ConformancePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.deserializeBinaryFromReader);
      msg.setRequestInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRequestInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeadersList: jspb.Message.toObjectList(msg.getRequestHeadersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    timeoutMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance),
    connectGetInfo: (f = msg.getConnectGetInfo()) && proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo;
  return proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addRequestHeaders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeoutMs(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    case 4:
      var value = new proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo;
      reader.readMessage(value,proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.deserializeBinaryFromReader);
      msg.setConnectGetInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getConnectGetInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Header request_headers = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.getRequestHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
*/
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.setRequestHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.addRequestHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.clearRequestHeadersList = function() {
  return this.setRequestHeadersList([]);
};


/**
 * optional int64 timeout_ms = 2;
 * @return {number}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.getTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.setTimeoutMs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.clearTimeoutMs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.hasTimeoutMs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated google.protobuf.Any requests = 3;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
*/
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};


/**
 * optional ConnectGetInfo connect_get_info = 4;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.getConnectGetInfo = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo, 4));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
*/
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.setConnectGetInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.clearConnectGetInfo = function() {
  return this.setConnectGetInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo.prototype.hasConnectGetInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryParamsList: jspb.Message.toObjectList(msg.getQueryParamsList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo;
  return proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addQueryParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Header query_params = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.getQueryParamsList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} returns this
*/
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.setQueryParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.addQueryParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.ConnectGetInfo.prototype.clearQueryParamsList = function() {
  return this.setQueryParamsList([]);
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional RequestInfo request_info = 2;
 * @return {?proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.getRequestInfo = function() {
  return /** @type{?proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo, 2));
};


/**
 * @param {?proto.connectrpc.conformance.v1.ConformancePayload.RequestInfo|undefined} value
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload} returns this
*/
proto.connectrpc.conformance.v1.ConformancePayload.prototype.setRequestInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.ConformancePayload} returns this
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.clearRequestInfo = function() {
  return this.setRequestInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.ConformancePayload.prototype.hasRequestInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.Error.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.Error}
 */
proto.connectrpc.conformance.v1.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.Error;
  return proto.connectrpc.conformance.v1.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.Error}
 */
proto.connectrpc.conformance.v1.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connectrpc.conformance.v1.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional Code code = 1;
 * @return {!proto.connectrpc.conformance.v1.Code}
 */
proto.connectrpc.conformance.v1.Error.prototype.getCode = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Code} value
 * @return {!proto.connectrpc.conformance.v1.Error} returns this
 */
proto.connectrpc.conformance.v1.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.connectrpc.conformance.v1.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.Error} returns this
 */
proto.connectrpc.conformance.v1.Error.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.Error} returns this
 */
proto.connectrpc.conformance.v1.Error.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.Error.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated google.protobuf.Any details = 3;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.connectrpc.conformance.v1.Error.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.connectrpc.conformance.v1.Error} returns this
*/
proto.connectrpc.conformance.v1.Error.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.connectrpc.conformance.v1.Error.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Error} returns this
 */
proto.connectrpc.conformance.v1.Error.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.Header.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.Header;
  return proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.Header.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.Header} returns this
 */
proto.connectrpc.conformance.v1.Header.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string value = 2;
 * @return {!Array<string>}
 */
proto.connectrpc.conformance.v1.Header.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.connectrpc.conformance.v1.Header} returns this
 */
proto.connectrpc.conformance.v1.Header.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header} returns this
 */
proto.connectrpc.conformance.v1.Header.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.Header} returns this
 */
proto.connectrpc.conformance.v1.Header.prototype.clearValueList = function() {
  return this.setValueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.repeatedFields_ = [3,4,5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.oneofGroups_ = [[6,7]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.BodyCase = {
  BODY_NOT_SET: 0,
  UNARY: 6,
  STREAM: 7
};

/**
 * @return {proto.connectrpc.conformance.v1.RawHTTPRequest.BodyCase}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getBodyCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.RawHTTPRequest.BodyCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.RawHTTPRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.RawHTTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    rawQueryParamsList: jspb.Message.toObjectList(msg.getRawQueryParamsList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    encodedQueryParamsList: jspb.Message.toObjectList(msg.getEncodedQueryParamsList(),
    proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.toObject, includeInstance),
    unary: (f = msg.getUnary()) && proto.connectrpc.conformance.v1.MessageContents.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && proto.connectrpc.conformance.v1.StreamContents.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.RawHTTPRequest;
  return proto.connectrpc.conformance.v1.RawHTTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 4:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addRawQueryParams(value);
      break;
    case 5:
      var value = new proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam;
      reader.readMessage(value,proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.deserializeBinaryFromReader);
      msg.addEncodedQueryParams(value);
      break;
    case 6:
      var value = new proto.connectrpc.conformance.v1.MessageContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader);
      msg.setUnary(value);
      break;
    case 7:
      var value = new proto.connectrpc.conformance.v1.StreamContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.StreamContents.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.RawHTTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getRawQueryParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getEncodedQueryParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.serializeBinaryToWriter
    );
  }
  f = message.getUnary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.connectrpc.conformance.v1.StreamContents.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.connectrpc.conformance.v1.MessageContents.toObject(includeInstance, f),
    base64Encode: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam;
  return proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.connectrpc.conformance.v1.MessageContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBase64Encode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter
    );
  }
  f = message.getBase64Encode();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MessageContents value = 2;
 * @return {?proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.getValue = function() {
  return /** @type{?proto.connectrpc.conformance.v1.MessageContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.MessageContents, 2));
};


/**
 * @param {?proto.connectrpc.conformance.v1.MessageContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool base64_encode = 3;
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.getBase64Encode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam.prototype.setBase64Encode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string verb = 1;
 * @return {string}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getVerb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setVerb = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Header headers = 3;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 3));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated Header raw_query_params = 4;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getRawQueryParamsList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 4));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setRawQueryParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.addRawQueryParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.clearRawQueryParamsList = function() {
  return this.setRawQueryParamsList([]);
};


/**
 * repeated EncodedQueryParam encoded_query_params = 5;
 * @return {!Array<!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam>}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getEncodedQueryParamsList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam, 5));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam>} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setEncodedQueryParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.addEncodedQueryParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.connectrpc.conformance.v1.RawHTTPRequest.EncodedQueryParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.clearEncodedQueryParamsList = function() {
  return this.setEncodedQueryParamsList([]);
};


/**
 * optional MessageContents unary = 6;
 * @return {?proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getUnary = function() {
  return /** @type{?proto.connectrpc.conformance.v1.MessageContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.MessageContents, 6));
};


/**
 * @param {?proto.connectrpc.conformance.v1.MessageContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setUnary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.connectrpc.conformance.v1.RawHTTPRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.clearUnary = function() {
  return this.setUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.hasUnary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StreamContents stream = 7;
 * @return {?proto.connectrpc.conformance.v1.StreamContents}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.getStream = function() {
  return /** @type{?proto.connectrpc.conformance.v1.StreamContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.StreamContents, 7));
};


/**
 * @param {?proto.connectrpc.conformance.v1.StreamContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.connectrpc.conformance.v1.RawHTTPRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPRequest} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.MessageContents.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.MessageContents.DataCase = {
  DATA_NOT_SET: 0,
  BINARY: 1,
  TEXT: 2,
  BINARY_MESSAGE: 3
};

/**
 * @return {proto.connectrpc.conformance.v1.MessageContents.DataCase}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getDataCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.MessageContents.DataCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.MessageContents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.MessageContents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.MessageContents.toObject = function(includeInstance, msg) {
  var f, obj = {
    binary: msg.getBinary_asB64(),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    binaryMessage: (f = msg.getBinaryMessage()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    compression: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.MessageContents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.MessageContents;
  return proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.MessageContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setBinaryMessage(value);
      break;
    case 4:
      var value = /** @type {!proto.connectrpc.conformance.v1.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.MessageContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBinaryMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional bytes binary = 1;
 * @return {!(string|Uint8Array)}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getBinary = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes binary = 1;
 * This is a type-conversion wrapper around `getBinary()`
 * @return {string}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinary()));
};


/**
 * optional bytes binary = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinary()`
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.setBinary = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.clearBinary = function() {
  return jspb.Message.setOneofField(this, 1, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 2, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Any binary_message = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getBinaryMessage = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
*/
proto.connectrpc.conformance.v1.MessageContents.prototype.setBinaryMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.connectrpc.conformance.v1.MessageContents.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.clearBinaryMessage = function() {
  return this.setBinaryMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.hasBinaryMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Compression compression = 4;
 * @return {!proto.connectrpc.conformance.v1.Compression}
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.getCompression = function() {
  return /** @type {!proto.connectrpc.conformance.v1.Compression} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.connectrpc.conformance.v1.Compression} value
 * @return {!proto.connectrpc.conformance.v1.MessageContents} returns this
 */
proto.connectrpc.conformance.v1.MessageContents.prototype.setCompression = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.StreamContents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.StreamContents.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.StreamContents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.StreamContents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamContents.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.connectrpc.conformance.v1.StreamContents.StreamItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.StreamContents}
 */
proto.connectrpc.conformance.v1.StreamContents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.StreamContents;
  return proto.connectrpc.conformance.v1.StreamContents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.StreamContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.StreamContents}
 */
proto.connectrpc.conformance.v1.StreamContents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connectrpc.conformance.v1.StreamContents.StreamItem;
      reader.readMessage(value,proto.connectrpc.conformance.v1.StreamContents.StreamItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.StreamContents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.StreamContents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.StreamContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamContents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.connectrpc.conformance.v1.StreamContents.StreamItem.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.StreamContents.StreamItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getFieldWithDefault(msg, 1, 0),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: (f = msg.getPayload()) && proto.connectrpc.conformance.v1.MessageContents.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.StreamContents.StreamItem;
  return proto.connectrpc.conformance.v1.StreamContents.StreamItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.MessageContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.StreamContents.StreamItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 flags = 1;
 * @return {number}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} returns this
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 length = 2;
 * @return {number}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} returns this
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} returns this
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.clearLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.hasLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageContents payload = 3;
 * @return {?proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.getPayload = function() {
  return /** @type{?proto.connectrpc.conformance.v1.MessageContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.MessageContents, 3));
};


/**
 * @param {?proto.connectrpc.conformance.v1.MessageContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} returns this
*/
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem} returns this
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.StreamContents.StreamItem.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated StreamItem items = 1;
 * @return {!Array<!proto.connectrpc.conformance.v1.StreamContents.StreamItem>}
 */
proto.connectrpc.conformance.v1.StreamContents.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.StreamContents.StreamItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.StreamContents.StreamItem, 1));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.StreamContents.StreamItem>} value
 * @return {!proto.connectrpc.conformance.v1.StreamContents} returns this
*/
proto.connectrpc.conformance.v1.StreamContents.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.StreamContents.StreamItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.StreamContents.StreamItem}
 */
proto.connectrpc.conformance.v1.StreamContents.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.connectrpc.conformance.v1.StreamContents.StreamItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.StreamContents} returns this
 */
proto.connectrpc.conformance.v1.StreamContents.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.repeatedFields_ = [2,5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.BodyCase = {
  BODY_NOT_SET: 0,
  UNARY: 3,
  STREAM: 4
};

/**
 * @return {proto.connectrpc.conformance.v1.RawHTTPResponse.BodyCase}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getBodyCase = function() {
  return /** @type {proto.connectrpc.conformance.v1.RawHTTPResponse.BodyCase} */(jspb.Message.computeOneofCase(this, proto.connectrpc.conformance.v1.RawHTTPResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connectrpc.conformance.v1.RawHTTPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connectrpc.conformance.v1.RawHTTPResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance),
    unary: (f = msg.getUnary()) && proto.connectrpc.conformance.v1.MessageContents.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && proto.connectrpc.conformance.v1.StreamContents.toObject(includeInstance, f),
    trailersList: jspb.Message.toObjectList(msg.getTrailersList(),
    proto.connectrpc.conformance.v1.Header.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connectrpc.conformance.v1.RawHTTPResponse;
  return proto.connectrpc.conformance.v1.RawHTTPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatusCode(value);
      break;
    case 2:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 3:
      var value = new proto.connectrpc.conformance.v1.MessageContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.MessageContents.deserializeBinaryFromReader);
      msg.setUnary(value);
      break;
    case 4:
      var value = new proto.connectrpc.conformance.v1.StreamContents;
      reader.readMessage(value,proto.connectrpc.conformance.v1.StreamContents.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 5:
      var value = new proto.connectrpc.conformance.v1.Header;
      reader.readMessage(value,proto.connectrpc.conformance.v1.Header.deserializeBinaryFromReader);
      msg.addTrailers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connectrpc.conformance.v1.RawHTTPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connectrpc.conformance.v1.RawHTTPResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getUnary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connectrpc.conformance.v1.MessageContents.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.connectrpc.conformance.v1.StreamContents.serializeBinaryToWriter
    );
  }
  f = message.getTrailersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.connectrpc.conformance.v1.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 status_code = 1;
 * @return {number}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Header headers = 2;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 2));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional MessageContents unary = 3;
 * @return {?proto.connectrpc.conformance.v1.MessageContents}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getUnary = function() {
  return /** @type{?proto.connectrpc.conformance.v1.MessageContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.MessageContents, 3));
};


/**
 * @param {?proto.connectrpc.conformance.v1.MessageContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.setUnary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.connectrpc.conformance.v1.RawHTTPResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.clearUnary = function() {
  return this.setUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.hasUnary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StreamContents stream = 4;
 * @return {?proto.connectrpc.conformance.v1.StreamContents}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getStream = function() {
  return /** @type{?proto.connectrpc.conformance.v1.StreamContents} */ (
    jspb.Message.getWrapperField(this, proto.connectrpc.conformance.v1.StreamContents, 4));
};


/**
 * @param {?proto.connectrpc.conformance.v1.StreamContents|undefined} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.connectrpc.conformance.v1.RawHTTPResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.hasStream = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Header trailers = 5;
 * @return {!Array<!proto.connectrpc.conformance.v1.Header>}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.getTrailersList = function() {
  return /** @type{!Array<!proto.connectrpc.conformance.v1.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connectrpc.conformance.v1.Header, 5));
};


/**
 * @param {!Array<!proto.connectrpc.conformance.v1.Header>} value
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
*/
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.setTrailersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.connectrpc.conformance.v1.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connectrpc.conformance.v1.Header}
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.addTrailers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.connectrpc.conformance.v1.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connectrpc.conformance.v1.RawHTTPResponse} returns this
 */
proto.connectrpc.conformance.v1.RawHTTPResponse.prototype.clearTrailersList = function() {
  return this.setTrailersList([]);
};


goog.object.extend(exports, proto.connectrpc.conformance.v1);
