// source: connect/conformance/messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.connect.conformance.ClientConfigureRequest', null, global);
goog.exportSymbol('proto.connect.conformance.ClientConfigureRequest.Metadata', null, global);
goog.exportSymbol('proto.connect.conformance.ClientConfigureRequest.RpcType', null, global);
goog.exportSymbol('proto.connect.conformance.ClientConfigureResponse', null, global);
goog.exportSymbol('proto.connect.conformance.EchoStatus', null, global);
goog.exportSymbol('proto.connect.conformance.ErrorDetail', null, global);
goog.exportSymbol('proto.connect.conformance.ErrorStatus', null, global);
goog.exportSymbol('proto.connect.conformance.GrpclbRouteType', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerAccumulatedStatsRequest', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerAccumulatedStatsResponse', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerStatsRequest', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerStatsResponse', null, global);
goog.exportSymbol('proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer', null, global);
goog.exportSymbol('proto.connect.conformance.Payload', null, global);
goog.exportSymbol('proto.connect.conformance.PayloadType', null, global);
goog.exportSymbol('proto.connect.conformance.ReconnectInfo', null, global);
goog.exportSymbol('proto.connect.conformance.ReconnectParams', null, global);
goog.exportSymbol('proto.connect.conformance.ResponseParameters', null, global);
goog.exportSymbol('proto.connect.conformance.SimpleRequest', null, global);
goog.exportSymbol('proto.connect.conformance.SimpleResponse', null, global);
goog.exportSymbol('proto.connect.conformance.StreamingInputCallRequest', null, global);
goog.exportSymbol('proto.connect.conformance.StreamingInputCallResponse', null, global);
goog.exportSymbol('proto.connect.conformance.StreamingOutputCallRequest', null, global);
goog.exportSymbol('proto.connect.conformance.StreamingOutputCallResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.Payload.displayName = 'proto.connect.conformance.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.EchoStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.EchoStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.EchoStatus.displayName = 'proto.connect.conformance.EchoStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.SimpleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.SimpleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.SimpleRequest.displayName = 'proto.connect.conformance.SimpleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.SimpleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.SimpleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.SimpleResponse.displayName = 'proto.connect.conformance.SimpleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.StreamingInputCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.StreamingInputCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.StreamingInputCallRequest.displayName = 'proto.connect.conformance.StreamingInputCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.StreamingInputCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.StreamingInputCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.StreamingInputCallResponse.displayName = 'proto.connect.conformance.StreamingInputCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ResponseParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.ResponseParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ResponseParameters.displayName = 'proto.connect.conformance.ResponseParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.StreamingOutputCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connect.conformance.StreamingOutputCallRequest.repeatedFields_, null);
};
goog.inherits(proto.connect.conformance.StreamingOutputCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.StreamingOutputCallRequest.displayName = 'proto.connect.conformance.StreamingOutputCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.StreamingOutputCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.StreamingOutputCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.StreamingOutputCallResponse.displayName = 'proto.connect.conformance.StreamingOutputCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ReconnectParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.ReconnectParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ReconnectParams.displayName = 'proto.connect.conformance.ReconnectParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ReconnectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connect.conformance.ReconnectInfo.repeatedFields_, null);
};
goog.inherits(proto.connect.conformance.ReconnectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ReconnectInfo.displayName = 'proto.connect.conformance.ReconnectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerStatsRequest.displayName = 'proto.connect.conformance.LoadBalancerStatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerStatsResponse.displayName = 'proto.connect.conformance.LoadBalancerStatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.displayName = 'proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerAccumulatedStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.displayName = 'proto.connect.conformance.LoadBalancerAccumulatedStatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerAccumulatedStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.displayName = 'proto.connect.conformance.LoadBalancerAccumulatedStatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.displayName = 'proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ClientConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connect.conformance.ClientConfigureRequest.repeatedFields_, null);
};
goog.inherits(proto.connect.conformance.ClientConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ClientConfigureRequest.displayName = 'proto.connect.conformance.ClientConfigureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ClientConfigureRequest.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.ClientConfigureRequest.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ClientConfigureRequest.Metadata.displayName = 'proto.connect.conformance.ClientConfigureRequest.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ClientConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.ClientConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ClientConfigureResponse.displayName = 'proto.connect.conformance.ClientConfigureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ErrorDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.connect.conformance.ErrorDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ErrorDetail.displayName = 'proto.connect.conformance.ErrorDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.connect.conformance.ErrorStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.connect.conformance.ErrorStatus.repeatedFields_, null);
};
goog.inherits(proto.connect.conformance.ErrorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.connect.conformance.ErrorStatus.displayName = 'proto.connect.conformance.ErrorStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.Payload}
 */
proto.connect.conformance.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.Payload;
  return proto.connect.conformance.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.Payload}
 */
proto.connect.conformance.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connect.conformance.PayloadType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayloadType type = 1;
 * @return {!proto.connect.conformance.PayloadType}
 */
proto.connect.conformance.Payload.prototype.getType = function() {
  return /** @type {!proto.connect.conformance.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connect.conformance.PayloadType} value
 * @return {!proto.connect.conformance.Payload} returns this
 */
proto.connect.conformance.Payload.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.connect.conformance.Payload.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.connect.conformance.Payload.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.connect.conformance.Payload.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.connect.conformance.Payload} returns this
 */
proto.connect.conformance.Payload.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.EchoStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.EchoStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.EchoStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.EchoStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.EchoStatus}
 */
proto.connect.conformance.EchoStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.EchoStatus;
  return proto.connect.conformance.EchoStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.EchoStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.EchoStatus}
 */
proto.connect.conformance.EchoStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.EchoStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.EchoStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.EchoStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.EchoStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.connect.conformance.EchoStatus.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.EchoStatus} returns this
 */
proto.connect.conformance.EchoStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.connect.conformance.EchoStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.EchoStatus} returns this
 */
proto.connect.conformance.EchoStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.SimpleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.SimpleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.SimpleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.SimpleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responseSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: (f = msg.getPayload()) && proto.connect.conformance.Payload.toObject(includeInstance, f),
    fillUsername: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fillOauthScope: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    responseCompressed: (f = msg.getResponseCompressed()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
    responseStatus: (f = msg.getResponseStatus()) && proto.connect.conformance.EchoStatus.toObject(includeInstance, f),
    expectCompressed: (f = msg.getExpectCompressed()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
    fillServerId: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    fillGrpclbRouteType: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.SimpleRequest}
 */
proto.connect.conformance.SimpleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.SimpleRequest;
  return proto.connect.conformance.SimpleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.SimpleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.SimpleRequest}
 */
proto.connect.conformance.SimpleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connect.conformance.PayloadType} */ (reader.readEnum());
      msg.setResponseType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseSize(value);
      break;
    case 3:
      var value = new proto.connect.conformance.Payload;
      reader.readMessage(value,proto.connect.conformance.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillUsername(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillOauthScope(value);
      break;
    case 6:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setResponseCompressed(value);
      break;
    case 7:
      var value = new proto.connect.conformance.EchoStatus;
      reader.readMessage(value,proto.connect.conformance.EchoStatus.deserializeBinaryFromReader);
      msg.setResponseStatus(value);
      break;
    case 8:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setExpectCompressed(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillServerId(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillGrpclbRouteType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.SimpleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.SimpleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.SimpleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.SimpleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResponseSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connect.conformance.Payload.serializeBinaryToWriter
    );
  }
  f = message.getFillUsername();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFillOauthScope();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getResponseCompressed();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getResponseStatus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.connect.conformance.EchoStatus.serializeBinaryToWriter
    );
  }
  f = message.getExpectCompressed();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getFillServerId();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFillGrpclbRouteType();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional PayloadType response_type = 1;
 * @return {!proto.connect.conformance.PayloadType}
 */
proto.connect.conformance.SimpleRequest.prototype.getResponseType = function() {
  return /** @type {!proto.connect.conformance.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connect.conformance.PayloadType} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setResponseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 response_size = 2;
 * @return {number}
 */
proto.connect.conformance.SimpleRequest.prototype.getResponseSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setResponseSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Payload payload = 3;
 * @return {?proto.connect.conformance.Payload}
 */
proto.connect.conformance.SimpleRequest.prototype.getPayload = function() {
  return /** @type{?proto.connect.conformance.Payload} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.Payload, 3));
};


/**
 * @param {?proto.connect.conformance.Payload|undefined} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
*/
proto.connect.conformance.SimpleRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool fill_username = 4;
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.getFillUsername = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setFillUsername = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fill_oauth_scope = 5;
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.getFillOauthScope = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setFillOauthScope = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional google.protobuf.BoolValue response_compressed = 6;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.connect.conformance.SimpleRequest.prototype.getResponseCompressed = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 6));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
*/
proto.connect.conformance.SimpleRequest.prototype.setResponseCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.clearResponseCompressed = function() {
  return this.setResponseCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.hasResponseCompressed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EchoStatus response_status = 7;
 * @return {?proto.connect.conformance.EchoStatus}
 */
proto.connect.conformance.SimpleRequest.prototype.getResponseStatus = function() {
  return /** @type{?proto.connect.conformance.EchoStatus} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.EchoStatus, 7));
};


/**
 * @param {?proto.connect.conformance.EchoStatus|undefined} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
*/
proto.connect.conformance.SimpleRequest.prototype.setResponseStatus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.clearResponseStatus = function() {
  return this.setResponseStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.hasResponseStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.BoolValue expect_compressed = 8;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.connect.conformance.SimpleRequest.prototype.getExpectCompressed = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 8));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
*/
proto.connect.conformance.SimpleRequest.prototype.setExpectCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.clearExpectCompressed = function() {
  return this.setExpectCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.hasExpectCompressed = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool fill_server_id = 9;
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.getFillServerId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setFillServerId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool fill_grpclb_route_type = 10;
 * @return {boolean}
 */
proto.connect.conformance.SimpleRequest.prototype.getFillGrpclbRouteType = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connect.conformance.SimpleRequest} returns this
 */
proto.connect.conformance.SimpleRequest.prototype.setFillGrpclbRouteType = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.SimpleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.SimpleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.SimpleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.SimpleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connect.conformance.Payload.toObject(includeInstance, f),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oauthScope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    grpclbRouteType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hostname: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.SimpleResponse}
 */
proto.connect.conformance.SimpleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.SimpleResponse;
  return proto.connect.conformance.SimpleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.SimpleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.SimpleResponse}
 */
proto.connect.conformance.SimpleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connect.conformance.Payload;
      reader.readMessage(value,proto.connect.conformance.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthScope(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerId(value);
      break;
    case 5:
      var value = /** @type {!proto.connect.conformance.GrpclbRouteType} */ (reader.readEnum());
      msg.setGrpclbRouteType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.SimpleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.SimpleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.SimpleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.SimpleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connect.conformance.Payload.serializeBinaryToWriter
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOauthScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGrpclbRouteType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.connect.conformance.Payload}
 */
proto.connect.conformance.SimpleResponse.prototype.getPayload = function() {
  return /** @type{?proto.connect.conformance.Payload} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.Payload, 1));
};


/**
 * @param {?proto.connect.conformance.Payload|undefined} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
*/
proto.connect.conformance.SimpleResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.SimpleResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.connect.conformance.SimpleResponse.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oauth_scope = 3;
 * @return {string}
 */
proto.connect.conformance.SimpleResponse.prototype.getOauthScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.setOauthScope = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string server_id = 4;
 * @return {string}
 */
proto.connect.conformance.SimpleResponse.prototype.getServerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.setServerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional GrpclbRouteType grpclb_route_type = 5;
 * @return {!proto.connect.conformance.GrpclbRouteType}
 */
proto.connect.conformance.SimpleResponse.prototype.getGrpclbRouteType = function() {
  return /** @type {!proto.connect.conformance.GrpclbRouteType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.connect.conformance.GrpclbRouteType} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.setGrpclbRouteType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string hostname = 6;
 * @return {string}
 */
proto.connect.conformance.SimpleResponse.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.SimpleResponse} returns this
 */
proto.connect.conformance.SimpleResponse.prototype.setHostname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.StreamingInputCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.StreamingInputCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingInputCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connect.conformance.Payload.toObject(includeInstance, f),
    expectCompressed: (f = msg.getExpectCompressed()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.StreamingInputCallRequest}
 */
proto.connect.conformance.StreamingInputCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.StreamingInputCallRequest;
  return proto.connect.conformance.StreamingInputCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.StreamingInputCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.StreamingInputCallRequest}
 */
proto.connect.conformance.StreamingInputCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connect.conformance.Payload;
      reader.readMessage(value,proto.connect.conformance.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setExpectCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.StreamingInputCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.StreamingInputCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingInputCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connect.conformance.Payload.serializeBinaryToWriter
    );
  }
  f = message.getExpectCompressed();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.connect.conformance.Payload}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.getPayload = function() {
  return /** @type{?proto.connect.conformance.Payload} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.Payload, 1));
};


/**
 * @param {?proto.connect.conformance.Payload|undefined} value
 * @return {!proto.connect.conformance.StreamingInputCallRequest} returns this
*/
proto.connect.conformance.StreamingInputCallRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.StreamingInputCallRequest} returns this
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.BoolValue expect_compressed = 2;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.getExpectCompressed = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 2));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.connect.conformance.StreamingInputCallRequest} returns this
*/
proto.connect.conformance.StreamingInputCallRequest.prototype.setExpectCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.StreamingInputCallRequest} returns this
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.clearExpectCompressed = function() {
  return this.setExpectCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.StreamingInputCallRequest.prototype.hasExpectCompressed = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.StreamingInputCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.StreamingInputCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.StreamingInputCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingInputCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggregatedPayloadSize: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.StreamingInputCallResponse}
 */
proto.connect.conformance.StreamingInputCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.StreamingInputCallResponse;
  return proto.connect.conformance.StreamingInputCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.StreamingInputCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.StreamingInputCallResponse}
 */
proto.connect.conformance.StreamingInputCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAggregatedPayloadSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.StreamingInputCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.StreamingInputCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.StreamingInputCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingInputCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAggregatedPayloadSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 aggregated_payload_size = 1;
 * @return {number}
 */
proto.connect.conformance.StreamingInputCallResponse.prototype.getAggregatedPayloadSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.StreamingInputCallResponse} returns this
 */
proto.connect.conformance.StreamingInputCallResponse.prototype.setAggregatedPayloadSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ResponseParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ResponseParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ResponseParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ResponseParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intervalUs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    compressed: (f = msg.getCompressed()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ResponseParameters}
 */
proto.connect.conformance.ResponseParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ResponseParameters;
  return proto.connect.conformance.ResponseParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ResponseParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ResponseParameters}
 */
proto.connect.conformance.ResponseParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntervalUs(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ResponseParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ResponseParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ResponseParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ResponseParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIntervalUs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCompressed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 size = 1;
 * @return {number}
 */
proto.connect.conformance.ResponseParameters.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.ResponseParameters} returns this
 */
proto.connect.conformance.ResponseParameters.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 interval_us = 2;
 * @return {number}
 */
proto.connect.conformance.ResponseParameters.prototype.getIntervalUs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.ResponseParameters} returns this
 */
proto.connect.conformance.ResponseParameters.prototype.setIntervalUs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.BoolValue compressed = 3;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.connect.conformance.ResponseParameters.prototype.getCompressed = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 3));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.connect.conformance.ResponseParameters} returns this
*/
proto.connect.conformance.ResponseParameters.prototype.setCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.ResponseParameters} returns this
 */
proto.connect.conformance.ResponseParameters.prototype.clearCompressed = function() {
  return this.setCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.ResponseParameters.prototype.hasCompressed = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connect.conformance.StreamingOutputCallRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.StreamingOutputCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.StreamingOutputCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingOutputCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responseParametersList: jspb.Message.toObjectList(msg.getResponseParametersList(),
    proto.connect.conformance.ResponseParameters.toObject, includeInstance),
    payload: (f = msg.getPayload()) && proto.connect.conformance.Payload.toObject(includeInstance, f),
    responseStatus: (f = msg.getResponseStatus()) && proto.connect.conformance.EchoStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.StreamingOutputCallRequest}
 */
proto.connect.conformance.StreamingOutputCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.StreamingOutputCallRequest;
  return proto.connect.conformance.StreamingOutputCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.StreamingOutputCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.StreamingOutputCallRequest}
 */
proto.connect.conformance.StreamingOutputCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connect.conformance.PayloadType} */ (reader.readEnum());
      msg.setResponseType(value);
      break;
    case 2:
      var value = new proto.connect.conformance.ResponseParameters;
      reader.readMessage(value,proto.connect.conformance.ResponseParameters.deserializeBinaryFromReader);
      msg.addResponseParameters(value);
      break;
    case 3:
      var value = new proto.connect.conformance.Payload;
      reader.readMessage(value,proto.connect.conformance.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 7:
      var value = new proto.connect.conformance.EchoStatus;
      reader.readMessage(value,proto.connect.conformance.EchoStatus.deserializeBinaryFromReader);
      msg.setResponseStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.StreamingOutputCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.StreamingOutputCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingOutputCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResponseParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.connect.conformance.ResponseParameters.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.connect.conformance.Payload.serializeBinaryToWriter
    );
  }
  f = message.getResponseStatus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.connect.conformance.EchoStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PayloadType response_type = 1;
 * @return {!proto.connect.conformance.PayloadType}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.getResponseType = function() {
  return /** @type {!proto.connect.conformance.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connect.conformance.PayloadType} value
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.setResponseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ResponseParameters response_parameters = 2;
 * @return {!Array<!proto.connect.conformance.ResponseParameters>}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.getResponseParametersList = function() {
  return /** @type{!Array<!proto.connect.conformance.ResponseParameters>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connect.conformance.ResponseParameters, 2));
};


/**
 * @param {!Array<!proto.connect.conformance.ResponseParameters>} value
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
*/
proto.connect.conformance.StreamingOutputCallRequest.prototype.setResponseParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.connect.conformance.ResponseParameters=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connect.conformance.ResponseParameters}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.addResponseParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.connect.conformance.ResponseParameters, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.clearResponseParametersList = function() {
  return this.setResponseParametersList([]);
};


/**
 * optional Payload payload = 3;
 * @return {?proto.connect.conformance.Payload}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.getPayload = function() {
  return /** @type{?proto.connect.conformance.Payload} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.Payload, 3));
};


/**
 * @param {?proto.connect.conformance.Payload|undefined} value
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
*/
proto.connect.conformance.StreamingOutputCallRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EchoStatus response_status = 7;
 * @return {?proto.connect.conformance.EchoStatus}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.getResponseStatus = function() {
  return /** @type{?proto.connect.conformance.EchoStatus} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.EchoStatus, 7));
};


/**
 * @param {?proto.connect.conformance.EchoStatus|undefined} value
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
*/
proto.connect.conformance.StreamingOutputCallRequest.prototype.setResponseStatus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.StreamingOutputCallRequest} returns this
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.clearResponseStatus = function() {
  return this.setResponseStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.StreamingOutputCallRequest.prototype.hasResponseStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.StreamingOutputCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.StreamingOutputCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.StreamingOutputCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingOutputCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.connect.conformance.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.StreamingOutputCallResponse}
 */
proto.connect.conformance.StreamingOutputCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.StreamingOutputCallResponse;
  return proto.connect.conformance.StreamingOutputCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.StreamingOutputCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.StreamingOutputCallResponse}
 */
proto.connect.conformance.StreamingOutputCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.connect.conformance.Payload;
      reader.readMessage(value,proto.connect.conformance.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.StreamingOutputCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.StreamingOutputCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.StreamingOutputCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.StreamingOutputCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.connect.conformance.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.connect.conformance.Payload}
 */
proto.connect.conformance.StreamingOutputCallResponse.prototype.getPayload = function() {
  return /** @type{?proto.connect.conformance.Payload} */ (
    jspb.Message.getWrapperField(this, proto.connect.conformance.Payload, 1));
};


/**
 * @param {?proto.connect.conformance.Payload|undefined} value
 * @return {!proto.connect.conformance.StreamingOutputCallResponse} returns this
*/
proto.connect.conformance.StreamingOutputCallResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.connect.conformance.StreamingOutputCallResponse} returns this
 */
proto.connect.conformance.StreamingOutputCallResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.connect.conformance.StreamingOutputCallResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ReconnectParams.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ReconnectParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ReconnectParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ReconnectParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxReconnectBackoffMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ReconnectParams}
 */
proto.connect.conformance.ReconnectParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ReconnectParams;
  return proto.connect.conformance.ReconnectParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ReconnectParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ReconnectParams}
 */
proto.connect.conformance.ReconnectParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxReconnectBackoffMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ReconnectParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ReconnectParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ReconnectParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ReconnectParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxReconnectBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 max_reconnect_backoff_ms = 1;
 * @return {number}
 */
proto.connect.conformance.ReconnectParams.prototype.getMaxReconnectBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.ReconnectParams} returns this
 */
proto.connect.conformance.ReconnectParams.prototype.setMaxReconnectBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connect.conformance.ReconnectInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ReconnectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ReconnectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ReconnectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ReconnectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    passed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    backoffMsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ReconnectInfo}
 */
proto.connect.conformance.ReconnectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ReconnectInfo;
  return proto.connect.conformance.ReconnectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ReconnectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ReconnectInfo}
 */
proto.connect.conformance.ReconnectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassed(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBackoffMs(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ReconnectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ReconnectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ReconnectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ReconnectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBackoffMsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional bool passed = 1;
 * @return {boolean}
 */
proto.connect.conformance.ReconnectInfo.prototype.getPassed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.connect.conformance.ReconnectInfo} returns this
 */
proto.connect.conformance.ReconnectInfo.prototype.setPassed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated int32 backoff_ms = 2;
 * @return {!Array<number>}
 */
proto.connect.conformance.ReconnectInfo.prototype.getBackoffMsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.connect.conformance.ReconnectInfo} returns this
 */
proto.connect.conformance.ReconnectInfo.prototype.setBackoffMsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.connect.conformance.ReconnectInfo} returns this
 */
proto.connect.conformance.ReconnectInfo.prototype.addBackoffMs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connect.conformance.ReconnectInfo} returns this
 */
proto.connect.conformance.ReconnectInfo.prototype.clearBackoffMsList = function() {
  return this.setBackoffMsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numRpcs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeoutSec: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerStatsRequest}
 */
proto.connect.conformance.LoadBalancerStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerStatsRequest;
  return proto.connect.conformance.LoadBalancerStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerStatsRequest}
 */
proto.connect.conformance.LoadBalancerStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumRpcs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerStatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumRpcs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimeoutSec();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 num_rpcs = 1;
 * @return {number}
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.getNumRpcs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.LoadBalancerStatsRequest} returns this
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.setNumRpcs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 timeout_sec = 2;
 * @return {number}
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.getTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.LoadBalancerStatsRequest} returns this
 */
proto.connect.conformance.LoadBalancerStatsRequest.prototype.setTimeoutSec = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rpcsByPeerMap: (f = msg.getRpcsByPeerMap()) ? f.toObject(includeInstance, undefined) : [],
    numFailures: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rpcsByMethodMap: (f = msg.getRpcsByMethodMap()) ? f.toObject(includeInstance, proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse}
 */
proto.connect.conformance.LoadBalancerStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerStatsResponse;
  return proto.connect.conformance.LoadBalancerStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse}
 */
proto.connect.conformance.LoadBalancerStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getRpcsByPeerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumFailures(value);
      break;
    case 3:
      var value = msg.getRpcsByMethodMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.deserializeBinaryFromReader, "", new proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRpcsByPeerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getNumFailures();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRpcsByMethodMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    rpcsByPeerMap: (f = msg.getRpcsByPeerMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer}
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer;
  return proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer}
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getRpcsByPeerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRpcsByPeerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<string, int32> rpcs_by_peer = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.prototype.getRpcsByPeerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer} returns this
 */
proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer.prototype.clearRpcsByPeerMap = function() {
  this.getRpcsByPeerMap().clear();
  return this;
};


/**
 * map<string, int32> rpcs_by_peer = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.getRpcsByPeerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.clearRpcsByPeerMap = function() {
  this.getRpcsByPeerMap().clear();
  return this;
};


/**
 * optional int32 num_failures = 2;
 * @return {number}
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.getNumFailures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.setNumFailures = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, RpcsByPeer> rpcs_by_method = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer>}
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.getRpcsByMethodMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.connect.conformance.LoadBalancerStatsResponse.RpcsByPeer));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerStatsResponse.prototype.clearRpcsByMethodMap = function() {
  this.getRpcsByMethodMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsRequest}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerAccumulatedStatsRequest;
  return proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsRequest}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numRpcsStartedByMethodMap: (f = msg.getNumRpcsStartedByMethodMap()) ? f.toObject(includeInstance, undefined) : [],
    numRpcsSucceededByMethodMap: (f = msg.getNumRpcsSucceededByMethodMap()) ? f.toObject(includeInstance, undefined) : [],
    numRpcsFailedByMethodMap: (f = msg.getNumRpcsFailedByMethodMap()) ? f.toObject(includeInstance, undefined) : [],
    statsPerMethodMap: (f = msg.getStatsPerMethodMap()) ? f.toObject(includeInstance, proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerAccumulatedStatsResponse;
  return proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getNumRpcsStartedByMethodMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 2:
      var value = msg.getNumRpcsSucceededByMethodMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 3:
      var value = msg.getNumRpcsFailedByMethodMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 4:
      var value = msg.getStatsPerMethodMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.deserializeBinaryFromReader, "", new proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumRpcsStartedByMethodMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getNumRpcsSucceededByMethodMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getNumRpcsFailedByMethodMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getStatsPerMethodMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    rpcsStarted: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultMap: (f = msg.getResultMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats;
  return proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRpcsStarted(value);
      break;
    case 2:
      var value = msg.getResultMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRpcsStarted();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResultMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional int32 rpcs_started = 1;
 * @return {number}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.getRpcsStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.setRpcsStarted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<int32, int32> result = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.getResultMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats.prototype.clearResultMap = function() {
  this.getResultMap().clear();
  return this;
};


/**
 * map<string, int32> num_rpcs_started_by_method = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.getNumRpcsStartedByMethodMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.clearNumRpcsStartedByMethodMap = function() {
  this.getNumRpcsStartedByMethodMap().clear();
  return this;
};


/**
 * map<string, int32> num_rpcs_succeeded_by_method = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.getNumRpcsSucceededByMethodMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.clearNumRpcsSucceededByMethodMap = function() {
  this.getNumRpcsSucceededByMethodMap().clear();
  return this;
};


/**
 * map<string, int32> num_rpcs_failed_by_method = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.getNumRpcsFailedByMethodMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.clearNumRpcsFailedByMethodMap = function() {
  this.getNumRpcsFailedByMethodMap().clear();
  return this;
};


/**
 * map<string, MethodStats> stats_per_method = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats>}
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.getStatsPerMethodMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.MethodStats));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.connect.conformance.LoadBalancerAccumulatedStatsResponse} returns this
 */
proto.connect.conformance.LoadBalancerAccumulatedStatsResponse.prototype.clearStatsPerMethodMap = function() {
  this.getStatsPerMethodMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connect.conformance.ClientConfigureRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ClientConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ClientConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    proto.connect.conformance.ClientConfigureRequest.Metadata.toObject, includeInstance),
    timeoutSec: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ClientConfigureRequest}
 */
proto.connect.conformance.ClientConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ClientConfigureRequest;
  return proto.connect.conformance.ClientConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ClientConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ClientConfigureRequest}
 */
proto.connect.conformance.ClientConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.connect.conformance.ClientConfigureRequest.RpcType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTypes(values[i]);
      }
      break;
    case 2:
      var value = new proto.connect.conformance.ClientConfigureRequest.Metadata;
      reader.readMessage(value,proto.connect.conformance.ClientConfigureRequest.Metadata.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ClientConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ClientConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.connect.conformance.ClientConfigureRequest.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutSec();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.connect.conformance.ClientConfigureRequest.RpcType = {
  EMPTY_CALL: 0,
  UNARY_CALL: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ClientConfigureRequest.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ClientConfigureRequest.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ClientConfigureRequest.Metadata;
  return proto.connect.conformance.ClientConfigureRequest.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ClientConfigureRequest.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.connect.conformance.ClientConfigureRequest.RpcType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ClientConfigureRequest.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ClientConfigureRequest.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RpcType type = 1;
 * @return {!proto.connect.conformance.ClientConfigureRequest.RpcType}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.getType = function() {
  return /** @type {!proto.connect.conformance.ClientConfigureRequest.RpcType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.connect.conformance.ClientConfigureRequest.RpcType} value
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata} returns this
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata} returns this
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata} returns this
 */
proto.connect.conformance.ClientConfigureRequest.Metadata.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated RpcType types = 1;
 * @return {!Array<!proto.connect.conformance.ClientConfigureRequest.RpcType>}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.getTypesList = function() {
  return /** @type {!Array<!proto.connect.conformance.ClientConfigureRequest.RpcType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.connect.conformance.ClientConfigureRequest.RpcType>} value
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
 */
proto.connect.conformance.ClientConfigureRequest.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.connect.conformance.ClientConfigureRequest.RpcType} value
 * @param {number=} opt_index
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
 */
proto.connect.conformance.ClientConfigureRequest.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
 */
proto.connect.conformance.ClientConfigureRequest.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * repeated Metadata metadata = 2;
 * @return {!Array<!proto.connect.conformance.ClientConfigureRequest.Metadata>}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.connect.conformance.ClientConfigureRequest.Metadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.connect.conformance.ClientConfigureRequest.Metadata, 2));
};


/**
 * @param {!Array<!proto.connect.conformance.ClientConfigureRequest.Metadata>} value
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
*/
proto.connect.conformance.ClientConfigureRequest.prototype.setMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.connect.conformance.ClientConfigureRequest.Metadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.connect.conformance.ClientConfigureRequest.Metadata}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.connect.conformance.ClientConfigureRequest.Metadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
 */
proto.connect.conformance.ClientConfigureRequest.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};


/**
 * optional int32 timeout_sec = 3;
 * @return {number}
 */
proto.connect.conformance.ClientConfigureRequest.prototype.getTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.ClientConfigureRequest} returns this
 */
proto.connect.conformance.ClientConfigureRequest.prototype.setTimeoutSec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ClientConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ClientConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ClientConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ClientConfigureResponse}
 */
proto.connect.conformance.ClientConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ClientConfigureResponse;
  return proto.connect.conformance.ClientConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ClientConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ClientConfigureResponse}
 */
proto.connect.conformance.ClientConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ClientConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ClientConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ClientConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ClientConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ErrorDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ErrorDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ErrorDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ErrorDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ErrorDetail}
 */
proto.connect.conformance.ErrorDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ErrorDetail;
  return proto.connect.conformance.ErrorDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ErrorDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ErrorDetail}
 */
proto.connect.conformance.ErrorDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ErrorDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ErrorDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ErrorDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ErrorDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.connect.conformance.ErrorDetail.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.ErrorDetail} returns this
 */
proto.connect.conformance.ErrorDetail.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.connect.conformance.ErrorDetail.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.ErrorDetail} returns this
 */
proto.connect.conformance.ErrorDetail.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.connect.conformance.ErrorStatus.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.connect.conformance.ErrorStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.connect.conformance.ErrorStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.connect.conformance.ErrorStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ErrorStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.connect.conformance.ErrorStatus}
 */
proto.connect.conformance.ErrorStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.connect.conformance.ErrorStatus;
  return proto.connect.conformance.ErrorStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.connect.conformance.ErrorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.connect.conformance.ErrorStatus}
 */
proto.connect.conformance.ErrorStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.connect.conformance.ErrorStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.connect.conformance.ErrorStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.connect.conformance.ErrorStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.connect.conformance.ErrorStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.connect.conformance.ErrorStatus.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.connect.conformance.ErrorStatus} returns this
 */
proto.connect.conformance.ErrorStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.connect.conformance.ErrorStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.connect.conformance.ErrorStatus} returns this
 */
proto.connect.conformance.ErrorStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated google.protobuf.Any details = 3;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.connect.conformance.ErrorStatus.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.connect.conformance.ErrorStatus} returns this
*/
proto.connect.conformance.ErrorStatus.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.connect.conformance.ErrorStatus.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.connect.conformance.ErrorStatus} returns this
 */
proto.connect.conformance.ErrorStatus.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};


/**
 * @enum {number}
 */
proto.connect.conformance.PayloadType = {
  COMPRESSABLE: 0
};

/**
 * @enum {number}
 */
proto.connect.conformance.GrpclbRouteType = {
  GRPCLB_ROUTE_TYPE_UNKNOWN: 0,
  GRPCLB_ROUTE_TYPE_FALLBACK: 1,
  GRPCLB_ROUTE_TYPE_BACKEND: 2
};

goog.object.extend(exports, proto.connect.conformance);
